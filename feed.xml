<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <generator uri="http://jekyllrb.com" version="3.4.3">Jekyll</generator>
  
  
  <link href="https://lobster1234.github.io/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://lobster1234.github.io/" rel="alternate" type="text/html" />
  <updated>2019-04-24T03:05:30-07:00</updated>
  <id>https://lobster1234.github.io//</id>

  
    <title type="html">Manish Pandit’s Blog</title>
  

  
    <subtitle>A tech blog with gists, code, presentations, tutorials, and many goodies around programming, devops, cloud architectures, aws, google cloud platform, and infrastructure.
</subtitle>
  

  
    <author>
        <name>Manish Pandit</name>
      
      
    </author>
  

  
  
    <entry>
      
      <title type="html">Serverless Aurora RDS</title>
      
      
      <link href="https://lobster1234.github.io/2019/04/22/serverless-aurora-rds/" rel="alternate" type="text/html" title="Serverless Aurora RDS" />
      
      <published>2019-04-22T13:44:37-07:00</published>
      <updated>2019-04-22T13:44:37-07:00</updated>
      <id>https://lobster1234.github.io/2019/04/22/serverless-aurora-rds</id>
      <content type="html" xml:base="https://lobster1234.github.io/2019/04/22/serverless-aurora-rds/">&lt;p&gt;&lt;a href=&quot;&quot;&gt;Amazon RDS&lt;/a&gt; is a fully managed Relational Database Service in the AWS Public Cloud. &lt;a href=&quot;https://aws.amazon.com/rds/aurora/&quot;&gt;Amazon Aurora&lt;/a&gt; is a MySQL and Postgre compatible database with much better performance at scale with all the enhancements and rewriting AWS has put in. For more context on Aurora, here is &lt;a href=&quot;https://lobster1234.github.io/2017/11/03/amazon-aurora-rds-notes/&quot;&gt;my post on Aurora&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Very recently, Amazon’s Fulfillment Unit &lt;a href=&quot;https://twitter.com/jdarrow/status/1111629087947132928&quot;&gt;moved off of Oracle&lt;/a&gt; on to Aurora Postgres + DynamoDB.&lt;/p&gt;

&lt;p&gt;Aurora RDS has a lot of practical configurations applicable to pretty much all production workloads (multi region, multi-flavored read replicas FTW!). The ones I like the most are &lt;a href=&quot;https://aws.amazon.com/rds/aurora/global-database/&quot;&gt;Aurora Global Database&lt;/a&gt;, and &lt;a href=&quot;https://aws.amazon.com/rds/aurora/serverless/&quot;&gt;Aurora Serverless&lt;/a&gt;. In this post I will talk about Aurora Serverless, while saving Aurora Global Database for a later time.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/rds/aurora/serverless/&quot;&gt;Amazon Aurora Serverless&lt;/a&gt; is an on-demand, out of the box auto-scaled Aurora MySQL 5.6 Database which is &lt;em&gt;Serverless&lt;/em&gt;, in that it will start, scale, and stop automatically. As all RDS engines, it is fully managed.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;use-cases&quot;&gt;Use Cases&lt;/h2&gt;

&lt;p&gt;Combined with autoscaling, on-demand startup and shutdown, and per-second pricing, Aurora Serverless is a great fit for workloads that are infrequent and/or variable. Some of the examples can be -&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Test workloads, where a database instance is only really need during the test runs, and can be “torn down” after the tests have finished running.&lt;/li&gt;
  &lt;li&gt;Batch Jobs, where the database is available for the batch job to store state, or any other related data associated with the job.&lt;/li&gt;
  &lt;li&gt;Benchmarking the database requirements for a new application before provisioning an Aurora RDS Cluster. However, I feel performance testing on Aurora Serverless could be a stretch, as it’d autoscale, while the Production RDS (non-Serverless) will not.&lt;/li&gt;
  &lt;li&gt;Unpredictable workloads, where database capacity needs to be autoscaled. I would not really do this in a production environment, as quite a few of Aurora RDS features are not available with Serverless Configuration, like -
    &lt;ul&gt;
      &lt;li&gt;Replicas&lt;/li&gt;
      &lt;li&gt;IAM Database Authentication&lt;/li&gt;
      &lt;li&gt;Restoring from S3&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html&quot;&gt;Few other limitations&lt;/a&gt; that can be a deal-breaker for some production workloads&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;serverless-autoscale&quot;&gt;Serverless Autoscale&lt;/h2&gt;

&lt;p&gt;Lets get some clarity on Aurora Serverless Autoscale. Usually we see the term &lt;em&gt;autoscale&lt;/em&gt; used with EC2 instances, ECS Services, Lambdas, DynamoDB, etc. It is common knowledge that a relational database cannot &lt;em&gt;autoscale&lt;/em&gt;. It can, however, &lt;em&gt;manual-scale&lt;/em&gt; (or &lt;em&gt;script-scale&lt;/em&gt;) vertically (beefier instance type) or horizontally (read relicas for reads).&lt;/p&gt;

&lt;p&gt;Serverless Aurora does &lt;em&gt;autoscale&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;compute--memory&quot;&gt;Compute &amp;amp; Memory&lt;/h3&gt;

&lt;p&gt;Aurora Serverless uses &lt;code class=&quot;highlighter-rouge&quot;&gt;ACU&lt;/code&gt; (Aurora Capacity Unit) as its capacity unit. This is comparable to provisioning an RDS Instance Types (&lt;code class=&quot;highlighter-rouge&quot;&gt;db.t3.micro&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;db.r5.4xlarge&lt;/code&gt;, etc.) which have a fixed amount of compute, network IO, storage IO, and memory. We &lt;em&gt;provision&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;ACUs&lt;/code&gt; instead of picking instance types. An &lt;code class=&quot;highlighter-rouge&quot;&gt;ACU&lt;/code&gt; represents a combination of compute and memory capacity.&lt;/p&gt;

&lt;p&gt;The units range from &lt;code class=&quot;highlighter-rouge&quot;&gt;2 ACUs (4GB RAM)&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;256 ACUs (488GB RAM)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We specify the &lt;code class=&quot;highlighter-rouge&quot;&gt;minimum ACUs&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;maximum ACUs&lt;/code&gt;, which limit the cluster’s scale down and scale up respectively. Aurora Serverless scales up based on the number of connections, CPU usage, and memory usage. This scale up event is initiated at a &lt;em&gt;scaling point&lt;/em&gt;. Same is applicable for scaling down, which has a cooldown period of &lt;code class=&quot;highlighter-rouge&quot;&gt;15 minutes&lt;/code&gt; after a scale up event, and &lt;code class=&quot;highlighter-rouge&quot;&gt;310 seconds (~5 mins)&lt;/code&gt; after each cool down event.&lt;/p&gt;

&lt;h3 id=&quot;storage&quot;&gt;Storage&lt;/h3&gt;

&lt;p&gt;The storage &lt;em&gt;autoscales&lt;/em&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;10 GB&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;64 TB&lt;/code&gt; (just like Aurora RDS).&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;p&gt;Aurora Serverless set up is accessible on the AWS Console just like other RDS Engines. However, it does &lt;strong&gt;not&lt;/strong&gt; qualify for Free Tier. Also, it is only available for MySQL 5.6 compatible edition.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;From the console, search for RDS to land on the &lt;a href=&quot;https://console.aws.amazon.com/rds/home?region=us-east-1&quot;&gt;RDS home&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Aurora Serverless is not available in all regions. I use us-east-1, you may want to switch to that if you do not see the configuration option in the steps below.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click the orange &lt;strong&gt;Create Database&lt;/strong&gt; button.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/serverless-aurora/create_database.png&quot; alt=&quot;sls-1&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On the next screen, select &lt;strong&gt;Amazon Aurora&lt;/strong&gt; with &lt;strong&gt;MySQL 5.6-compatible&lt;/strong&gt; Edition. Also note that the &lt;strong&gt;Only enable options eligible for RDS Free Usage Tier&lt;/strong&gt; checkbox is off, as Aurora RDS does not quality for Free Tier. Click &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/serverless-aurora/aurora_page_1.png&quot; alt=&quot;sls-2&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select &lt;strong&gt;Serverless&lt;/strong&gt;. You’ll notice the options for DB Instance Class dissappear. Under &lt;strong&gt;Settings&lt;/strong&gt;, pick a cluster identifier, master username, and a password that you can remember. Click &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/serverless-aurora/aurora_page_2.png&quot; alt=&quot;sls-3&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next screen is where we pick the &lt;code class=&quot;highlighter-rouge&quot;&gt;ACUs&lt;/code&gt;. To keep costs in check, I’ll pick &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt; ACUs as minumum and &lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt; as maximum.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/serverless-aurora/advanced_settings.png&quot; alt=&quot;sls-4&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Under &lt;strong&gt;Network &amp;amp; Security&lt;/strong&gt;, we can keep defaults. &lt;strong&gt;Note&lt;/strong&gt; that there are is no option to provision a public endpoint for Aurora Serverless, unlike other RDS Configurations. In other words, Serverless Aurora can only be accessed from within a VPC, and/or a peered network.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If we expand the &lt;strong&gt;Additional Configuration&lt;/strong&gt;, there are options for parameter groups, backup retention, and encryption. Notice that Aurora Serverless is &lt;em&gt;always&lt;/em&gt; encrypted at rest using the default RDS CMK (&lt;code class=&quot;highlighter-rouge&quot;&gt;aws/rds&lt;/code&gt;). You may specify another CMK. For now we leave everything as default. Click &lt;strong&gt;Create Database&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The next screen shows the the cluster being created. Notice the size of &lt;code class=&quot;highlighter-rouge&quot;&gt;4 capacity units&lt;/code&gt; once it is created. It took about 3 minutes for me.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/serverless-aurora/created.png&quot; alt=&quot;sls-5&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If we click on the DB Identifier, it will take us to the cluster details page. This is where we can get information about connecting to the cluster, as well as configuration, logs, etc. Feel free to click around. Notice that &lt;strong&gt;Logs &amp;amp; Events&lt;/strong&gt; is empty. Even though we have our cluster set up, since there are no connections to it, there is no activity. Hence &lt;em&gt;autoscale&lt;/em&gt;!&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/serverless-aurora/cluster_details.png&quot; alt=&quot;sls-6&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;connectivity&quot;&gt;Connectivity&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;To connect to the cluster, we’d need the &lt;code class=&quot;highlighter-rouge&quot;&gt;Endpoint&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;step 10&lt;/code&gt;. Mine looks like &lt;code class=&quot;highlighter-rouge&quot;&gt;my-aurora-serverless.cluster-cwl9ckkpdjxu.us-east-1.rds.amazonaws.com&lt;/code&gt;. The port number is 3306, which cannot be changed for Aurora Serverless.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Provision an EC2 instance in the same VPC. Since I used the default VPC, I’ll have the instance with a public IP, so I can &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into it from my laptop’s IP. I already have a security group configured to do so, which I’ll attach to the instance. If this seems unfamiliar, please see EC2 documentation on launching an EC2 instance in a VPC. If there is an instance already provisioned and you can get to it, do so!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next, we install mysql client on the instance. I am using Amazon Linux AMI on a &lt;code class=&quot;highlighter-rouge&quot;&gt;t2.micro&lt;/code&gt; instance type.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; [ec2-user@ip-172-31-61-122 ~]$ uname -a
 Linux ip-172-31-61-122.ec2.internal 4.14.104-95.84.amzn2.x86_64 #1 SMP Sat Mar 2 00:40:20 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux
 [ec2-user@ip-172-31-61-122 ~]$ sudo yum update -y
 Loaded plugins: extras_suggestions, langpacks, priorities, update-motd
 Resolving Dependencies
 --&amp;gt; Running transaction check
 ---&amp;gt; Package bind-libs.x86_64 32:9.9.4-73.amzn2.1.1 will be updated
 ---&amp;gt; Package bind-libs.x86_64 32:9.9.4-73.amzn2.1.2 will be an update
 ---&amp;gt; Package bind-libs-lite.x86_64 32:9.9.4-73.amzn2.1.1 will be updated
 ---&amp;gt; Package bind-libs-lite.x86_64 32:9.9.4-73.amzn2.1.2 will be an update
 ---&amp;gt; Package bind-license.noarch 32:9.9.4-73.amzn2.1.1 will be updated
 ...
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; [ec2-user@ip-172-31-61-122 ~]$ sudo yum install mysql -y
 ..
 ..
 Installed:
 mariadb.x86_64 1:5.5.62-1.amzn2.0.1

 Complete!
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;We can now connect to our cluster.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; [ec2-user@ip-172-31-61-122 ~]$ mysql -u mpandit -p -h my-aurora-serverless.cluster-cwl9ckkpdjxu.us-east-1.rds.amazonaws.com
 Enter password:

 ^C
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;This step will time out, if we went with all the default settings during Setup. This is because the RDS Security Group that was automatically created only allows &lt;code class=&quot;highlighter-rouge&quot;&gt;3306&lt;/code&gt; inbound from our IP address. We will need to open up that security group to our VPC. To navigate to the security group, go to &lt;a href=&quot;https://console.aws.amazon.com/ec2/v2/home?region=us-east-1#SecurityGroups:sort=groupId&quot;&gt;Subnets&lt;/a&gt;, and look for a Security Group named &lt;code class=&quot;highlighter-rouge&quot;&gt;rds-launch-wizard&lt;/code&gt;. Verify the date/time in the description, as well as VPC ID to ensure you’re picking up the right one, in case you have multiple of them across many VPCs. If you click that Security Group and go to &lt;strong&gt;Inbound&lt;/strong&gt; tab, you can see that it only allows inbound from a &lt;code class=&quot;highlighter-rouge&quot;&gt;/32&lt;/code&gt; IP, which is your public IP. This IP is your internet gateway (Wifi Router, Internet Modem) IP. Let us open it up to our VPC. We can either enter our VPC CIDR, the VPC’s default security group, or just the one instance’s private IP. To keep things simple, I’ll use the instance’s private IP. This is different than the public IP used to ssh into the server. To get the server’s private IP, we can use the instance metadata endpoint.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; [ec2-user@ip-172-31-61-122 ~]$ curl http://169.254.169.254/1.0/meta-data/local-ipv4
 172.31.61.122
 [ec2-user@ip-172-31-61-122 ~]$
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;We can take this IP and stick it in the RDS security group, as &lt;code class=&quot;highlighter-rouge&quot;&gt;172.31.61.122/32&lt;/code&gt; replacing the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;myIP&amp;gt;/32&lt;/code&gt;. This will only allow access from the instance we’re on, and not from anywhere else.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/serverless-aurora/security_group.png&quot; alt=&quot;sls-7&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once done, we go back to our EC2 instance and retry the above connection attempt.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;BE PATIENT DURING THIS STEP!&lt;/strong&gt;&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; [ec2-user@ip-172-31-61-122 ~]$ mysql -u mpandit -p -h my-aurora-serverless.cluster-cwl9ckkpdjxu.us-east-1.rds.amazonaws.com
 Enter password:

 Welcome to the MariaDB monitor.  Commands end with ; or \g.
 Your MySQL connection id is 10
 Server version: 5.6.10 MySQL Community Server (GPL)

 Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

 Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

 MySQL [(none)]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;Please note  that it will take a while (~30 seconds for me) for this to work. This is because the cluster will take some time to initialize and start. Now lets go to the Cluster Console and check the events log.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;We can now play with this cluster, like so
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; MySQL [(none)]&amp;gt; create database addressbook;
 Query OK, 1 row affected (0.01 sec)

 MySQL [(none)]&amp;gt; use addressbook;
 Database changed
 MySQL [addressbook]&amp;gt; create table address ( name varchar(100), city varchar(50), zip varchar(10) );
 Query OK, 0 rows affected (0.03 sec)

 MySQL [addressbook]&amp;gt; insert into address (name, city, zip) values ('Joe','Dublin','94568');
 Query OK, 1 row affected (0.00 sec)

 MySQL [addressbook]&amp;gt; select * from address;
 +------+--------+-------+
 | name | city   | zip   |
 +------+--------+-------+
 | Joe  | Dublin | 94568 |
 +------+--------+-------+
 1 row in set (0.01 sec)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On the &lt;strong&gt;Logs &amp;amp; events&lt;/strong&gt; tab, we can notice the cluster activity. Note how it scaled down the cluster from &lt;code class=&quot;highlighter-rouge&quot;&gt;4 ACUs&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;2 ACUs&lt;/code&gt; since we are not really doing much.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/serverless-aurora/events_1.png&quot; alt=&quot;sls-8&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On the &lt;strong&gt;Monitoring&lt;/strong&gt; tab, we can see the scaling activity, as well as the number of connections as &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; which is the MySQL client from the EC2 instance. If yours looks different, do not worry. I reconnected a few times after exiting out of the connection.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/serverless-aurora/monitoring.png&quot; alt=&quot;sls-9&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now let us close the MySQL client and wait for the Aurora Serverless to shut down the cluster entirely.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    
MySQL [addressbook]&amp;gt; exit;
Bye
    
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;In the &lt;strong&gt;Configuration&lt;/strong&gt; tab, notice that &lt;code class=&quot;highlighter-rouge&quot;&gt;Pause compute capacity after consecutive minutes of inactivity&lt;/code&gt; which says &lt;code class=&quot;highlighter-rouge&quot;&gt;5 minutes&lt;/code&gt;. After 5 minutes of us terminating the MySQL session, we should expect the cluster to scale down to &lt;code class=&quot;highlighter-rouge&quot;&gt;zero ACUs&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/serverless-aurora/events_2.png&quot; alt=&quot;sls-10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Refresh the page and you’ll notice the &lt;strong&gt;Current capacity&lt;/strong&gt; to indicate &lt;code class=&quot;highlighter-rouge&quot;&gt;0 capacity units&lt;/code&gt;, as our cluster has shut down, or &lt;code class=&quot;highlighter-rouge&quot;&gt;paused&lt;/code&gt;. If we reconnect from MySQL client, and be patient, the cluster will come alive, or &lt;code class=&quot;highlighter-rouge&quot;&gt;unpause&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;scale up&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;0 ACUs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/serverless-aurora/final.png&quot; alt=&quot;sls-11&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cleanup&quot;&gt;Cleanup&lt;/h2&gt;

&lt;p&gt;To avoid unwanted charges, we will delete this cluster. However, since we left the &lt;strong&gt;Enable Deletion Protection&lt;/strong&gt; checked as default setting, we’ll need to mofify the cluster to disable it. Click &lt;strong&gt;Modify&lt;/strong&gt; and scroll all the way down, and uncheck the &lt;strong&gt;Enable Deletion Protection&lt;/strong&gt; checkbox, click &lt;strong&gt;Continue&lt;/strong&gt;. On the next screen, click the &lt;strong&gt;Apply immediately&lt;/strong&gt; radio button, and, click &lt;strong&gt;Modify Cluster&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now click &lt;strong&gt;Actions&lt;/strong&gt; and click &lt;strong&gt;Delete&lt;/strong&gt;. Pick &lt;strong&gt;No&lt;/strong&gt; to create final snapshot, and check the acknoweldgement checkbox. Click &lt;strong&gt;Delete DB cluster&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Terminate the EC2 instance as well, if you created one while following this post and do not need it anymore.&lt;/p&gt;

&lt;h2 id=&quot;gotchas&quot;&gt;Gotchas&lt;/h2&gt;

&lt;p&gt;Now that we have seen Aurora Serverless in action, here are a few gotchas :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Set the DB connection timeout to at least a minute, if not more. This is for the initial connection latency, while the cluster is &lt;code class=&quot;highlighter-rouge&quot;&gt;unpaused&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;scaled up&lt;/code&gt; from Zero ACUs.&lt;/li&gt;
  &lt;li&gt;Make sure the connections are closed - as long as there is even one connection, the cluster will sit at minumum ACUs and not pause. For example, AWS Batch containers will exit upon completion, terminating any connections. In cases where the process does not exit, ensure to shutdown the connection pool to avoid this situation.&lt;/li&gt;
  &lt;li&gt;Configure the RDS Security group securely, make sure you only allow connections from known and needed hosts.&lt;/li&gt;
  &lt;li&gt;The port number cannot be changed from 3306.&lt;/li&gt;
  &lt;li&gt;There are no replicas, the instance is all we got.&lt;/li&gt;
  &lt;li&gt;Do not use Aurora Serverless for &lt;em&gt;always on&lt;/em&gt; type applications. This will not be cost effective.&lt;/li&gt;
  &lt;li&gt;Design the test harness where the initialization and destruction is guaranteed to run pre and post test runs when using this set up for running tests. In other words, if the tests exit uncleanly, there is a chance that the connection(s) will continue to be established to the database, preventing a pause.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;pricing&quot;&gt;Pricing&lt;/h2&gt;

&lt;p&gt;The pricing is a little tricky, we pay by the ACUs, the IO requests, and storage. For us-east-1, the cost basis is &lt;code class=&quot;highlighter-rouge&quot;&gt;$0.06 per ACU per hour&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$0.10 per GB per month&lt;/code&gt; for storage, and  &lt;code class=&quot;highlighter-rouge&quot;&gt;$0.20 per 1MM IO Requests&lt;/code&gt;. The ACUs are billed &lt;em&gt;per second&lt;/em&gt; with a minimum of &lt;code class=&quot;highlighter-rouge&quot;&gt;5 minutes&lt;/code&gt; every time the cluster is &lt;em&gt;running&lt;/em&gt; or &lt;em&gt;unpaused&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The exercise above did cost us a little, as mentioned earlier.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/rds/aurora/faqs/&quot;&gt;Amazon Aurora RDS FAQs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/rds/aurora/serverless/&quot;&gt;Amazon Aurora Serverless Product Site&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html&quot;&gt;Amazon Aurora Serverless Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’d appreciate your comments and feedback below.&lt;/p&gt;

&lt;h3 style=&quot;text-align: center&quot; id=&quot;comments&quot;&gt;Comments&lt;/h3&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = &quot;https://lobster1234.github.io/2019/04/22/serverless-aurora-rds/&quot;;  
this.page.identifier = &quot;/2019/04/22/serverless-aurora-rds&quot;;
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://lobster1234.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;


      

&lt;/script&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      

      
        <category term="aws" />
      

      
        <summary type="html">Amazon RDS is a fully managed Relational Database Service in the AWS Public Cloud. Amazon Aurora is a MySQL and Postgre compatible database with much better performance at scale with all the enhancements and rewriting AWS has put in. For more context on Aurora, here is my post on Aurora. Very recently, Amazon’s Fulfillment Unit moved off of Oracle on to Aurora Postgres + DynamoDB. Aurora RDS has a lot of practical configurations applicable to pretty much all production workloads (multi region, multi-flavored read replicas FTW!). The ones I like the most are Aurora Global Database, and Aurora Serverless. In this post I will talk about Aurora Serverless, while saving Aurora Global Database for a later time. Amazon Aurora Serverless is an on-demand, out of the box auto-scaled Aurora MySQL 5.6 Database which is Serverless, in that it will start, scale, and stop automatically. As all RDS engines, it is fully managed.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Docker Socket File for IPC</title>
      
      
      <link href="https://lobster1234.github.io/2019/04/05/docker-socket-file-for-ipc/" rel="alternate" type="text/html" title="Docker Socket File for IPC" />
      
      <published>2019-04-05T13:44:37-07:00</published>
      <updated>2019-04-05T13:44:37-07:00</updated>
      <id>https://lobster1234.github.io/2019/04/05/docker-socket-file-for-ipc</id>
      <content type="html" xml:base="https://lobster1234.github.io/2019/04/05/docker-socket-file-for-ipc/">&lt;p&gt;While setting up a &lt;a href=&quot;https://consul.io&quot;&gt;Consul&lt;/a&gt; cluster, I decided to dig a bit deeper into the whole &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/run/docker.sock&lt;/code&gt; phenomenon. While it is fairly common that a lot of Service Meshes like Consul, and System Monitoring Services like &lt;a href=&quot;https://newrelic.com&quot;&gt;Newrelic&lt;/a&gt; and &lt;a href=&quot;https://datadog.com&quot;&gt;DataDog&lt;/a&gt; ask to mount &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/run/docker.sock&lt;/code&gt;, I must admit I’ve always been curious about this particular socket (vs. taking the mount step for granted). These are my notes from calling Docker Server by &lt;em&gt;curl-ing&lt;/em&gt; the socket.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Before we get to the socket file, here is a quick refresher on Unix Sockets and typical Docker setup for context.&lt;/p&gt;

&lt;h2 id=&quot;unix-sockets&quot;&gt;Unix Sockets&lt;/h2&gt;

&lt;p&gt;The term &lt;code class=&quot;highlighter-rouge&quot;&gt;Sockets&lt;/code&gt; commonly refers to &lt;code class=&quot;highlighter-rouge&quot;&gt;IP Sockets&lt;/code&gt;. These are the ones that are bound to a port (and address), we send TCP requests to, and get responses from.&lt;/p&gt;

&lt;p&gt;Another type of Socket is a &lt;code class=&quot;highlighter-rouge&quot;&gt;Unix Socket&lt;/code&gt;, which I never really ran into as much after school, except in recent few years when dealing with Docker runtime. As a refresher, these sockets are used for IPC (Interprocess Communication). They’re also called Unix Domain Sockets (UDS). Unix Sockets use local filesystem for communication, while IP Sockets use the network. This makes Unix Sockets &lt;em&gt;faster&lt;/em&gt; - but then again, they are confined to local communication only. Kind of like what &lt;em&gt;containers&lt;/em&gt; would use to talk to the &lt;em&gt;docker host&lt;/em&gt; on the same &lt;em&gt;machine&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A good way to look at them is to list the &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/run&lt;/code&gt; folder, here is my Mac -&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ ls -al /var/run | grep sock
srw-rw-rw-   1 root             daemon              0 Mar 29 11:46 com.docker.vmnetd.sock
lrwxr-xr-x   1 mpandit          1498914130         68 Mar 29 11:48 docker.sock -&amp;gt; /Users/mpandit/Library/Containers/com.docker.docker/Data/docker.sock
srwxrwxrwx   1 root             daemon              0 Mar 29 11:46 portmap.socket
srw-rw-rw-   1 root             daemon              0 Mar 29 11:46 systemkeychaincheck.socket
srw-------   1 root             daemon              0 Mar 29 11:46 vpncontrol.sock
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&quot;docker-on-macos&quot;&gt;Docker on MacOS&lt;/h2&gt;

&lt;p&gt;Docker installation on the Mac via &lt;a href=&quot;https://www.docker.com/products/docker-desktop&quot;&gt;Docker Desktop&lt;/a&gt; has three components to it -&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The Docker Daemon (aka Docker Server), which runs atop HyperKit Hypervisor as a &lt;a href=&quot;https://github.com/linuxkit/linuxkit&quot;&gt;LinuxKit VM&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;The Docker CLI (&lt;code class=&quot;highlighter-rouge&quot;&gt;docker&lt;/code&gt; ,&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-machine&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;The &lt;a href=&quot;https://docs.docker.com/engine/api/v1.37/&quot;&gt;Docker REST API&lt;/a&gt;, which is explosed via a Unix Socket at &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/run/docker.sock&lt;/code&gt; by default.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Things are a little different when using &lt;a href=&quot;https://docs.docker.com/toolbox/overview/&quot;&gt;Docker Toolbox&lt;/a&gt; (legacy), which uses &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-machine&lt;/code&gt; to launch the LinuxKit VM in VirtualBox.&lt;/p&gt;

&lt;p&gt;In Docker Desktop, &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/run/docker.sock&lt;/code&gt; replaces &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-machine&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Docker Server uses this socket to listen to the REST API, and the clients use the socket to send API requests to the server. The CLI is &lt;em&gt;one&lt;/em&gt; such client.&lt;/p&gt;

&lt;h2 id=&quot;using-curl&quot;&gt;Using curl&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://curl.haxx.se/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;&lt;/a&gt; is the swiss army knife for any communication. We can use &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; to act as a client and use the &lt;a href=&quot;https://docs.docker.com/engine/api/v1.37/&quot;&gt;Docker REST API&lt;/a&gt;. It’s a good idea to familiarize yourself with &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; and all the powers this little command holds. Trust me on this.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; can talk to a Unix Socket via the &lt;code class=&quot;highlighter-rouge&quot;&gt;--unix-socket&lt;/code&gt; flag. Since Docker Server API is exposed as REST, we’d need to send commands over HTTP. Also, as this server is local (remeember, the file system), we can pass &lt;em&gt;any&lt;/em&gt; hostname in the URL (or stick to &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost&lt;/code&gt;, that will work fine too!). The server does not care about the hostname, just the path.&lt;/p&gt;

&lt;h2 id=&quot;lets-go&quot;&gt;Lets go!&lt;/h2&gt;

&lt;p&gt;We can start fresh, or if you already have a bunch of containers running, that is fine too. Your output may look a little different, but the commands will work just fine.&lt;/p&gt;

&lt;p&gt;For this post, I’ll start with no images, or containers on the system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do not run system prune unless you’ve used it before, or are sure about wiping your Docker setup clean. In doubt? Skip to the next step.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ docker system prune -a
WARNING! This will remove:
        - all stopped containers
        - all networks not used by at least one container
        - all images without at least one container associated to them
        - all build cache
Are you sure you want to continue? [y/N] y
Deleted Containers:
1a5e227d2251507e71fff25dfca60e9aea1f9a61d4a7cde078b8b2b357d70a71
f9dc7950dcd9b29a85197030579487f40cebbb2556f56180b6ca4929d3f61c9d

Deleted Images:
untagged: nginx:latest
untagged: nginx@sha256:c8a861b8a1eeef6d48955a6c6d5dff8e2580f13ff4d0f549e082e7c82a8617a2
deleted: sha256:2bcb04bdb83f7c5dc30f0edaca1609a716bda1c7d2244d4f5fbbdfef33da366c
deleted: sha256:dfce9ec5eeabad339cf90fce93b20f179926d5819359141e49e0006a52c066ca
deleted: sha256:166d13b0f0cb542034a2aef1c034ee2271e1d6aaee4490f749e72d1c04449c5b

Total reclaimed space: 54.01MB
bash-3.2$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
bash-3.2$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
bash-3.2$

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Again, you may have images in the cache, and containers running. That is perfectly fine.&lt;/p&gt;

&lt;p&gt;Lets start a &lt;code class=&quot;highlighter-rouge&quot;&gt;redis&lt;/code&gt; image, which we will use for the rest of the commands.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ docker run -d -p 6379:6379 redis:latest
Unable to find image 'redis:latest' locally
latest: Pulling from library/redis
Digest: sha256:000339fb57e0ddf2d48d72f3341e47a8ca3b1beae9bdcb25a96323095b72a79b
Status: Downloaded newer image for redis:latest
c025ae0e698eae82e8d783089693c5ada75b9c10ff01e3884255ed019b12c569
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We just started a &lt;code class=&quot;highlighter-rouge&quot;&gt;redis&lt;/code&gt; container, with ID &lt;code class=&quot;highlighter-rouge&quot;&gt;c025ae0e698eae82e8d783089693c5ada75b9c10ff01e3884255ed019b12c569&lt;/code&gt;, which is listening on port &lt;code class=&quot;highlighter-rouge&quot;&gt;6379&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can validate it via &lt;code class=&quot;highlighter-rouge&quot;&gt;redis-cli&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;telnet&lt;/code&gt;. Type &lt;code class=&quot;highlighter-rouge&quot;&gt;INFO&lt;/code&gt; and then &lt;code class=&quot;highlighter-rouge&quot;&gt;QUIT&lt;/code&gt; to exit the session.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ telnet localhost 6379
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
INFO
$3304
# Server
redis_version:5.0.3
redis_git_sha1:00000000
.....
# Keyspace
db0:keys=2,expires=0,avg_ttl=0

QUIT
+OK
Connection closed by foreign host.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;get-images&quot;&gt;Get images&lt;/h3&gt;

&lt;p&gt;We can use the images API to get the images. &lt;em&gt;Note that we can use any hostname&lt;/em&gt;. We are connecting to the socket, and calling an API &lt;code class=&quot;highlighter-rouge&quot;&gt;/images/json&lt;/code&gt; to get the images.&lt;/p&gt;

&lt;p&gt;I use &lt;a href=&quot;https://stedolan.github.io/jq/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jq&lt;/code&gt;&lt;/a&gt; to format the output, among other things. Check it out - &lt;code class=&quot;highlighter-rouge&quot;&gt;brew install jq&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$  curl --unix-socket /var/run/docker.sock http://foo/images/json | jq
  [
  {
    &quot;Containers&quot;: -1,
    &quot;Created&quot;: 1553647740,
    &quot;Id&quot;: &quot;sha256:a55fbf438dfd878424c402e365ef3d80c634f07d0f5832193880ee1b95626e4e&quot;,
    &quot;Labels&quot;: null,
    &quot;ParentId&quot;: &quot;&quot;,
    &quot;RepoDigests&quot;: [
      &quot;redis@sha256:000339fb57e0ddf2d48d72f3341e47a8ca3b1beae9bdcb25a96323095b72a79b&quot;
    ],
    &quot;RepoTags&quot;: [
      &quot;redis:latest&quot;
    ],
    &quot;SharedSize&quot;: -1,
    &quot;Size&quot;: 95000962,
    &quot;VirtualSize&quot;: 95000962
  }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Compare this to another API client - the CLI&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
redis               latest              a55fbf438dfd        11 days ago         95MB
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Notice the CLI renders the same output in a much more readable manner.&lt;/p&gt;

&lt;h3 id=&quot;inspect-an-image&quot;&gt;Inspect an Image&lt;/h3&gt;

&lt;p&gt;The API is &lt;code class=&quot;highlighter-rouge&quot;&gt;/images/{id}/json&lt;/code&gt;. The output is huge, so I’ll truncate it.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$  curl --unix-socket /var/run/docker.sock http://foo/images/a55fbf438dfd/json | jq
{
  &quot;Id&quot;: &quot;sha256:a55fbf438dfd878424c402e365ef3d80c634f07d0f5832193880ee1b95626e4e&quot;,
  &quot;RepoTags&quot;: [
    &quot;redis:latest&quot;
  ],
  &quot;RepoDigests&quot;: [
    &quot;redis@sha256:000339fb57e0ddf2d48d72f3341e47a8ca3b1beae9bdcb25a96323095b72a79b&quot;
  ],
  &quot;Parent&quot;: &quot;&quot;,
  &quot;Comment&quot;: &quot;&quot;,
  &quot;Created&quot;: &quot;2019-03-27T00:49:00.123917534Z&quot;,
  &quot;Container&quot;: &quot;6113cb2d4e6d2d4f375b72c8f5d5c953e3e7f4c22bfad42d5dd0aabf163b79bd&quot;,
  &quot;ContainerConfig&quot;: {
    &quot;Hostname&quot;: &quot;6113cb2d4e6d&quot;,
    &quot;Domainname&quot;: &quot;&quot;,
    &quot;User&quot;: &quot;&quot;,
    &quot;AttachStdin&quot;: false,
    &quot;AttachStdout&quot;: false,
    &quot;AttachStderr&quot;: false,
    &quot;ExposedPorts&quot;: {
      &quot;6379/tcp&quot;: {}
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Again, the CLI command to do so would be &lt;code class=&quot;highlighter-rouge&quot;&gt;docker inspect &amp;lt;imageId&amp;gt;&lt;/code&gt; (response truncated). Note the similarity between the two responses.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ docker inspect a55fbf438dfd | jq
[
  {
    &quot;Id&quot;: &quot;sha256:a55fbf438dfd878424c402e365ef3d80c634f07d0f5832193880ee1b95626e4e&quot;,
    &quot;RepoTags&quot;: [
      &quot;redis:latest&quot;
    ],
    &quot;RepoDigests&quot;: [
      &quot;redis@sha256:000339fb57e0ddf2d48d72f3341e47a8ca3b1beae9bdcb25a96323095b72a79b&quot;
    ],
    &quot;Parent&quot;: &quot;&quot;,
    &quot;Comment&quot;: &quot;&quot;,
    &quot;Created&quot;: &quot;2019-03-27T00:49:00.123917534Z&quot;,
    &quot;Container&quot;: &quot;6113cb2d4e6d2d4f375b72c8f5d5c953e3e7f4c22bfad42d5dd0aabf163b79bd&quot;,
    &quot;ContainerConfig&quot;: {
      &quot;Hostname&quot;: &quot;6113cb2d4e6d&quot;,
      &quot;Domainname&quot;: &quot;&quot;,
      &quot;User&quot;: &quot;&quot;,
      &quot;AttachStdin&quot;: false,
      &quot;AttachStdout&quot;: false,
      &quot;AttachStderr&quot;: false,
      &quot;ExposedPorts&quot;: {
        &quot;6379/tcp&quot;: {}
    }
  }
 ]

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;tag-an-image&quot;&gt;Tag an image&lt;/h3&gt;
&lt;p&gt;Adding this example to perform a &lt;code class=&quot;highlighter-rouge&quot;&gt;write&lt;/code&gt; operation. Let us tag the &lt;code class=&quot;highlighter-rouge&quot;&gt;redis&lt;/code&gt; image with a tag, &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt;. We use the &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; operation &lt;code class=&quot;highlighter-rouge&quot;&gt;/images/{id}/tag&lt;/code&gt; and pass &lt;code class=&quot;highlighter-rouge&quot;&gt;repo&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;tag&lt;/code&gt; as query params. I found this a bit odd, as &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; with query string params is not something we run into often (or ever?). But here it is -&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$  curl -i -X POST --unix-socket /var/run/docker.sock &quot;http://foo/images/a55fbf438dfd/tag?repo=redis&amp;amp;tag=foo&quot;
HTTP/1.1 201 Created
Api-Version: 1.39
Content-Length: 0
Date: Sun, 07 Apr 2019 08:47:38 GMT
Docker-Experimental: true
Ostype: linux
Server: Docker/18.09.2 (linux)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We can verify this further (beyond the &lt;code class=&quot;highlighter-rouge&quot;&gt;201&lt;/code&gt; response)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
redis               foo                 a55fbf438dfd        11 days ago         95MB
redis               latest              a55fbf438dfd        11 days ago         95MB
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;get-containers&quot;&gt;Get Containers&lt;/h3&gt;
&lt;p&gt;Here we will use the &lt;code class=&quot;highlighter-rouge&quot;&gt;/containers/json&lt;/code&gt; just like &lt;code class=&quot;highlighter-rouge&quot;&gt;/images/json&lt;/code&gt; -&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$  curl  --unix-socket /var/run/docker.sock &quot;http://foo/containers/json&quot; | jq
[
  {
    &quot;Id&quot;: &quot;c025ae0e698eae82e8d783089693c5ada75b9c10ff01e3884255ed019b12c569&quot;,
    &quot;Names&quot;: [
      &quot;/infallible_roentgen&quot;
    ],
    &quot;Image&quot;: &quot;redis:latest&quot;,
    &quot;ImageID&quot;: &quot;sha256:a55fbf438dfd878424c402e365ef3d80c634f07d0f5832193880ee1b95626e4e&quot;,
    &quot;Command&quot;: &quot;docker-entrypoint.sh redis-server&quot;,
    &quot;Created&quot;: 1554625562,
    &quot;Ports&quot;: [
      {
        &quot;IP&quot;: &quot;0.0.0.0&quot;,
        &quot;PrivatePort&quot;: 6379,
        &quot;PublicPort&quot;: 6379,
        &quot;Type&quot;: &quot;tcp&quot;
      }
    ],
    &quot;Labels&quot;: {},
    &quot;State&quot;: &quot;running&quot;,
    &quot;Status&quot;: &quot;Up 24 minutes&quot;,
    &quot;HostConfig&quot;: {
      &quot;NetworkMode&quot;: &quot;default&quot;
    }
    ]
  }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The CLI, you ask?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
c025ae0e698e        redis:latest        &quot;docker-entrypoint.s…&quot;   25 minutes ago      Up 25 minutes       0.0.0.0:6379-&amp;gt;6379/tcp   infallible_roentgen
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;stream-events&quot;&gt;Stream Events&lt;/h3&gt;
&lt;p&gt;I’ll end this sequence of APIs with my favorite - &lt;code class=&quot;highlighter-rouge&quot;&gt;events&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;/events&lt;/code&gt; API allows streaming of events on the Docker Server. This can be used to build rich interfaces, or pipelines among many possiblities.&lt;/p&gt;

&lt;p&gt;Note that we’re adding &lt;code class=&quot;highlighter-rouge&quot;&gt;--no-buffer&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; to print output as the events occur, flushing the output right away.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$  curl --no-buffer --unix-socket /var/run/docker.sock http://foo/events
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In a new terminal window, we start another container, &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt;. We will also verify that it works.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ docker run -d -p 80:80 nginx:latest
Unable to find image 'nginx:latest' locally
latest: Pulling from library/nginx
Status: Downloaded newer image for nginx:latest
a9cc0132647be42cdcf3d2d4d5ea7ba1e980d5895978b97c1bf3735ed4408042
bash-3.2$ curl --head http://localhost:80
HTTP/1.1 200 OK
Server: nginx/1.15.10
Date: Sun, 07 Apr 2019 09:00:22 GMT
Content-Type: text/html
Content-Length: 612
Last-Modified: Tue, 26 Mar 2019 14:04:38 GMT
Connection: keep-alive
ETag: &quot;5c9a3176-264&quot;
Accept-Ranges: bytes
bash-3.2$
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;If we go back to the terminal which was running the &lt;code class=&quot;highlighter-rouge&quot;&gt;/events&lt;/code&gt; call, we see the following output -&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pull&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nginx:latest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;image&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pull&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Actor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nginx:latest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Attributes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;maintainer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NGINX Docker Maintainers \u003cdocker-maint@nginx.com\u003e&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nginx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;scope&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;local&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1554627574&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;timeNano&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1554627574220666900&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;create&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a9cc0132647be42cdcf3d2d4d5ea7ba1e980d5895978b97c1bf3735ed4408042&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;from&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nginx:latest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;create&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Actor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a9cc0132647be42cdcf3d2d4d5ea7ba1e980d5895978b97c1bf3735ed4408042&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Attributes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;image&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nginx:latest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;maintainer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NGINX Docker Maintainers \u003cdocker-maint@nginx.com\u003e&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;focused_hodgkin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;scope&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;local&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1554627574&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;timeNano&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1554627574386805100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;network&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;connect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Actor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;11b3729299eba1d7ea896f3c41ad7f1797ed5730831352a7cc13e9aed7e9bf27&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Attributes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a9cc0132647be42cdcf3d2d4d5ea7ba1e980d5895978b97c1bf3735ed4408042&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bridge&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bridge&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;scope&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;local&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1554627574&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;timeNano&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1554627574567980600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a9cc0132647be42cdcf3d2d4d5ea7ba1e980d5895978b97c1bf3735ed4408042&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;from&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nginx:latest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Actor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a9cc0132647be42cdcf3d2d4d5ea7ba1e980d5895978b97c1bf3735ed4408042&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Attributes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;image&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nginx:latest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;maintainer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NGINX Docker Maintainers \u003cdocker-maint@nginx.com\u003e&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;focused_hodgkin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;scope&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;local&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1554627575&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;timeNano&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1554627575041391200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Notice that we’re seeing streaming events, as they occur on the Docker Server. We can stop the redis container, and see that show up in the event stream as well.&lt;/p&gt;

&lt;p&gt;Also we can see the full sequence for &lt;code class=&quot;highlighter-rouge&quot;&gt;docker run&lt;/code&gt;, which is &lt;code class=&quot;highlighter-rouge&quot;&gt;pull_image-&amp;gt;create_container-&amp;gt;network_connect-&amp;gt;start_container&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
c025ae0e698e        redis:latest        &quot;docker-entrypoint.s…&quot;   37 minutes ago      Up 37 minutes       0.0.0.0:6379-&amp;gt;6379/tcp   infallible_roentgen
bash-3.2$ docker stop c025ae0e698e
c025ae0e698e
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;And we have the events!&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kill&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c025ae0e698eae82e8d783089693c5ada75b9c10ff01e3884255ed019b12c569&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;from&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;redis:latest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kill&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Actor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c025ae0e698eae82e8d783089693c5ada75b9c10ff01e3884255ed019b12c569&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Attributes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;image&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;redis:latest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;infallible_roentgen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;signal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;15&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;scope&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;local&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1554627858&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;timeNano&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1554627858776466300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;die&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c025ae0e698eae82e8d783089693c5ada75b9c10ff01e3884255ed019b12c569&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;from&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;redis:latest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;die&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Actor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c025ae0e698eae82e8d783089693c5ada75b9c10ff01e3884255ed019b12c569&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Attributes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;exitCode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;image&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;redis:latest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;infallible_roentgen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;scope&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;local&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1554627859&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;timeNano&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1554627859011940300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;network&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;disconnect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Actor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;11b3729299eba1d7ea896f3c41ad7f1797ed5730831352a7cc13e9aed7e9bf27&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Attributes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c025ae0e698eae82e8d783089693c5ada75b9c10ff01e3884255ed019b12c569&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bridge&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bridge&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;scope&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;local&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1554627859&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;timeNano&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1554627859413159900&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;volume&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;unmount&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Actor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;14e0049f6dd0cb3493d39b6d6ce709a95620d15f8d1f50bdfe6d63372896be62&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Attributes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c025ae0e698eae82e8d783089693c5ada75b9c10ff01e3884255ed019b12c569&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;driver&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;local&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;scope&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;local&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1554627859&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;timeNano&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1554627859500455300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;stop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c025ae0e698eae82e8d783089693c5ada75b9c10ff01e3884255ed019b12c569&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;from&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;redis:latest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;stop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Actor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c025ae0e698eae82e8d783089693c5ada75b9c10ff01e3884255ed019b12c569&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Attributes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;image&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;redis:latest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;infallible_roentgen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;scope&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;local&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1554627859&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;timeNano&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1554627859510757400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice the &lt;code class=&quot;highlighter-rouge&quot;&gt;kill-&amp;gt;die-&amp;gt;network_disconnect-&amp;gt;volume_unmount-&amp;gt;stop&lt;/code&gt; event sequence triggered by the &lt;code class=&quot;highlighter-rouge&quot;&gt;docker stop&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Almost all the APIs are accessible via Docker CLI. This post should help connect the dots when certain containers ask to &lt;code class=&quot;highlighter-rouge&quot;&gt;mount /var/run/docker.sock&lt;/code&gt;. This file provides a very rich (and fast!) IPC channel with the Docker Server, which can then be used for various functions like cluster management, monitoring, discovery, routing, etc.&lt;/p&gt;

&lt;p&gt;I’d appreciate your comments and feedback below.&lt;/p&gt;

&lt;h3 style=&quot;text-align: center&quot; id=&quot;comments&quot;&gt;Comments&lt;/h3&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = &quot;https://lobster1234.github.io/2019/04/05/docker-socket-file-for-ipc/&quot;;  
this.page.identifier = &quot;/2019/04/05/docker-socket-file-for-ipc&quot;;
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://lobster1234.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;


      
&lt;/script&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="architecture" />
      

      
        <category term="architecture" />
      

      
        <summary type="html">While setting up a Consul cluster, I decided to dig a bit deeper into the whole /var/run/docker.sock phenomenon. While it is fairly common that a lot of Service Meshes like Consul, and System Monitoring Services like Newrelic and DataDog ask to mount /var/run/docker.sock, I must admit I’ve always been curious about this particular socket (vs. taking the mount step for granted). These are my notes from calling Docker Server by curl-ing the socket.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Feature Flags and Toggles</title>
      
      
      <link href="https://lobster1234.github.io/2019/03/27/feature-flags-and-toggles/" rel="alternate" type="text/html" title="Feature Flags and Toggles" />
      
      <published>2019-03-27T13:44:37-07:00</published>
      <updated>2019-03-27T13:44:37-07:00</updated>
      <id>https://lobster1234.github.io/2019/03/27/feature-flags-and-toggles</id>
      <content type="html" xml:base="https://lobster1234.github.io/2019/03/27/feature-flags-and-toggles/">&lt;p&gt;Slides from my tech talk at &lt;a href=&quot;https://www.marqeta.com&quot; target=&quot;_blank_&quot;&gt;Marqeta&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;
&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;9cf73f52dfb64ce783b24483173c104a&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="presentations" />
      
        <category term="architecture" />
      

      
        <category term="presentations," />
      
        <category term="tech-talks," />
      
        <category term="software-architecture" />
      

      
        <summary type="html">Slides from my tech talk at Marqeta.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Managing Multiple AWS Credentials</title>
      
      
      <link href="https://lobster1234.github.io/2019/01/03/managing-multiple-aws-credentials/" rel="alternate" type="text/html" title="Managing Multiple AWS Credentials" />
      
      <published>2019-01-03T12:44:37-08:00</published>
      <updated>2019-01-03T12:44:37-08:00</updated>
      <id>https://lobster1234.github.io/2019/01/03/managing-multiple-aws-credentials</id>
      <content type="html" xml:base="https://lobster1234.github.io/2019/01/03/managing-multiple-aws-credentials/">&lt;p&gt;Simple script to manage multiple &lt;a href=&quot;https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html&quot;&gt;AWS credentials&lt;/a&gt; when using the CLI or SDKs.
&lt;!--more--&gt;
As much as using &lt;code class=&quot;highlighter-rouge&quot;&gt;aws_access_key_id&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;aws_secret_access_key&lt;/code&gt; is not ideal, it is the only sane way to work with AWS programmatically or via CLIs from a non-EC2 environment, such as a developer laptop. This is achieved via a &lt;code class=&quot;highlighter-rouge&quot;&gt;credentials&lt;/code&gt; file under &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.aws&lt;/code&gt; by default.&lt;/p&gt;

&lt;p&gt;More often that not, the developers would need multiple sets of credentials - say, for a personal account + dev account at work + test account at work.&lt;/p&gt;

&lt;p&gt;There is a provision of &lt;code class=&quot;highlighter-rouge&quot;&gt;profiles&lt;/code&gt; that can be used to set up multiple credentials in one file. I personally find this a bit hard to manage, and would rather split the credentials in their own &lt;code class=&quot;highlighter-rouge&quot;&gt;credentials&lt;/code&gt; file. Then we can either use the environment variable &lt;code class=&quot;highlighter-rouge&quot;&gt;AWS_SHARED_CREDENTIALS_FILE&lt;/code&gt; to point to the desired file, or use symlinks.&lt;/p&gt;

&lt;p&gt;This post shows my set up, which works pretty well. There is still human factor involved, just like it would be to remember to set the right profile.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;First, I split out the credentials into their own files (vs. profiles). This has credentials for 3 IAM users, each with different policies attached, and my personal profile being entirely different account altogether.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat credentials
[default]
#personal
aws_access_key_id = AKIA****************
aws_secret_access_key = a************************************ABC
[svcserverless]
aws_access_key_id = AKIA****************
aws_secret_access_key = b************************************DEF
[svcec2readonly]
aws_access_key_id = AKIA****************
aws_secret_access_key = c************************************GHI
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;When split, we end up with 3 &lt;code class=&quot;highlighter-rouge&quot;&gt;credentials&lt;/code&gt; files.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;credentials.personal&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[default]
aws_access_key_id = AKIA****************
aws_secret_access_key = a************************************ABC
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;credentials.svcserverless&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[default]
aws_access_key_id = AKIA****************
aws_secret_access_key = b************************************DEF
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;credentials.svcec2readonly&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[default]
aws_access_key_id = AKIA****************
aws_secret_access_key = c************************************GHI
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Next comes a script which will switch the &lt;code class=&quot;highlighter-rouge&quot;&gt;credentials&lt;/code&gt; file according to what’s needed.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;switch.sh&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$# &lt;/span&gt;-eq 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Error: Provide the AWS credentials profile name&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt; -1
&lt;span class=&quot;k&quot;&gt;fi
&lt;/span&gt;rm ~/.aws/credentials
ln -s ~/.aws/credentials.&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;  ~/.aws/credentials
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;I copied this script to &lt;code class=&quot;highlighter-rouge&quot;&gt;~/bin&lt;/code&gt; which is in my &lt;code class=&quot;highlighter-rouge&quot;&gt;$PATH&lt;/code&gt; after &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod +x&lt;/code&gt;‘ing it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ chmod +x switch.sh
$ cp switch.sh ~/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This makes credential switching much easier, like so -&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ switch.sh svcserverless

$ ls -altrh ~/.aws
-rw-------   1 mpandit  staff    43B Apr 24  2018 config
-rw-------   1 mpandit  staff   116B Jan  3 18:48 credentials.svcserverless
-rw-------   1 mpandit  staff   116B Jan  3 18:49 credentials.svcec2readonly
-rw-------   1 mpandit  staff   116B Jan  3 18:50 credentials.personal
lrwxr-xr-x   1 mpandit  staff    40B Jan  3 23:23 credentials -&amp;gt; /Users/mpandit/.aws/credentials.svcserverless

$ aws s3 ls
2018-04-12 17:14:15 mpandit-serverless-dev-deploy
2018-05-23 13:45:31 mpandit-serverless-deployment-bucket
2018-04-23 12:33:37 mpandit-sls-deployment-bucket-test

$ switch.sh personal

$ aws s3 ls  
2018-04-14 00:12:59 aws-java-maven-dev-serverlessdeploymentbucket-lm2r7tvgdp3v
2017-10-13 11:03:23 aws-java-maven-test-serverlessdeploymentbucket-1jt3eyy0xc3f0
2017-08-23 13:11:36 cf-templates-olp5joy4pfd0-us-east-1
2017-03-03 22:36:54 helloworld-dev-serverlessdeploymentbucket-3c6q18d7rv4g
2017-09-29 01:36:06 lobster1234-cloudtrail-audit-log
2017-06-22 12:01:16 lobster1234-infrastructure
2018-11-22 19:42:36 mpandit-versioned
2018-12-14 01:32:50 myblog-jekyll-output
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As mentioned earlier, another way to achieve this is using the environment variable, &lt;code class=&quot;highlighter-rouge&quot;&gt;AWS_SHARED_CREDENTIALS_FILE&lt;/code&gt;, which would mean setting up this environment variable to the location of the credentials file.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;export AWS_SHARED_CREDENTIALS_FILE=~/.aws/credentials.personal&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;export AWS_SHARED_CREDENTIALS_FILE=~/.aws/credentials.svcserverless&lt;/code&gt;&lt;/p&gt;

&lt;h3 style=&quot;text-align: center&quot; id=&quot;comments&quot;&gt;Comments&lt;/h3&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = &quot;https://lobster1234.github.io/2019/01/03/managing-multiple-aws-credentials/&quot;;  
this.page.identifier = &quot;/2019/01/03/managing-multiple-aws-credentials&quot;;
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://lobster1234.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;


      

&lt;/script&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      

      
        <category term="aws" />
      

      
        <summary type="html">Simple script to manage multiple AWS credentials when using the CLI or SDKs.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Lambda Layers</title>
      
      
      <link href="https://lobster1234.github.io/2018/12/20/lambda-layers/" rel="alternate" type="text/html" title="Lambda Layers" />
      
      <published>2018-12-20T12:44:37-08:00</published>
      <updated>2018-12-20T12:44:37-08:00</updated>
      <id>https://lobster1234.github.io/2018/12/20/lambda-layers</id>
      <content type="html" xml:base="https://lobster1234.github.io/2018/12/20/lambda-layers/">&lt;p&gt;At &lt;a href=&quot;https://twitter.com/AWSreInvent/status/1068200715733020673&quot;&gt;re:Invent 2018&lt;/a&gt;, AWS announced &lt;a href=&quot;https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html&quot;&gt;Lambda Layers&lt;/a&gt;, bringing Lambda construct closer to that of an AMI. Put simply, layers are dependencies that can be made available to the function at runtime. Currently there can be 5 &lt;em&gt;layers&lt;/em&gt; associated with a function. Layers help with isolating common dependencies, as well as keeping the runtime consistent in terms of versions - just like the AMIs do. Layers are immutable, and are versioned. While this post is focused on Python, the concept of layers applies uniformly regardless of the language (although I feel this is more &lt;em&gt;useful&lt;/em&gt; for dynamic languages compared to languages like Java, where the whole artifact is packaged as a part of the deployment artifact). The dependencies are zipped up, uploaded as new layer, or a new version of an existing layer. They can be tied to runtimes (via labels) for validation as well.&lt;/p&gt;

&lt;p&gt;In this post I’ll walk through creating a Python layer, and associating it with a function. I’ll use the CLI, &lt;a href=&quot;https://github.com/awslabs/aws-shell&quot;&gt;aws-shell&lt;/a&gt; to accomplish this.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;In this walkthrough, we will associate the Python Github Client, &lt;a href=&quot;https://pygithub.readthedocs.io/en/latest/introduction.html&quot;&gt;PyGithub&lt;/a&gt;, with a Layer, so it is available to our lambda function. I needed this for another project which will be blogged later.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pwd
/Users/mpandit/work/pygithub
$ python --version
Python 2.7.10
$ pip install pygithub -t .
$ chmod -R 755 .
$ zip -r ../pygithub_layer.zip *

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This will create a &lt;code class=&quot;highlighter-rouge&quot;&gt;pygithub_layer.zip&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;/Users/mpandit/work&lt;/code&gt; folder. This archive has the layer that’d be uploaded to AWS.&lt;/p&gt;

&lt;p&gt;Next, we will fire up AWS Shell to upload this Layer on AWS. We will add &lt;code class=&quot;highlighter-rouge&quot;&gt;_2_7&lt;/code&gt; in the layer name to identify the version.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ aws-shell
aws&amp;gt; lambda publish-layer-version --layer-name pygithub_layer_2_7 --zip-file fileb:///Users/mpandit/work/pygithub_layer.zip
{
    &quot;Content&quot;: {
        &quot;CodeSize&quot;: 4914196,
        &quot;CodeSha256&quot;: &quot;VhdxY5459HdfsYBeWdrfCQ0Aedo3+SYaf8h0q6JprX8=&quot;,
        &quot;Location&quot;: &quot;https://prod-04-2014-layers.s3.amazonaws.com/snapshots/:***********:/pygithub_layer_2_7-4f80490e-1d22-4116-b613-abc92b348342?versionId=ET41H_K4V..&quot;
    },
    &quot;LayerVersionArn&quot;: &quot;arn:aws:lambda:us-east-1:***********:layer:pygithub_layer_2_7:1&quot;,
    &quot;Version&quot;: 1,
    &quot;Description&quot;: &quot;&quot;,
    &quot;CreatedDate&quot;: &quot;2018-12-22T10:02:37.038+0000&quot;,
    &quot;LayerArn&quot;: &quot;arn:aws:lambda:us-east-1:***********:layer:pygithub_layer_2_7&quot;
}
aws&amp;gt; lambda list-layers
{
    &quot;Layers&quot;: [
        {
            &quot;LayerName&quot;: &quot;pygithub_layer_2_7&quot;,
            &quot;LayerArn&quot;: &quot;arn:aws:lambda:us-east-1:***********:layer:pygithub_layer_2_7&quot;,
            &quot;LatestMatchingVersion&quot;: {
                &quot;LayerVersionArn&quot;: &quot;arn:aws:lambda:us-east-1:***********:layer:pygithub_layer_2_7:1&quot;,
                &quot;Version&quot;: 1,
                &quot;CreatedDate&quot;: &quot;2018-12-22T10:02:37.038+0000&quot;
            }
        }
    ]
}
aws&amp;gt; lambda list-functions
{
    &quot;Functions&quot;: [
        {
            &quot;TracingConfig&quot;: {
                &quot;Mode&quot;: &quot;PassThrough&quot;
            },
            &quot;Version&quot;: &quot;$LATEST&quot;,
            &quot;CodeSha256&quot;: &quot;r3fwRZPDEUt5qgjfBKrKnoTnyZ9a63M6tOw47kvCwi4=&quot;,
            &quot;FunctionName&quot;: &quot;blogpublisher&quot;,
            &quot;VpcConfig&quot;: {
                &quot;SubnetIds&quot;: [],
                &quot;VpcId&quot;: &quot;&quot;,
                &quot;SecurityGroupIds&quot;: []
            },
            &quot;MemorySize&quot;: 128,
            &quot;RevisionId&quot;: &quot;d8476397-5a13-490d-b70c-31ce8ac75612&quot;,
            &quot;CodeSize&quot;: 379,
            &quot;FunctionArn&quot;: &quot;arn:aws:lambda:us-east-1:***********:function:blogpublisher&quot;,
            &quot;Handler&quot;: &quot;lambda_function.lambda_handler&quot;,
            &quot;Role&quot;: &quot;arn:aws:iam:***********:role/lambda_basic_execution&quot;,
            &quot;Timeout&quot;: 100,
            &quot;LastModified&quot;: &quot;2018-12-22T09:20:25.436+0000&quot;,
            &quot;Runtime&quot;: &quot;python2.7&quot;,
            &quot;Description&quot;: &quot;&quot;
        }
    ]
}
aws&amp;gt; lambda  update-function-configuration --layers arn:aws:lambda:us-east-1:***********:layer:pygithub_layer_2_7:1 --function-name blogpublisher
{
    &quot;Layers&quot;: [
        {
            &quot;CodeSize&quot;: 4914196,
            &quot;Arn&quot;: &quot;arn:aws:lambda:us-east-1:***********:layer:pygithub_layer_2_7:1&quot;
        }
    ],
    &quot;FunctionName&quot;: &quot;blogpublisher&quot;,
    &quot;LastModified&quot;: &quot;2018-12-22T10:09:41.946+0000&quot;,
    &quot;RevisionId&quot;: &quot;ecc6d869-c73f-4270-8042-f8603f050a4c&quot;,
    &quot;MemorySize&quot;: 128,
    &quot;Version&quot;: &quot;$LATEST&quot;,
    &quot;Role&quot;: &quot;arn:aws:iam:***********:role/lambda_basic_execution&quot;,
    &quot;Timeout&quot;: 100,
    &quot;Runtime&quot;: &quot;python2.7&quot;,
    &quot;TracingConfig&quot;: {
        &quot;Mode&quot;: &quot;PassThrough&quot;
    },
    &quot;CodeSha256&quot;: &quot;r3fwRZPDEUt5qgjfBKrKnoTnyZ9a63M6tOw47kvCwi4=&quot;,
    &quot;Description&quot;: &quot;&quot;,
    &quot;VpcConfig&quot;: {
        &quot;SubnetIds&quot;: [],
        &quot;VpcId&quot;: &quot;&quot;,
        &quot;SecurityGroupIds&quot;: []
    },
    &quot;CodeSize&quot;: 379,
    &quot;FunctionArn&quot;: &quot;arn:aws:lambda:us-east-1:***********:function:blogpublisher&quot;,
    &quot;Handler&quot;: &quot;lambda_function.lambda_handler&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above commands confirm that the layer is uploaded, and associated with the function &lt;code class=&quot;highlighter-rouge&quot;&gt;blogpublisher&lt;/code&gt;. Now we can code the function and use the layer, which is made available to us at runtime.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I had to add &lt;code class=&quot;highlighter-rouge&quot;&gt;/opt/&lt;/code&gt; to the path, as the runtime expands the layers in &lt;code class=&quot;highlighter-rouge&quot;&gt;/opt&lt;/code&gt;. I could not get it to work without adding this, probably coz I am a Python n00b. There has to be a better way, but this works too.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You’ll need a Github personal access token with proper permissions, which can be created &lt;a href=&quot;https://github.com/settings/tokens&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/opt/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# This line took me 2 hours to figure out.&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;github&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Github&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# This is coming from the layer&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lambda_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Github&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'replace_with_your_personal_access_token'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repo&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_repos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once ran, we can see the repositories, like so -&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;START RequestId: b0c02335-0892-11e9-a1cb-6fdc63bf3cc9 Version: $LATEST
dockerfiles
dockerfiles-mirror
dotfiles
elasticmq-docker
helloworld-api
lambda-proxy
lobster1234.github.io
localstack
m101j-hw3-23
munin-mongo-collections
my-aws-infrastructure
og-aws
play-salat
RxJava
Scala-For-the-Impatient-Exercises
scalatra-website
SimianArmy
sparkjava-archetypes
SVCC2013
swagger-core
vagrant-demo
END RequestId: b0c02335-0892-11e9-a1cb-6fdc63bf3cc9
REPORT RequestId: b0c02335-0892-11e9-a1cb-6fdc63bf3cc9	Duration: 1559.17 ms	Billed Duration: 1600 ms 	Memory Size: 128 MB	Max Memory Used: 44 MB
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 style=&quot;text-align: center&quot; id=&quot;comments&quot;&gt;Comments&lt;/h3&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = &quot;https://lobster1234.github.io/2018/12/20/lambda-layers/&quot;;  
this.page.identifier = &quot;/2018/12/20/lambda-layers&quot;;
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://lobster1234.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;


      

&lt;/script&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      
        <category term="serverless" />
      

      
        <category term="aws," />
      
        <category term="lambda," />
      
        <category term="serverless" />
      

      
        <summary type="html">At re:Invent 2018, AWS announced Lambda Layers, bringing Lambda construct closer to that of an AMI. Put simply, layers are dependencies that can be made available to the function at runtime. Currently there can be 5 layers associated with a function. Layers help with isolating common dependencies, as well as keeping the runtime consistent in terms of versions - just like the AMIs do. Layers are immutable, and are versioned. While this post is focused on Python, the concept of layers applies uniformly regardless of the language (although I feel this is more useful for dynamic languages compared to languages like Java, where the whole artifact is packaged as a part of the deployment artifact). The dependencies are zipped up, uploaded as new layer, or a new version of an existing layer. They can be tied to runtimes (via labels) for validation as well. In this post I’ll walk through creating a Python layer, and associating it with a function. I’ll use the CLI, aws-shell to accomplish this.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">AWS Certified Solutions Architect Associate 2018 Notes</title>
      
      
      <link href="https://lobster1234.github.io/2018/11/29/aws-certified-solutions-architect-associate-2018-exam-notes/" rel="alternate" type="text/html" title="AWS Certified Solutions Architect Associate 2018 Notes" />
      
      <published>2018-11-29T01:05:22-08:00</published>
      <updated>2018-11-29T01:05:22-08:00</updated>
      <id>https://lobster1234.github.io/2018/11/29/aws-certified-solutions-architect-associate-2018-exam-notes</id>
      <content type="html" xml:base="https://lobster1234.github.io/2018/11/29/aws-certified-solutions-architect-associate-2018-exam-notes/">&lt;p&gt;My &lt;a href=&quot;https://lobster1234.github.io/2016/10/29/aws-certification-notes/&quot;&gt;CSAA from 2016&lt;/a&gt; had expired, and I was in Vegas to attend &lt;a href=&quot;https://reinvent.awsevents.com/&quot;&gt;re:Invent 2018&lt;/a&gt;. I took this opportunity to recertify the credential. This is a newer version of the exam, which made it exciting, but at the same time there were a lot of services that I had not really used, so had to go through the FAQs and documentation for those, along with the excellent &lt;a href=&quot;https://acloud.guru/learn/aws-certified-solutions-architect-associate&quot;&gt;acloud.guru&lt;/a&gt; course.&lt;/p&gt;

&lt;p&gt;It took me about 4 days of serious prep, and I scored 927/1000. Working with AWS professionally for 6 years helped me in a lot of areas - particularly the well architected framework. Also, I loved my exam experience at re:Invent, compared to the typical exam centers we go to. It was far more relaxing, and I scored quite a bit of swag.&lt;/p&gt;

&lt;p&gt;Here are the notes that I took while preparing for the exam.
&lt;!--more--&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/IMG_1109.jpg&quot; alt=&quot;swag&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;exam-blueprint&quot;&gt;Exam Blueprint&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://d1.awsstatic.com/training-and-certification/docs-sa-assoc/AWS_Certified_Solutions_Architect_Associate_Feb_2018_%20Exam_Guide_v1.5.2.pdf&quot;&gt;CSAA Exam Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://d1.awsstatic.com/training-and-certification/docs-sa-assoc/AWS_Certified_Solutions%20Architect_Associate_Feb_2018_Sample%20Questions_v1.0.pdf&quot;&gt;CSAA Practice questions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;domains&quot;&gt;Domains&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Domain 1: Design Resilient Architectures
    &lt;ul&gt;
      &lt;li&gt;1.1 Choose reliable/resilient storage.&lt;/li&gt;
      &lt;li&gt;1.2 Determine how to design decoupling mechanisms using AWS services.&lt;/li&gt;
      &lt;li&gt;1.3 Determine how to design a multi-tier architecture solution.&lt;/li&gt;
      &lt;li&gt;1.4 Determine how to design high availability and/or fault tolerant architectures.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Domain 2: Define Performant Architectures
    &lt;ul&gt;
      &lt;li&gt;2.1 Choose performant storage and databases.&lt;/li&gt;
      &lt;li&gt;2.2 Apply caching to improve performance.&lt;/li&gt;
      &lt;li&gt;2.3 Design solutions for elasticity and scalability.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Domain 3: Specify Secure Applications and Architectures
    &lt;ul&gt;
      &lt;li&gt;3.1 Determine how to secure application tiers.&lt;/li&gt;
      &lt;li&gt;3.2 Determine how to secure data.&lt;/li&gt;
      &lt;li&gt;3.3 Define the networking infrastructure for a single VPC application.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Domain 4: Design Cost-Optimized Architectures
    &lt;ul&gt;
      &lt;li&gt;4.1 Determine how to design cost-optimized storage.&lt;/li&gt;
      &lt;li&gt;4.2 Determine how to design cost-optimized compute.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Domain 5: Define Operationally-Excellent Architectures
    &lt;ul&gt;
      &lt;li&gt;5.1 Choose design features in solutions that enable operational excellence.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;time&quot;&gt;Time&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;130 minutes for 65 questions, score 100-1000, pass score 720, $150&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;

&lt;h2 id=&quot;aws-global-infrastructure&quot;&gt;AWS Global Infrastructure&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/about-aws/global-infrastructure/&quot;&gt;Details&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Regions are physical locations spread out globally (18 as of 8/6/2018)&lt;/li&gt;
  &lt;li&gt;A region consists of at least two AZs or Availability Zones, which are data centers that are isolated from each other. This is to ensure high availability and failure isolation (55 as of 8/6/2018)&lt;/li&gt;
  &lt;li&gt;Edge Locations are where CloudFront, Amazon’s CDN (Content Delivery Network) caches content for geo-distribution. There are way more edge locations than regions or AZs. (96 as of 8/6/2018)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;compute&quot;&gt;Compute&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;EC2 (Elastic Compute Cloud) - The VMs (can also be bare metal)&lt;/li&gt;
  &lt;li&gt;ECS (Elastic Container Service, formerly EC2 Container Service) - to run and manage docker containers&lt;/li&gt;
  &lt;li&gt;Elastic Beanstalk - Upload the code and it provisions the load balancers, EC2s, Security Groups etc.&lt;/li&gt;
  &lt;li&gt;Lambda - FaaS, Serverless Platform&lt;/li&gt;
  &lt;li&gt;Lightsail - Amazon’s Website Hosting Service (Virtual Private Service). Get ssh access and a DB access with a static (fixed) IP.&lt;/li&gt;
  &lt;li&gt;Batch - Used for Batch Computing where Batch Jobs are defined as docker containers&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;storage&quot;&gt;Storage&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;S3 (Simple Storage Service) - Object based storage service&lt;/li&gt;
  &lt;li&gt;EFS (Elastic File System) - Network Attached Storage or NAS that can be mounted to multiple EC2s.&lt;/li&gt;
  &lt;li&gt;Glacier - Data archival, cold storage. High cost (and time) to retrieve, low cost to store.&lt;/li&gt;
  &lt;li&gt;Snowball - To import large amount (petabytes) of data into AWS. Looks like a suitcase.&lt;/li&gt;
  &lt;li&gt;Storage Gateway - Virtual appliances that are hosted on-prem that transfer (replicate) data to AWS&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;databases&quot;&gt;Databases&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;RDS (Relational Database Service) for MySQL, MSSQL, Oracle, Postgres, Aurora, MariaDB&lt;/li&gt;
  &lt;li&gt;DynamoDB - Non-relational, NoSQL database service&lt;/li&gt;
  &lt;li&gt;Elasticache - Cache Service supporting Memcached and Redis&lt;/li&gt;
  &lt;li&gt;Redshift - Data Warehouse/OLAP&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;migration&quot;&gt;Migration&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;AWS Migration Hub&lt;/li&gt;
  &lt;li&gt;Application Discovery Service&lt;/li&gt;
  &lt;li&gt;Database Migration Service (DMS)- On prem database to RDS migration&lt;/li&gt;
  &lt;li&gt;Server Migration Service - VM/Physical to EC2 for Lift and Shift type of migrations&lt;/li&gt;
  &lt;li&gt;Snowball - Migrate large amount of data into AWS (petabyte scale)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;networking-and-content-delivery&quot;&gt;Networking and Content Delivery&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;VPC (Virtual Private Cloud) - A virtual datacenter&lt;/li&gt;
  &lt;li&gt;CloudFront - Amazon’s CDN&lt;/li&gt;
  &lt;li&gt;Route53 - Amazon’s DNS Service&lt;/li&gt;
  &lt;li&gt;API Gateway - Enables exposing services as APIs&lt;/li&gt;
  &lt;li&gt;Direct Connect - A dedicated line from on-prem to AWS VPC&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;developer-tools&quot;&gt;Developer Tools&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;CodeStar - Project Managing/Collaborating the code toolchain&lt;/li&gt;
  &lt;li&gt;CodeCommit - Version Controlled Code Repository (like github)&lt;/li&gt;
  &lt;li&gt;CodeBuild - Code Builder (like Jenkins)&lt;/li&gt;
  &lt;li&gt;Code Deploy - Deployment Service to deploy artifacts&lt;/li&gt;
  &lt;li&gt;Code Pipeline - Continuous Delivery Service to model, visualize, and automate the release steps&lt;/li&gt;
  &lt;li&gt;XRay - To debug, trace and troubleshoot performance bottlenecks, etc.&lt;/li&gt;
  &lt;li&gt;Cloud9 - in-browser IDE, mostly used to code lambda functions in-line&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;management-tools&quot;&gt;Management Tools&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Cloudwatch - Monitoring (and alerting) Service&lt;/li&gt;
  &lt;li&gt;CloudFormation - IaaC, Infrastructure as Code. The artifacts are called Templates.&lt;/li&gt;
  &lt;li&gt;CloudTrail - Audit logging changes to AWS Environment, by default only stores API calls for a week&lt;/li&gt;
  &lt;li&gt;Config - Monitors the configuration and gives a visual representation of the changes, and can go back in time. Like Time-machine for your AWS.&lt;/li&gt;
  &lt;li&gt;OpsWorks - Managed Chef and Puppet Service (Configuration Management)&lt;/li&gt;
  &lt;li&gt;Service Catalog - Manage a catalog of approved services for the AWS account. Used by enterprises&lt;/li&gt;
  &lt;li&gt;Systems Manager - Interface for managing AWS resources like patch management for EC2s, categorize AWS resources&lt;/li&gt;
  &lt;li&gt;Trusted Advisor - Advice around security, and saving $$$&lt;/li&gt;
  &lt;li&gt;Managed Services&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;media-services&quot;&gt;Media Services&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Elastic Transcoder - Think of it as Managed ffmpeg&lt;/li&gt;
  &lt;li&gt;MediaConvert - File based media converter, used for VODs&lt;/li&gt;
  &lt;li&gt;MediaLive - Broadcast live video streams&lt;/li&gt;
  &lt;li&gt;MediaPackage - Prepares and protects video&lt;/li&gt;
  &lt;li&gt;MediaStore - Storage Service optimized for VOD and Live Video&lt;/li&gt;
  &lt;li&gt;MediaTailor - Targeted advertising into video streams&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;machine-learning&quot;&gt;Machine Learning&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;SageMaker - Deep learning algorithms&lt;/li&gt;
  &lt;li&gt;Comprehend - Sentiment Analysis of data&lt;/li&gt;
  &lt;li&gt;DeepLens - A camera that runs deep learning algorithms on the device&lt;/li&gt;
  &lt;li&gt;Lex - AI based interaction service&lt;/li&gt;
  &lt;li&gt;Machine Learning - Intelligence out of data, recommendation systems&lt;/li&gt;
  &lt;li&gt;Polly - Text to Speech, highly customizable&lt;/li&gt;
  &lt;li&gt;Rekognition - Analyze video and/or images&lt;/li&gt;
  &lt;li&gt;Translate - Translate languages from one to another&lt;/li&gt;
  &lt;li&gt;Transcribe - Subtitles from video, speech to text (Opposite of Polly)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;analytics&quot;&gt;Analytics&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Athena - Run SQL on S3 bucket data like CSV or spreadsheets, serverless&lt;/li&gt;
  &lt;li&gt;EMR (Elastic Map Reduce) - Big data service&lt;/li&gt;
  &lt;li&gt;CloudSearch&lt;/li&gt;
  &lt;li&gt;ElasticSearch - Managed ElasticSearch Cluster&lt;/li&gt;
  &lt;li&gt;Kinesis - To ingest and process streaming data&lt;/li&gt;
  &lt;li&gt;Kinesis Video Streams - To ingest and process streaming video for analytics&lt;/li&gt;
  &lt;li&gt;QuickSight - BI Tool to analyze and visualize data&lt;/li&gt;
  &lt;li&gt;Data Pipeline - Move data between different AWS services&lt;/li&gt;
  &lt;li&gt;Glue - ETL&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;security-identity-and-compliance&quot;&gt;Security, Identity and Compliance&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;IAM (Identity and Access Management)&lt;/li&gt;
  &lt;li&gt;Cognito - Managed Authentication Service, also supports federated logins, gives temporary access to AWS&lt;/li&gt;
  &lt;li&gt;GuardDuty - Monitors for malicious activity in the AWS account&lt;/li&gt;
  &lt;li&gt;Inspector - An agent installed on the EC2s and generates a vulnerability report&lt;/li&gt;
  &lt;li&gt;Macie - Scans S3 buckets for PII and secrets&lt;/li&gt;
  &lt;li&gt;Certificate Manager - Manage SSL certificates&lt;/li&gt;
  &lt;li&gt;CloudHSM - Hardware Security Module as a Service, $1.20 an hour&lt;/li&gt;
  &lt;li&gt;Directory Service - Integrate Microsoft ActiveDirectory with AWS&lt;/li&gt;
  &lt;li&gt;WAF - Layer 7 (Application Layer) firewall&lt;/li&gt;
  &lt;li&gt;Shield - DDoS mitigation, free for CloudFront, ALBs, R53. Advanced Shield gives you a dedicated team (3K a month) 24x7 to help out.&lt;/li&gt;
  &lt;li&gt;Artifact - Audit and Compliance, allows to download security and compliance reports from AWS&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mobile-services&quot;&gt;Mobile Services&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Mobile Hub - Management Console for Mobile Apps to manage the AWS services that are a backend for the mobile app&lt;/li&gt;
  &lt;li&gt;Pinpoint - Targeted push notifications to drive mobile engagement, like FourSquare&lt;/li&gt;
  &lt;li&gt;AppSync - Automatically update data in the mobile apps including offline updates&lt;/li&gt;
  &lt;li&gt;Device Farm - A test farm to test the app on live devices running in AWS&lt;/li&gt;
  &lt;li&gt;Mobile Analytics - Analytics Service for Mobile&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;arvr&quot;&gt;AR/VR&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/sumerian/&quot;&gt;Details&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Sumerian for Augmented Reality/Virtual Reality, is in preview&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;application-integration&quot;&gt;Application Integration&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Step Functions - to manage lambda workflows&lt;/li&gt;
  &lt;li&gt;Amazon MQ - Managed ActiveMQ service&lt;/li&gt;
  &lt;li&gt;SQS (Simple Queue Service) - Pull, used to build decoupled architectures&lt;/li&gt;
  &lt;li&gt;SNS (Simple Notification Service) - Push notifications&lt;/li&gt;
  &lt;li&gt;SWF (Simple Workflow Service) something Amazon uses on their website to manage workflows needed to ship orders&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;customer-engagement&quot;&gt;Customer Engagement&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Connect - Call Center in the Cloud&lt;/li&gt;
  &lt;li&gt;SES (Simple Email Service) - Highly Scalable Email Service&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;business-productivity&quot;&gt;Business Productivity&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Alexa for Business - Helpdesk type of service&lt;/li&gt;
  &lt;li&gt;Chime - Video Conferencing&lt;/li&gt;
  &lt;li&gt;WorkDocs - Dropbox for AWS&lt;/li&gt;
  &lt;li&gt;WorkMail - Outlook for AWS&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;desktop-and-app-streaming&quot;&gt;Desktop and App Streaming&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Workspaces - VDI in the cloud, Desktop as a Service&lt;/li&gt;
  &lt;li&gt;AppStream 2.0 - Stream the application that is running in the cloud (compared to desktop or VDI)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;internet-of-things&quot;&gt;Internet of Things&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/iot/&quot;&gt;Details&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;iOT - Scalable service to handle IoT device data coming in from sensors etc.&lt;/li&gt;
  &lt;li&gt;iOT Device Management - Manage connected devices at scale&lt;/li&gt;
  &lt;li&gt;FreeRTOS - Operating System for Microcontrollers&lt;/li&gt;
  &lt;li&gt;GreenGrass - Allows running compute, caching and messaging locally on the connected device in a secure manner (in an offline mode)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;game-development&quot;&gt;Game Development&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;GameLift - A service to develop games in AWS&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;support&quot;&gt;Support&lt;/h2&gt;
&lt;p&gt;4 Plans - Basic (free, included by default), Developer ($29/month), Business ($100/month, 10% of the bill) and Enterprise ($15k/month)&lt;/p&gt;

&lt;h1 id=&quot;iam---identity-and-access-management&quot;&gt;IAM - Identity and Access Management&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Centralized control of AWS account&lt;/li&gt;
  &lt;li&gt;Users - end users who need access, either to the console via a password, or programmatic access to AWS resources via access keys, or both&lt;/li&gt;
  &lt;li&gt;Groups - collection of users who share permissions&lt;/li&gt;
  &lt;li&gt;Role - permissions assigned to AWS resources like EC2, ECS, Lambdas etc. Roles are a secure way to grant permissions to entities that you trust. Roles are preferred over credentials (access key and secret key). A change in the role’s policy takes effect immediately. The roles can be attached to or detached from a running EC2 instance.&lt;/li&gt;
  &lt;li&gt;Policies - permissions defined in a policy document in JSON&lt;/li&gt;
  &lt;li&gt;A policy document contains a statement, which has a collection of &lt;code class=&quot;highlighter-rouge&quot;&gt;Effect&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Action&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Resource&lt;/code&gt; attributes. The &lt;code class=&quot;highlighter-rouge&quot;&gt;Action&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Resource&lt;/code&gt; can themselves be collections. These can be associated with users, groups and roles.
    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2012-10-17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Statement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s3:*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cloudwatch:*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ec2:*&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;IAM is global, not tied to a region&lt;/li&gt;
  &lt;li&gt;We can create alias for the account, which shows up in the default signin link (https://account_number.signin.aws.amazon.com/console) to (https://somealias.signin.aws.amazon.com/console)&lt;/li&gt;
  &lt;li&gt;Always activate MFA on the root account&lt;/li&gt;
  &lt;li&gt;A root account is the email that is used to setup the account, and it has complete admin access by default&lt;/li&gt;
  &lt;li&gt;Create users in the account and assign them permissions instead of sharing root user credentials. New users have no permissions when created.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PowerUserAccess&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;AdministratorAccess - IAM&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Create groups to hold permissions and put users in those groups instead of attaching permissions to users individually&lt;/li&gt;
  &lt;li&gt;For programatic access (via CLI, SDK and APIs), users get an access key ID and secret access key. For logging into the console, users get a userId and a password&lt;/li&gt;
  &lt;li&gt;A user can belong to multiple groups&lt;/li&gt;
  &lt;li&gt;Permissions (IAM Policies) can also be attached to the users, roles and groups directly&lt;/li&gt;
  &lt;li&gt;There can be a maximum of two pairs of key/secret active at any given time, this is to facilitate access key rotation&lt;/li&gt;
  &lt;li&gt;Password policies can be set in IAM like rotation, complexity, expiration, etc.&lt;/li&gt;
  &lt;li&gt;Roles can be assigned to cross-account IAM users, code running on AWS in an EC2, ECS, Lambda, etc., AWS Service, or Federated Identity Users&lt;/li&gt;
  &lt;li&gt;Web Identify Federation allows users access to AWS resources after they have authenticated with a web based identity provider like Facebook or Google. The auth code received after this authentication is used to exchange temp AWS credentials.&lt;/li&gt;
  &lt;li&gt;Amazon Cognito acts as an identity broker between the web identity providers and the application.&lt;/li&gt;
  &lt;li&gt;Cognito User Pools are directories used to manage signup and signin for mobile and web applications.&lt;/li&gt;
  &lt;li&gt;Successful authentication with a User Pool generates a number of JWTs&lt;/li&gt;
  &lt;li&gt;Cognito Identity Pools allow creation of unique identities for the users and authenticate them with identity providers. These identities are used to obtain short lived limited privilege credentials to access other AWS services.&lt;/li&gt;
  &lt;li&gt;User signs into a User Pool using Google credentials. This results in a JWTs. The Identity Pool exchanges the JWTs for AWS Credentials, and these credentials are used by the user to access AWS resources.&lt;/li&gt;
  &lt;li&gt;3 kinds of IAM policies
    &lt;ul&gt;
      &lt;li&gt;Managed Policies are created and administered by AWS, like S3FullAccess, AmazonDynamoDBFullAccess. They cannot be modified.&lt;/li&gt;
      &lt;li&gt;Customer Managed Policies are created and managed by the customers within their account.&lt;/li&gt;
      &lt;li&gt;Inline Policies are policies that can be embedded in the user, role or group directly. They cannot be shared between entities. They are deleted if the user, role, or group they’re embedded in is deleted.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The AWS sign-in endpoint for SAML is https://signin.aws.amazon.com/saml.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;s3---simple-storage-service&quot;&gt;S3 - Simple Storage Service&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Object based storage (vs. block based like EBS) which is highly available and durable.&lt;/li&gt;
  &lt;li&gt;Data is stored across multiple facilities and devices.&lt;/li&gt;
  &lt;li&gt;100 buckets per account&lt;/li&gt;
  &lt;li&gt;Can store files, but cannot run a database or operating system off of it&lt;/li&gt;
  &lt;li&gt;Objects can be 0 bytes to 5TB in size&lt;/li&gt;
  &lt;li&gt;We can upload up to 5GB in single operation, for larger objects, use multipart upload API&lt;/li&gt;
  &lt;li&gt;Unlimited Storage&lt;/li&gt;
  &lt;li&gt;Successful uploads return a HTTP 200 response code via API or CLI&lt;/li&gt;
  &lt;li&gt;Files are stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;buckets&lt;/code&gt; whose names are globally unique (they have a DNS tied to them). Buckets can have folders in them. These folders do not need to be unique names except within the bucket.&lt;/li&gt;
  &lt;li&gt;By default all buckets are private.&lt;/li&gt;
  &lt;li&gt;The URL looks like https://s3.{region}.amazonaws.com/{bucketname} OR https://s3-{region}.amazonaws.com. For example, https://s3.us-east-1.amazonaws.com/lobster1234-94568&lt;/li&gt;
  &lt;li&gt;Read after Write consistency for &lt;strong&gt;new&lt;/strong&gt; Object PUTs. You can write and immediately read the content.&lt;/li&gt;
  &lt;li&gt;Eventual Consistency for &lt;strong&gt;overwrite&lt;/strong&gt; PUTs and DELETEs. You can overwrite or delete, but if you read immediately, you may not get the current state. This can take minutes to hours.&lt;/li&gt;
  &lt;li&gt;S3 Object consists of a &lt;code class=&quot;highlighter-rouge&quot;&gt;Key&lt;/code&gt; which is the name of the object (file name like foo.txt), value which is the data (byte[]), Version ID, metadata (tags), Sub-resources like ACL, Torrents&lt;/li&gt;
  &lt;li&gt;S3 has &lt;code class=&quot;highlighter-rouge&quot;&gt;99.99%&lt;/code&gt; Availability, and &lt;code class=&quot;highlighter-rouge&quot;&gt;99.999999999%&lt;/code&gt; (11 9s) durability.&lt;/li&gt;
  &lt;li&gt;There are different storage classes or tiers -
    &lt;ul&gt;
      &lt;li&gt;STANDARD - 99.99% availability, 11 9s durability, designed to sustain the loss of 2 facilities (AZs) concurrently. Stored in &amp;gt;= 3 AZs. No retrieval fee.&lt;/li&gt;
      &lt;li&gt;STANDARD_IA or S3_IA - Infrequent Access, lower cost than S3 Standard, but charged a retrieval fee. Stored in &amp;gt;= 3 AZs. 99%.9 Availability.&lt;/li&gt;
      &lt;li&gt;ONEZONE_IA - Infrequently Accessed but stored in only 1 AZ, lower cost than S3 IA. 99.5% Availability SLA. No resilience of data as it is stored in only one AZ. 99.5%&lt;/li&gt;
      &lt;li&gt;GLACIER - Very cheap but only for archival. 3 retrieval modes - Expedited (1-5 mins, 0.03/GB), Standard (3-5 hours, 0.01/GB), or Bulk (5-12 hours,.0025/GB). No availability SLA.&lt;/li&gt;
      &lt;li&gt;RRS - Reduced Redundancy Storage, 99.99% durability, not offered as an option anymore.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Availability is 99.99% for Standard, and 99.9% for S3 IA and 99.5 for ONEZONE_IA.&lt;/li&gt;
  &lt;li&gt;You pay for storage, number of requests, tags, data xfer (including cross region replication), transfer acceleration (optional), storage management (inventory, tags), data xfer out, transfer acceleration.&lt;/li&gt;
  &lt;li&gt;S3 Transfer Acceleration utilizes an edge location so users can perform faster uploads. The users can upload to an edge location, and from there on the data is uploaded to S3 using AWS backbone.&lt;/li&gt;
  &lt;li&gt;S3 objects can have lifecycles&lt;/li&gt;
  &lt;li&gt;S3 objects can be versioned, encrypted (SSE), locked down via ACLs and Bucket Policies&lt;/li&gt;
  &lt;li&gt;By default, all buckets are private&lt;/li&gt;
  &lt;li&gt;S3 is a global service in the AWS Console, just like IAM. However, the bucket URL does have the region name in it, and a bucket is tied to a region.&lt;/li&gt;
  &lt;li&gt;Bucket policies are applied at the bucket level, ACLs are applied at the object level. They’re JSONs.&lt;/li&gt;
  &lt;li&gt;S3 buckets can have access logs, which can be stored in a different bucket, and can also be in a different AWS account.&lt;/li&gt;
  &lt;li&gt;Storage classes can be picked at the object level.&lt;/li&gt;
  &lt;li&gt;Bucket policies apply at the bucket level, while ACLs apply at the individual object level.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;s3-encryption&quot;&gt;S3 Encryption&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;S3 buckets can be encrypted Server Side via AES-256 (SSE-S3 using S3 Managed Keys) or AWS-KMS (SSE-KMS with KMS managed keys) or SSE-C with customer provided keys. This can be set at bucket, folder, and object level.&lt;/li&gt;
  &lt;li&gt;Encryption at transit uses SSL/TLS&lt;/li&gt;
  &lt;li&gt;Encryption at rest can be server side - S3 Managed (SSE-S3), SSE-KMS, or SSE-C, or client side&lt;/li&gt;
  &lt;li&gt;The header to specify encryption during PUT is &lt;code class=&quot;highlighter-rouge&quot;&gt;x-amz-server-side-encryption&lt;/code&gt; with possible values as &lt;code class=&quot;highlighter-rouge&quot;&gt;AES256&lt;/code&gt; for SSE-S3 or &lt;code class=&quot;highlighter-rouge&quot;&gt;aws:kms&lt;/code&gt; for SSE-KMS.&lt;/li&gt;
  &lt;li&gt;A bucket policy can be created to reject any request that does not have the &lt;code class=&quot;highlighter-rouge&quot;&gt;x-amz-server-side-encryption&lt;/code&gt; thereby enforcing encryption always. This is done by adding a &lt;code class=&quot;highlighter-rouge&quot;&gt;Condition&lt;/code&gt; in the bucket policy with &lt;code class=&quot;highlighter-rouge&quot;&gt;StringNotEquals&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;Key&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;x-amz-server-side-encryption&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Value&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;aws:kms&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;AES256&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;Action&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;s3:PutObject&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Each object gets a link which looks like this &lt;code class=&quot;highlighter-rouge&quot;&gt;https://s3.amazonaws.com/mpandit-452001/IMG_1070.png&lt;/code&gt;. Note that there is no region in there.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;s3-versioning&quot;&gt;S3 Versioning&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Once enabled, versioning cannot be disabled and only be suspended.&lt;/li&gt;
  &lt;li&gt;Buckets can be versioned, however, each version is stored a 100% (no incremental or deltas). Hence, each version of the object adds to the storage cost.&lt;/li&gt;
  &lt;li&gt;Deleted objects are also stored as versions.&lt;/li&gt;
  &lt;li&gt;Delete Markers - A deleted object has an associated &lt;code class=&quot;highlighter-rouge&quot;&gt;delete marker&lt;/code&gt;. If the delete marker is deleted, the deleted version is restored.&lt;/li&gt;
  &lt;li&gt;Read more &lt;a href=&quot;https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;MFA Delete is an added layer of security in S3 buckets, where a second factor auth is required to delete an object version, or to change versioning state.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cross-region-replication&quot;&gt;Cross Region Replication&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Versioning needs to be turned on for both buckets (in either region)&lt;/li&gt;
  &lt;li&gt;Destination bucket can be in the current account, or in a different account&lt;/li&gt;
  &lt;li&gt;Storage class of the destination bucket can be changed (to be different than that of the source bucket)&lt;/li&gt;
  &lt;li&gt;A cross region replication role gets created when configuring replication from the console.&lt;/li&gt;
  &lt;li&gt;Only new objects will be replicated, not the existing ones. Use CLI or manual steps to copy the existing objects over.&lt;/li&gt;
  &lt;li&gt;If the delete marker is deleted, the deletion of the delete marker is not replicated &lt;strong&gt;important&lt;/strong&gt;. This is for security, to prevent someone from deleting stuff in the primary bucket and having it reflect in the replicated bucket.&lt;/li&gt;
  &lt;li&gt;The permissions are also replicated from source to destination bucket&lt;/li&gt;
  &lt;li&gt;If the versions are reverted in the source bucket, they do not replicate to the destination bucket&lt;/li&gt;
  &lt;li&gt;No daisy chaining of replication buckets&lt;/li&gt;
  &lt;li&gt;1 bucket can be replicated to only 1 other bucket (no 1 to many replication)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lifecycle-management&quot;&gt;Lifecycle Management&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;This is how S3 manages objects (mostly moving objects between various storage classes or expiring them based on time)&lt;/li&gt;
  &lt;li&gt;Can be configured on previous versions or current version&lt;/li&gt;
  &lt;li&gt;Can be used without versioning&lt;/li&gt;
  &lt;li&gt;Transition to IA after 30 days of creation, transition to Glacier 30 days after IA, can be expired and permanently deleted as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;static-website-hosting&quot;&gt;Static Website Hosting&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Serverless! But is is 100% static (like a blog).&lt;/li&gt;
  &lt;li&gt;Use a bucket policy to make the entire bucket public-read.&lt;/li&gt;
  &lt;li&gt;When selecting to host a website, it’d ask for an index page, and an error page.&lt;/li&gt;
  &lt;li&gt;The URL is different than the S3 bucket URL - it looks like http://lobster1234-94568.s3-website.{region}.amazonaws.com&lt;/li&gt;
  &lt;li&gt;The bucket name comes first, while in the S3 URL, the bucket name is the path.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Pre-signed URLs can be inserted in a page to share private content/user specific content.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Read &lt;a href=&quot;https://aws.amazon.com/s3/faqs/&quot;&gt;S3 FAQs&lt;/a&gt; before the exam&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cors&quot;&gt;CORS&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Cross Origin Resource Sharing&lt;/li&gt;
  &lt;li&gt;CORS is a way for pages from one S3 bucket to access contents from another S3 bucket.&lt;/li&gt;
  &lt;li&gt;CORS needs to be enabled from the bucket that is being accessed, to allow the URL of the bucket that is accessing it.&lt;/li&gt;
  &lt;li&gt;To do so, click on CORS tab in the bucket being accessed, enter the HTTPS URL of the bucket that is trying to access under &lt;code class=&quot;highlighter-rouge&quot;&gt;Access-Control-Allow-Origin&lt;/code&gt; which will say &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; in the template.&lt;/li&gt;
  &lt;li&gt;Use the published URL of the bucket as origin, not the S3 URL (use the one with &lt;code class=&quot;highlighter-rouge&quot;&gt;website&lt;/code&gt; in the name).&lt;/li&gt;
  &lt;li&gt;Example CORS configuration would look like this, where &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;originbucketname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; is trying to access contents of this bucket.
    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;CORSConfiguration&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;CORSRule&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedOrigin&amp;gt;&lt;/span&gt;http://{originbucketname}.s3-website.us-east-1.amazonaws.com&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedOrigin&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedMethod&amp;gt;&lt;/span&gt;GET&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedMethod&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedMethod&amp;gt;&lt;/span&gt;POST&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedMethod&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedHeader&amp;gt;&lt;/span&gt;*&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedHeader&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/CORSRule&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/CORSConfiguration&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;storage-gateway&quot;&gt;Storage Gateway&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;It is a service that allows an on-prem VM to S3 to migrate/replicate data&lt;/li&gt;
  &lt;li&gt;This VM can run with VMWare EXSi or Microsoft HyperV&lt;/li&gt;
  &lt;li&gt;4 Types
    &lt;ul&gt;
      &lt;li&gt;They can all use DX or S2S VPN or Internet&lt;/li&gt;
      &lt;li&gt;File Gateway (uses NFS, only for file based) &lt;strong&gt;New&lt;/strong&gt; Files are stored in S3 as objects. Think of this as an NFS interface to S3. Nothing is stored on-prem.&lt;/li&gt;
      &lt;li&gt;Volume Gateway (block based, iSCSI, virtual hard disks where the AWS side is EBS)
        &lt;ul&gt;
          &lt;li&gt;Stored Volume - Entire copy is stored on-prem with async backups (incremental) to EBS as EBS snapshots. 1GB to 16TB storage limits.&lt;/li&gt;
          &lt;li&gt;Cached Volume - Only the most recently read data is kept on prem (vs. everything like Stored Volume Gateway). All the data is replicated on EBS. 1GB to 32TB storage limits.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;VTL (Virtual Tape Library) or a Tape Gateway. Works with popular tape backup software to act as virtual tapes.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;snowball&quot;&gt;Snowball&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Import-Export Disk’s successor&lt;/li&gt;
  &lt;li&gt;Puts data in S3 (and pulls from it if we want data exported out of AWS)&lt;/li&gt;
  &lt;li&gt;Called a suitcase at Marqeta :)&lt;/li&gt;
  &lt;li&gt;Petabyte Scale import/export appliance, up to 80TB.&lt;/li&gt;
  &lt;li&gt;Secure physically + encrypted (AES 256). Once the data is xfered, it goes through a complete wipe.&lt;/li&gt;
  &lt;li&gt;Snowball Edge is up to 100 TB and also has on-device compute capability. For example, the suitcase can run code to pull data in and store it.&lt;/li&gt;
  &lt;li&gt;Snowmobile is a truck, Exabyte scale data transfer. 100 PB storage limit.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;s3-urls&quot;&gt;S3 URLs&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;This is confusing as hell, so there you go :
    &lt;ul&gt;
      &lt;li&gt;S3 Bucket Acceleration URL - {bucketname}.s3-accelerate.amazonaws.com &lt;strong&gt;no region&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;S3 Object URL - https://s3.amazonaws.com/{bucketname}/{key} &lt;strong&gt;no region&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;S3 Bucket URL - https://s3-{region}.amazonaws.com/{bucketname}&lt;/li&gt;
      &lt;li&gt;S3 Cloudfront Origin URL - bucketname.s3.amazonaws.com &lt;strong&gt;no region, no protocol&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;S3 Static Website URL (note it is &lt;strong&gt;NOT&lt;/strong&gt; https)-  http://{bucketname}.s3-website.{region}.amazonaws.com for the rest.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;s3-pricing&quot;&gt;S3 Pricing&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;S3 Standard is 0.023 per GB&lt;/li&gt;
  &lt;li&gt;S3 IA is 0.0124 per GB&lt;/li&gt;
  &lt;li&gt;S3 OneZone-IA is 0.01 per GB&lt;/li&gt;
  &lt;li&gt;S3 RRS is 0.024 per GB (almost same as S3 Standard)&lt;/li&gt;
  &lt;li&gt;Glacier is 0.004 per GB&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;cloudfront&quot;&gt;Cloudfront&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Amazon’s CDN (Content Delivery Network)&lt;/li&gt;
  &lt;li&gt;Edge locations are the ones where content is cached, which is not same as AZ or region.&lt;/li&gt;
  &lt;li&gt;The origin can be S3 bucket, EC2 instance, ELB, or Route53 address. It can also be a non-AWS origin (like a server in a data center).&lt;/li&gt;
  &lt;li&gt;Distributions
    &lt;ul&gt;
      &lt;li&gt;Web Distribution is for websites&lt;/li&gt;
      &lt;li&gt;RTMP (Real Time Messaging Protocol) is used for Media Streaming&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;A distribution is identified by a domain&lt;/li&gt;
  &lt;li&gt;Edge Locations can be written to (&lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt;), this is used in S3 accelerated transfers.&lt;/li&gt;
  &lt;li&gt;Objects are cached at the edge location for a TTL (Max: 365 days, Default: 24 hours)&lt;/li&gt;
  &lt;li&gt;It costs to invalidate the cache on an object basis (if we want to do it before the TTL expires)&lt;/li&gt;
  &lt;li&gt;For performance of GET intensive workloads, use cloudfront&lt;/li&gt;
  &lt;li&gt;For performance of mixed workloads, hash the S3 key by adding a random prefix to the key name. By doing so, there is no IO Contention on the same partition.&lt;/li&gt;
  &lt;li&gt;S3 origins look like &lt;code class=&quot;highlighter-rouge&quot;&gt;bucketname.s3.amazonaws.com&lt;/code&gt;. (notice no region in the URL).&lt;/li&gt;
  &lt;li&gt;An Origin Access Identity is set up in the distribution which gives access to Cloudfront to read from the origin S3 bucket. The bucket policy is updated on the origin bucket to allow access to this identity.&lt;/li&gt;
  &lt;li&gt;Cloudfront uses pre-signed URLs and signed cookies to restrict access of content (just like S3)&lt;/li&gt;
  &lt;li&gt;The clouddront distribution URL gets a domain name &lt;code class=&quot;highlighter-rouge&quot;&gt;foobar.cloudfront.net&lt;/code&gt;. Please note that &lt;code class=&quot;highlighter-rouge&quot;&gt;foobar&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; the distribution ID.&lt;/li&gt;
  &lt;li&gt;Cloudfront allows geo whitelisting OR blacklisting of countries. Cannot do both, has to be either.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;ec2---elastic-compute-cloud&quot;&gt;EC2 - Elastic Compute Cloud&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Elastic Compute Capacity in the cloud, pay for the capacity that you use.&lt;/li&gt;
  &lt;li&gt;Instance Allocation
    &lt;ul&gt;
      &lt;li&gt;On Demand : Pay by hour for windows, by second for linux. No commitment. Great for unpredictable workloads which cannot be interrupted.&lt;/li&gt;
      &lt;li&gt;Reserved : Like a contract, 1 or 3 years, pay no, partial, or full upfront. Up to 75% off on-demand.  Great for predictable, sustained workloads. (Standard, Convertible, Scheduled). Think of it as a phone contract. Great for predictable, steady state usage. 3 years all upfront gets most savings obviously (75% off). They’re tied to a region.&lt;/li&gt;
      &lt;li&gt;Spot : Allows for the cheapest option, bid for the price you want but only if the process can be interrupted. AWS will terminate the instance if the bid price goes higher. You will not be charged for the hour in which AWS terminates the instance. If you terminate the instance, you pay for the full hour. Used when you have flexible start/end times.&lt;/li&gt;
      &lt;li&gt;Dedicated : Non multi-tenant, Bare Metal, used for Regulatory Requirements like Healthcare. Also when software licenses are tied to a host.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Instance Types
    &lt;ul&gt;
      &lt;li&gt;F1 : Genomic research, financial analysis, video processing&lt;/li&gt;
      &lt;li&gt;I3 : Storage Optimized, DBs, DW&lt;/li&gt;
      &lt;li&gt;G3 : Graphics, video encoding&lt;/li&gt;
      &lt;li&gt;H1 : High Disk Throughput, Map Reduce, HDFS&lt;/li&gt;
      &lt;li&gt;T2 : Low Cost General Purpose&lt;/li&gt;
      &lt;li&gt;D2 : Dense Storage&lt;/li&gt;
      &lt;li&gt;R4 : Memory Optimized&lt;/li&gt;
      &lt;li&gt;M5 : General Purpose&lt;/li&gt;
      &lt;li&gt;C5 : Compute Optimized&lt;/li&gt;
      &lt;li&gt;P3 : Graphics, GPU&lt;/li&gt;
      &lt;li&gt;X1 : Memory Optimized
To Remember: F (FPGA) I (IOPS) G (Graphics) H (High Disk Throughput) T (cheap GP) D (Density) R (RAM Memory) M (GP) C (Compute) P (Graphics) X (Extreme Memory) = &lt;strong&gt;FIGHTDRMCPX&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;EC2 User Data is used to add bootstrap scripts to the instance. It always starts with shbang (&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;To log in to the instance, use &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh -i &amp;lt;path_to_pem&amp;gt; ec2-user@&amp;lt;IP address&amp;gt;&lt;/code&gt;. The PEM has &lt;code class=&quot;highlighter-rouge&quot;&gt;400&lt;/code&gt; permissions to ensure it is hidden from everyone except the owner.&lt;/li&gt;
  &lt;li&gt;We can encrypt the root volume (where the OS is installed) using OS level encryption like Windows BitLocker.&lt;/li&gt;
  &lt;li&gt;Another way to encrypt the root volume is to snap it, encrypt the snap, create an AMI from this snap and use this to launch the EC2.&lt;/li&gt;
  &lt;li&gt;To retrieve instance metadata or userdata, the endpoint used is http://169.254.169.254/latest/user-data&lt;/li&gt;
  &lt;li&gt;Instance User-Data :
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@ip-172-31-56-227 log]# curl http://169.254.169.254/latest/user-data
#!/bin/bash
sudo yum update -y
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Instance Meta-Data :
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[ec2-user@ip-172-31-51-163 ~]$ curl http://169.254.169.254/latest/meta-data/
ami-id
ami-launch-index
ami-manifest-path
block-device-mapping/
events/
hostname
instance-action
instance-id
instance-type
local-hostname
local-ipv4
mac
metrics/
network/
placement/
profile
public-hostname
public-ipv4
public-keys/
reservation-id
security-groups
services/

[ec2-user@ip-172-31-51-163 ~]$ curl http://169.254.169.254/latest/meta-data/instance-id
i-00dfc2841e9b83d1e
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;EC2 instance roles are created in IAM which eliminate the need for using security credentials (aws access key and secret) to access AWS services.&lt;/li&gt;
  &lt;li&gt;The roles can be changed on a running instance, and is effective immediately. (just like security groups)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Xen and Nitro are the underlying hypervisors for EC2&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Real world - Make sure to click on “i” on &lt;em&gt;each option&lt;/em&gt; of the Launch Instance Wizard steps. Lots of nuggets and gotchas there.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;security-groups&quot;&gt;Security Groups&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;A &lt;strong&gt;Security Group&lt;/strong&gt; is a virtual firewall for the EC2 instance, to control traffic to and from the instance. One EC2 can have many security groups associated with it.&lt;/li&gt;
  &lt;li&gt;By default, a security group would allow all outbound traffic to any destination, any protocol.&lt;/li&gt;
  &lt;li&gt;Any change made to a security group is applied immediately (like adding/removing ports, etc.)&lt;/li&gt;
  &lt;li&gt;Security Groups are &lt;strong&gt;stateful&lt;/strong&gt;. When an inbound rule is added, outbound traffic is automatically allowed.&lt;/li&gt;
  &lt;li&gt;Security Group rules are only to allow traffic, not to deny. By default all inbound traffic is &lt;strong&gt;denied&lt;/strong&gt;, all outbound traffic is &lt;strong&gt;allowed&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;All VPCs get a default security group. This SG has only 1 rule, where all the instances associated with that SG can talk to each other (source is itself)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ebs&quot;&gt;EBS&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;EBS is a virtual disk. EBS Volumes can be &lt;em&gt;mounted&lt;/em&gt; to an EC2 instance. They belong to 1 availability zone and are replicated across multiple physical disks.
    &lt;ul&gt;
      &lt;li&gt;GP2 : General Purpose SSD, 3 IOPS per GB, bursts up to 10K IOPS, bursts up to 3000 IOPS for extended periods of time for volumes 3334 GB and above.&lt;/li&gt;
      &lt;li&gt;Provisioned IOPS : More than 10K IOPS, can provision up to 20K IOPS per volume&lt;/li&gt;
      &lt;li&gt;ST1 Throughput Optimized HDD : Cannot be boot volumes.  DW, Logs are good use cases.&lt;/li&gt;
      &lt;li&gt;SC1 Cold HDD : Cannot be boot volumes. Good for cold storage. Lowest cost.&lt;/li&gt;
      &lt;li&gt;Standard Magnetic : Legacy, can be bootable. &lt;strong&gt;cheapest bootable&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The mim volume size for HDD is 500GB&lt;/li&gt;
  &lt;li&gt;EBS volumes for an instance are in the same AZ. You can only mount the EBS volumes in the same AZ as the EC2 instance.&lt;/li&gt;
  &lt;li&gt;EBS volume types and sizes can be changed on the fly, without any downtime. There is a performance hit for a bit.&lt;/li&gt;
  &lt;li&gt;To move EBS volumes across AZs or Regions, use EBS snapshots.&lt;/li&gt;
  &lt;li&gt;Use Snapshot Copy to create a copy in a different region. Use Create Volume to create a new volume in a different AZ.&lt;/li&gt;
  &lt;li&gt;To encrypt an unencrypted EBS volume:
    &lt;ul&gt;
      &lt;li&gt;Create a snapshot&lt;/li&gt;
      &lt;li&gt;Copy the snapshot and select encryption&lt;/li&gt;
      &lt;li&gt;Create a volume from this encrypted snapshot&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The only time an EBS volume can be create as an encrypted volume is during the creation.&lt;/li&gt;
  &lt;li&gt;EBS snapshots sit on S3, and are incremental&lt;/li&gt;
  &lt;li&gt;Snapshots of an encrypted EBS volume will always be encrypted.&lt;/li&gt;
  &lt;li&gt;Snapshots can be shared with other accounts and can be made public. Encrypted snapshots cannot be shared.&lt;/li&gt;
  &lt;li&gt;Root device types can be EBS backed or instance backed.&lt;/li&gt;
  &lt;li&gt;Instance Store backed instances cannot be stopped and started, can only be rebooted.&lt;/li&gt;
  &lt;li&gt;Instance stores are ephemeral.&lt;/li&gt;
  &lt;li&gt;An instance can have many EBS volumes attached, but an EBS volume can be attached to only 1 instance at any time. There is no such thing as shared EBS, for that requirement, consider EFS.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;load-balancers&quot;&gt;Load Balancers&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Elastic Load Balancers - allows us to balance the load between different servers.
    &lt;ul&gt;
      &lt;li&gt;Application Load Balancer : Layer 7. They support advanced request routing based on HTTP request characteristics like path, headers, etc.&lt;/li&gt;
      &lt;li&gt;Network Load Balancer : Very High Performance, Layer 4, Most expensive. They support millions of request per second.&lt;/li&gt;
      &lt;li&gt;Classic Load Balancer : Dumber Layer 7, Legacy. Also supports Layer 4. The only thing supported at Layer 7 is X-Forwarded-For and sticky sessions.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ELB responds with HTTP 504 Gateway Timeout when the application does not respond.&lt;/li&gt;
  &lt;li&gt;The DNS names for the load balancers are {LB-name}.{region}-elb.amazonaws.com&lt;/li&gt;
  &lt;li&gt;The healthcheck statuses for instances behind LB can be &lt;code class=&quot;highlighter-rouge&quot;&gt;InService&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;OutOfService&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;When a healtcheck for an instance fails, the load balancer stops sending traffic to that instance.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cloudwatch&quot;&gt;Cloudwatch&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Basic monitoring sends metrics every 5 minutes, detailed monitoring can send every 1 minute but that costs extra.&lt;/li&gt;
  &lt;li&gt;Standard EC2 metrics (by default) are CPU usage, disk IO, network IO, CPU credits, Status checks.&lt;/li&gt;
  &lt;li&gt;Metrics like RAM, Disk utilization, swap usage, etc. would need creation of custom metrics.&lt;/li&gt;
  &lt;li&gt;Cloudwatch Alarms have 3 states - INSUFFICIENT_DATA, OK and ALARM&lt;/li&gt;
  &lt;li&gt;Cloudwatch Events allow to set up rules to trigger actions - like AWS Batch job completion can trigger a lambda.&lt;/li&gt;
  &lt;li&gt;Cloudwatch Logs act as a central location for all logs (like lambda system.out, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;auto-scaling-groups&quot;&gt;Auto Scaling Groups&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;An autoscaling group = &lt;code class=&quot;highlighter-rouge&quot;&gt;Launch Configuration&lt;/code&gt;  + &lt;code class=&quot;highlighter-rouge&quot;&gt;Scaling Policies&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Launch Templates are newly announced, but Launch Configurations have been around the longest&lt;/li&gt;
  &lt;li&gt;A Launch Configuration has the AMI, Instance Type, Instance details like IAM role, user data, IP allocation details, as well as storage and security groups.&lt;/li&gt;
  &lt;li&gt;Once a Launch Configuration is created, you can create an AutoScalingGroup. This is where details like VPC, subnets, number of instances, load balancer are entered.&lt;/li&gt;
  &lt;li&gt;Scaling policies are set up in ASG to tie cloudwatch alarms with autoscaling activities.&lt;/li&gt;
  &lt;li&gt;The EC2s are launched as soon as an ASG is created.&lt;/li&gt;
  &lt;li&gt;A Launch Configuration cannot be modified. However, it can be copied as a new configuration.&lt;/li&gt;
  &lt;li&gt;An ASG can be modified at any time and even the Launch Configuration associated with it can be changed.&lt;/li&gt;
  &lt;li&gt;Deleting an ASG will terminate the EC2 instances but will not delete the launch configuration associated with it.&lt;/li&gt;
  &lt;li&gt;ASG can also be created from an EC2 instance, where all the EC2 instance information is used to create a launch configuration, with these limitations -
    &lt;ul&gt;
      &lt;li&gt;The block device information from the AMI is copied over, but not the devices that were attached after the instance launch.&lt;/li&gt;
      &lt;li&gt;Tags are not copied over to the ASG&lt;/li&gt;
      &lt;li&gt;The load balancer is not copied over (if the instance was behind one) in the ASG.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Scaling options -
    &lt;ul&gt;
      &lt;li&gt;Manual : Update the min, max and desired number of instances manually.&lt;/li&gt;
      &lt;li&gt;Scheduled : Good for predictable scaling needs/traffic patterns. A cron pattern can be specified for a schedule for recurring events.&lt;/li&gt;
      &lt;li&gt;Dynamic : The advanced but most common, based on cloudwatch events.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Multiple scaling policies can be associated with an ASG.&lt;/li&gt;
  &lt;li&gt;Termination Policies - when the ASG decided to terminate an instance for scale down.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/images/termination-policy-default-flowchart-diagram.png&quot;&gt;Default Termination Policy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;efs&quot;&gt;EFS&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Elastic File System, AWS’s NFS (NFSv4)filesystem which is Petabyte scale and scales up on demand.&lt;/li&gt;
  &lt;li&gt;An EFS is provisioned in multiple AZs and gets an (private) IP per AZ. The instances in each AZ mount to that IP address.&lt;/li&gt;
  &lt;li&gt;EFS has much better performance compared to EBS PIOPs&lt;/li&gt;
  &lt;li&gt;Pay for the storage used&lt;/li&gt;
  &lt;li&gt;Read after Write consistency model&lt;/li&gt;
  &lt;li&gt;Data is stored across multiple AZ within the same region.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;placement-groups&quot;&gt;Placement Groups&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Two types - Clustered and Spread&lt;/li&gt;
  &lt;li&gt;Clustered Placement Group has been around for long, where instances share the same AZ. This is for low network latency and/or high network throughput. Only certain instance types (memory optimized, compute optimized, network optimized) can be launched in a clustered placement group.&lt;/li&gt;
  &lt;li&gt;Spread Placement Group ensures the instances are on different underlying hardware, and multiple AZs.&lt;/li&gt;
  &lt;li&gt;AWS recommends having the same instance types in a clustered placement group.&lt;/li&gt;
  &lt;li&gt;You cannot move an existing instance to an existing placement group. You can however launch an AMI from that instance into the placement group.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lambda&quot;&gt;Lambda&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Released in reInvent 2015&lt;/li&gt;
  &lt;li&gt;Amazon’s Event Driven Compute Service where a function is run without the customer needing to provision any servers.&lt;/li&gt;
  &lt;li&gt;Lambda has many event sources -
    &lt;ul&gt;
      &lt;li&gt;Cloudwatch (events, logs, alarms)&lt;/li&gt;
      &lt;li&gt;S3&lt;/li&gt;
      &lt;li&gt;SNS&lt;/li&gt;
      &lt;li&gt;API Gateway via HTTP requests&lt;/li&gt;
      &lt;li&gt;DynamoDB,&lt;/li&gt;
      &lt;li&gt;IoT&lt;/li&gt;
      &lt;li&gt;Alexa Skills&lt;/li&gt;
      &lt;li&gt;Kinesis&lt;/li&gt;
      &lt;li&gt;Cloudfront&lt;/li&gt;
      &lt;li&gt;SQS&lt;/li&gt;
      &lt;li&gt;SES&lt;/li&gt;
      &lt;li&gt;CodeCommit&lt;/li&gt;
      &lt;li&gt;Cognito&lt;/li&gt;
      &lt;li&gt;CloudFormation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Lambda scales out automatically, and runs concurrently (as the events occur), default limit is 1000 concurrent executions.&lt;/li&gt;
  &lt;li&gt;Lambda can be tied to a VPC, security group(s), and IAM role.&lt;/li&gt;
  &lt;li&gt;API Gateway is used to trigger Lambdas as a response to HTTP requests.&lt;/li&gt;
  &lt;li&gt;Each HTTP request translates into one lambda. In other words, 1 lambda function is not shared between multiple requests. This is 100% stateless by design.&lt;/li&gt;
  &lt;li&gt;Lambda supports Node, C#, Java, Python&lt;/li&gt;
  &lt;li&gt;Lambda free tier is 1M requests, and 20c per 1M requests thereafter.&lt;/li&gt;
  &lt;li&gt;For billing, lambda execution time is rounded to 100ms, and memory is rounded to 128MB.&lt;/li&gt;
  &lt;li&gt;Lambda can only run for 5 min max (recently 15 min), and max memory is 3008MB&lt;/li&gt;
  &lt;li&gt;Failure of asynchronous invocation (like SNS) is retried twice with delay in between (so total of 3 attempts), but sync will return 429 error for failure with no automatic retries.&lt;/li&gt;
  &lt;li&gt;Lambda based systems can get pretty complex when it comes to debugging/troubleshooting. Amazon X-Ray helps with that.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;route-53&quot;&gt;Route 53&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Route 53 is Amazon’s DNS Service, allowing domain name mapping to EC2s, Load Balancers and S3 buckets.&lt;/li&gt;
  &lt;li&gt;Route53 is a global service, just like IAM.&lt;/li&gt;
  &lt;li&gt;ipv4 has 32 bit space, ipv6 is 128 bits&lt;/li&gt;
  &lt;li&gt;Last word in any DNS name is the top level domain name (.com, .gov, .in), the one before is second level domain name (.us.gov, .co.in)&lt;/li&gt;
  &lt;li&gt;The domain names are registered via domain name registrars (amazon, godaddy, wix, etc.) with InterNIC which maintains the whois database.&lt;/li&gt;
  &lt;li&gt;SOA record (Start of Authority) has the info for TTL (seconds), zone admin, zone server.&lt;/li&gt;
  &lt;li&gt;NS records are the name server records.&lt;/li&gt;
  &lt;li&gt;The ISP looks up the top level domain to ask for an NS record, which points to a name server, then the ISP will contact the NS server, which points to SOA record, which has an A (Address) record which has the IP address.&lt;/li&gt;
  &lt;li&gt;Cnames are used to convert one domain to another - like aliases.&lt;/li&gt;
  &lt;li&gt;Alias records are unique to Route 53, they’re just like cnames.&lt;/li&gt;
  &lt;li&gt;A cname cannot be used for naked domain names. That’s why AWS came up with alias records for route53.&lt;/li&gt;
  &lt;li&gt;Naked Domain Name == Zone Apex Record, is a domain name without the www&lt;/li&gt;
  &lt;li&gt;Alias Record Set == CNAME record set, which is created for an AWS Resource. It is only supported by A and AAAA (ipv6) DNS record types. Alias target can be ALB, CLB, NLB, Cloudfront Distribution, S3 website.&lt;/li&gt;
  &lt;li&gt;Routing Policies
    &lt;ul&gt;
      &lt;li&gt;Simple : This is the default routing policy. No intelligence, just a simple resolution to a resource like a web server LB.&lt;/li&gt;
      &lt;li&gt;Weighted : Split traffic by assigning weights. Can be used for DR tests, canaries.&lt;/li&gt;
      &lt;li&gt;Latency : Route traffic based on the lowest latency for the end user location. Latency Resource Record sets are needed in route53 for this.&lt;/li&gt;
      &lt;li&gt;Failover : For active/passive (usually DR) setup. This utilizes healthchecks on the primary site.&lt;/li&gt;
      &lt;li&gt;Geolocation : Send traffic to localized servers based on the user’s geo location.&lt;/li&gt;
      &lt;li&gt;Multivalue Answer : Works like a load balancer, where multiple targets are (optionally) health-checked and are returned as multiple IPs randomly.&lt;/li&gt;
      &lt;li&gt;Geoproximity : Send traffic to the nearest resource based on the client’s location. Needs Route53 traffic flow enabled.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;There is a soft limit of 50 domain names.&lt;/li&gt;
  &lt;li&gt;Be sure to &lt;a href=&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html&quot;&gt;read this&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;rds&quot;&gt;RDS&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Relational Database Service for OLTP&lt;/li&gt;
  &lt;li&gt;6 Instance Types - Aurora, MySQL, MariaDB, Oracle, MS SQL Server, Postgres.&lt;/li&gt;
  &lt;li&gt;Non Relational Databases or NoSQL Databases have a Collections (Tables), Documents (Rows) and Key-Value Pairs (Fields). The documents may be nested. The structure of the document is not fixed (schemaless). DynamoDB is Amazon’s NoSQL database.&lt;/li&gt;
  &lt;li&gt;Data Warehousing is used for BI. It is used to perform complex operations on complex data sets, which are very data intensive.&lt;/li&gt;
  &lt;li&gt;OLTP - Online Transaction Processing, typically small writes and reads, but happen very frequently.&lt;/li&gt;
  &lt;li&gt;OLAP - Online Analytics Processing, is like Data Warehousing. Very different architecture and infrastructure than OLTP. AWS has Redshift as the DW database.&lt;/li&gt;
  &lt;li&gt;AWS always gives an instance (service) endpoint which is a DNS address for the DB instance, never an IP.&lt;/li&gt;
  &lt;li&gt;The DB Security Group needs to allow inbound traffic on port 3306 from the security group of the EC2 instance that is trying to establish a connection.&lt;/li&gt;
  &lt;li&gt;There are 2 types of backups - Automated backups and Database snapshots, retained for 1-35 days.&lt;/li&gt;
  &lt;li&gt;Automated backups take a full daily backup. For recovery, AWS chooses the most recent backup and apply the transaction logs. This allows for point in time recovery within the retention window.&lt;/li&gt;
  &lt;li&gt;Automated backups are enabled by default, and stored in S3 (free storage). During the backup during a defined window, storage IO may be suspended. They are deleted if the RDS instance is deleted.&lt;/li&gt;
  &lt;li&gt;DB snapshots are manual. They survive the RDS instance deletion.&lt;/li&gt;
  &lt;li&gt;The restored RDS instance will have a new DNS and will be a new RDS instance.&lt;/li&gt;
  &lt;li&gt;Encryption at rest is supported for all RDS DB engines.&lt;/li&gt;
  &lt;li&gt;Encryption uses AWS KMS. If the RDS instance is encrypted, the backup, snapshots and replicas are also encrypted. Encryption has to be defined at instance creation time. For existing DB, encrypt the snapshot thereby creating a copy, and restore it to create a new, encrypted instance. (Just like what we’d do with EBS)&lt;/li&gt;
  &lt;li&gt;Snapshots can be copied across regions&lt;/li&gt;
  &lt;li&gt;Multi AZ means a copy of a database (standby) in a different AZ which is replicated &lt;em&gt;synchronously&lt;/em&gt;. This is for DR only. The instance automatically fails over to the standby in another AZ in the event of a failure. The DNS endpoint will now have the IP of the multiAZ database.&lt;/li&gt;
  &lt;li&gt;Read Replicas are for performance (not the standbys) - They are read-only copies of the master, which are replicated &lt;em&gt;asynchronously&lt;/em&gt;. This is ideal for read-heavy workloads. They are not available for MS SQL Server and Oracle. They’re used for scale-out. Up to 5 read replicas are possible.&lt;/li&gt;
  &lt;li&gt;Read replicas can be promoted to be their own databases, but this breaks replication.&lt;/li&gt;
  &lt;li&gt;Read replicas can be in a completely different region.&lt;/li&gt;
  &lt;li&gt;Read replicas can be encrypted even if the master is not.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;elasticache&quot;&gt;Elasticache&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Elasticache - Managed in-memory storage. Supported engines are Memcached and Redis.&lt;/li&gt;
  &lt;li&gt;Used to improve performance of read-heavy applications by providing low latency access.&lt;/li&gt;
  &lt;li&gt;Memcached is not multiAZ, Redis is. Redis also supports Master-Slave replication.&lt;/li&gt;
  &lt;li&gt;Memcached cluster can be scaled out just like an ASG&lt;/li&gt;
  &lt;li&gt;Redis supports rich data structures like lists, hashes, sets and provides persistence, pub-sub, and multi-AZ with failover just like RDS.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dynamodb&quot;&gt;DynamoDB&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Amazon’s NoSQL database&lt;/li&gt;
  &lt;li&gt;You pay for read and write provisioned capacity + the storage.&lt;/li&gt;
  &lt;li&gt;Data is replicated across 3 data centers&lt;/li&gt;
  &lt;li&gt;Reads can be eventually consistent or strongly consistent&lt;/li&gt;
  &lt;li&gt;The largest record size is 400KB&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Read Capacity&lt;/strong&gt; = number of items that can fit in 4 KB and can be read from dynamodb in a second. So if they’re full size (400KB) then we’d need a read capacity of 100 to read 1 such item in a second. For strongly consistent reads, this capacity is &lt;strong&gt;2X eventually consistent reads&lt;/strong&gt;. So in this example, we’d need 200 units to perform the same throughput (1 full size record to be read in a second), but strongly consistent.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Write Capacity&lt;/strong&gt; = Number of items which are 1 KB in size that can be written in a second. So just like the above case, if we have 1 full size item (400KB) that needs to be written, then we’d need a write capacity of 400 to be able to write it in 1 second. If we need to write 2 such items in a second, then it’d be 800 (2&lt;em&gt;1KB&lt;/em&gt;400).&lt;/li&gt;
  &lt;li&gt;A local secondary index can only be created at table creation time.&lt;/li&gt;
  &lt;li&gt;A local secondary index has the same primary partition key as the main table and can have a different sort key.&lt;/li&gt;
  &lt;li&gt;Global secondary index is the one where the index primary key can be different than the primary partition key of the main table, and of course the sort key can be different as well.&lt;/li&gt;
  &lt;li&gt;There is a 10GB limit of item collection (sum of size of all items in the table plus the local secondary indexes)&lt;/li&gt;
  &lt;li&gt;LSI share the provisioned read write capacity of the main table.&lt;/li&gt;
  &lt;li&gt;GSI need their own read write capacity, so think of GSI as another table of its own.&lt;/li&gt;
  &lt;li&gt;Changes to DynamoDB tables can be &lt;code class=&quot;highlighter-rouge&quot;&gt;streamed&lt;/code&gt; using DynamoDB streams. These streams live in shards for 24 hours (like Kinesis).&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;redshift&quot;&gt;Redshift&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Amazon’s OLAP service, fully managed data warehouse&lt;/li&gt;
  &lt;li&gt;Can be single node with 160GB data&lt;/li&gt;
  &lt;li&gt;To scale, use multi node where there is a leader node with compute nodes to do the work (128 compute nodes)&lt;/li&gt;
  &lt;li&gt;Redshift organizes the data based on columns (column based system).&lt;/li&gt;
  &lt;li&gt;You’re not charged for a leader node, only the compute nodes.&lt;/li&gt;
  &lt;li&gt;Redshift is only available in 1 AZ&lt;/li&gt;
  &lt;li&gt;Can be snapshotted and copied to another AZ&lt;/li&gt;
  &lt;li&gt;Redshift Spectrum allows to run SQL on exabytes of unstructured data in S3. No ETL needed.&lt;/li&gt;
  &lt;li&gt;Supports AES256 for data encryption at rest&lt;/li&gt;
  &lt;li&gt;Redshift attempts to maintain at least 3 copies of the data.&lt;/li&gt;
  &lt;li&gt;Redshift can asynchronously replicate data to S3 in another region for DR&lt;/li&gt;
  &lt;li&gt;Backup retention is same as RDS - 1 to 35 days&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;vpc&quot;&gt;VPC&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;A virtual datacenter in the cloud (Virtual Private Cloud).&lt;/li&gt;
  &lt;li&gt;Number of IPs in a CIDR notation is &lt;code class=&quot;highlighter-rouge&quot;&gt;2^(32-N)&lt;/code&gt;. So, a &lt;code class=&quot;highlighter-rouge&quot;&gt;/32&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;2^(0)&lt;/code&gt; which is 1.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/16&lt;/code&gt; is the largest VPC, and smallest is &lt;code class=&quot;highlighter-rouge&quot;&gt;/28&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;A region has a soft limit of 5 VPCs.&lt;/li&gt;
  &lt;li&gt;A VPC is divided into subnets, where 1 subnet can only be in 1 AZ (a subnet cannot spread across AZs).&lt;/li&gt;
  &lt;li&gt;Route Tables control traffic between subnets.&lt;/li&gt;
  &lt;li&gt;Internet Gateways (1 per VPC) are used to provide internet (in+out) to a subnet by adding a route to IGW in that subnet’s route table.&lt;/li&gt;
  &lt;li&gt;We get a &lt;code class=&quot;highlighter-rouge&quot;&gt;/16&lt;/code&gt; default VPC in each region, where all &lt;code class=&quot;highlighter-rouge&quot;&gt;/20&lt;/code&gt; subnets are public.&lt;/li&gt;
  &lt;li&gt;VPCs can be peered (even between different accounts and regions). The peering is in a star configuration where there is no transitive connectivity.&lt;/li&gt;
  &lt;li&gt;NACLs (Network Access Control Lists) sit at the subnet level, and are stateful.&lt;/li&gt;
  &lt;li&gt;A VPC can be on a dedicated tenancy, where all the instances that are launched in this VPC will use dedicated hardware.&lt;/li&gt;
  &lt;li&gt;When we create a new VPC, it will create a default NACL, default route table (called main), but no subnets or gateways.&lt;/li&gt;
  &lt;li&gt;The default NACLs allows all inbound and outbound traffic, default SG allows all inbound within the same security group and allows all outbound to anywhere, default route table (main) allows all traffic within the VPC.&lt;/li&gt;
  &lt;li&gt;We lose 5 IP addresses per subnet. These are first 4 and last 1 (&lt;code class=&quot;highlighter-rouge&quot;&gt;.0&lt;/code&gt; network address, &lt;code class=&quot;highlighter-rouge&quot;&gt;.1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.2&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.3&lt;/code&gt; are reserved and &lt;code class=&quot;highlighter-rouge&quot;&gt;.255&lt;/code&gt; is the broadcast).&lt;/li&gt;
  &lt;li&gt;For outbound internet access for private subnets, we need to route the traffic to either NAT gateway or NAT instance.&lt;/li&gt;
  &lt;li&gt;NAT instances are legacy, and are created from a community AMI. They’re placed in a public subnet with a security group that allows HTTP traffic inbound and all traffic outbound. Remember to turn off the source/dest check on the instance. By default all the EC2s only allow traffic that either originates or terminates at them.&lt;/li&gt;
  &lt;li&gt;NAT instances are difficult to scale up and out using the traditional ASG setup.&lt;/li&gt;
  &lt;li&gt;Use NAT Gateways. They’re managed by AWS and is highly available. They’re also created in a public subnet. They do not sit behind a security group either. They scale automatically up to 10Gbps.&lt;/li&gt;
  &lt;li&gt;Egress gateway is similar to NAT gateway, except its for ipv6.&lt;/li&gt;
  &lt;li&gt;It is a good practice to create 1 NAT Gateway per AZ for AZ failure isolation.&lt;/li&gt;
  &lt;li&gt;NACLs sit at the subnet level (which sits at the AZ level). There can only be 1 NACL per subnet, but multiple subnets can be associated with a NACL.&lt;/li&gt;
  &lt;li&gt;NACLs are stateless, so you’d need to explicitly allow outbound traffic when you enable inbound traffic on a port.&lt;/li&gt;
  &lt;li&gt;A new NACL has deny all for inbound and outbound (unlike default which is allow all).&lt;/li&gt;
  &lt;li&gt;The rules are evaluated in the increasing order (AWS recommends increments of 100) and are first match exit.&lt;/li&gt;
  &lt;li&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; in a NACL rule set is the default, when there is no earlier match.&lt;/li&gt;
  &lt;li&gt;Ephemeral ports are super important - they’re ports from 1024-65535, which are used as short lived ports for the client. The client picks these ports to expect the response on. They need to be opened up for outbound traffic.&lt;/li&gt;
  &lt;li&gt;The changes to NACLs take effect immediately.&lt;/li&gt;
  &lt;li&gt;The internet facing ALBs need to be in at least 2 AZs, and both of the subnets have to be public.&lt;/li&gt;
  &lt;li&gt;VPC flow logs allow capturing IP traffic going to/from the network interfaces in the VPC. They are stored as cloudwatch logs. They’re created at VPC, Subnet, or ENI level.&lt;/li&gt;
  &lt;li&gt;Flow logs can include peered VPC only if the peered VPC is in the same account.&lt;/li&gt;
  &lt;li&gt;VPC endpoints allow access to AWS services (S3, SQS, SNS..) via the AWS backbone, bypassing the internet.&lt;/li&gt;
  &lt;li&gt;We get 5 Elastic IP Addresses per VPC. These are static IPs that can be detached and attached to another resource. For example, NAT Gateway gets an EIP.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;sqs&quot;&gt;SQS&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;A queueing service that acts as a buffer for messages between producers and consumers. Oldest AWS service. Used for decoupled architecture.&lt;/li&gt;
  &lt;li&gt;SQS supports encryption at rest.&lt;/li&gt;
  &lt;li&gt;Standard Queue -
    &lt;ul&gt;
      &lt;li&gt;At least once delivery.&lt;/li&gt;
      &lt;li&gt;Higher throughput&lt;/li&gt;
      &lt;li&gt;No guaranteed order&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;FIFO Queue -
    &lt;ul&gt;
      &lt;li&gt;More $$&lt;/li&gt;
      &lt;li&gt;Less Throughput (300 TPS)&lt;/li&gt;
      &lt;li&gt;Exactly Once Delivery&lt;/li&gt;
      &lt;li&gt;Retains order&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SQS is a pull based system&lt;/li&gt;
  &lt;li&gt;256 KB per message&lt;/li&gt;
  &lt;li&gt;Default retention period is 4 days but can be maxed at 14 days, min is 1 minute.&lt;/li&gt;
  &lt;li&gt;Default visibility timeout is 30 seconds, can be maxed at 12 hours.&lt;/li&gt;
  &lt;li&gt;Visibility timeout is the amount of time the message is hidden (in flight) from other consumers.&lt;/li&gt;
  &lt;li&gt;SQS Long polling is a good way to save costs, as it hangs out to the connection till the timeout happens, or a message shows up. The max is 20 seconds. (Receive message wait time)&lt;/li&gt;
  &lt;li&gt;Delivery Delay can be set up on the queue (0-15 mins)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;swf&quot;&gt;SWF&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Simple WorkFlow service that makes it easy to coordinate tasks between machines and humans with a task oriented API.&lt;/li&gt;
  &lt;li&gt;This is amazon.com shopping experience for fulfillment.&lt;/li&gt;
  &lt;li&gt;Workflows can last for as long as 1 year&lt;/li&gt;
  &lt;li&gt;SWF Starter is the actor that starts the workflow&lt;/li&gt;
  &lt;li&gt;SWF Decider is a program that controls the coordination of tasks.&lt;/li&gt;
  &lt;li&gt;SWF Activity Worker is the code that executes to perform that task.&lt;/li&gt;
  &lt;li&gt;SWF assigns a task to only one worker (no duplication at all)&lt;/li&gt;
  &lt;li&gt;SWF Domain is the container that contains the related workflows, their tasks, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;sns&quot;&gt;SNS&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Simple notification service&lt;/li&gt;
  &lt;li&gt;Push based, to send notifications, or act as a trigger for some other processing.&lt;/li&gt;
  &lt;li&gt;SNS supports Email, Email-JSON, HTTP/S, SMS, Lambda, Application, and SQS as transport protocols.&lt;/li&gt;
  &lt;li&gt;All messages published are stored redundantly across multiple AZs, and can be encrypted at rest (very recently announced).&lt;/li&gt;
  &lt;li&gt;An SNS topic acts as an endpoint for pushing messages to consumers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;api-gateway&quot;&gt;API Gateway&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;A service that provides managed, secure HTTP interface to a lambda function (or LB, or EC2)&lt;/li&gt;
  &lt;li&gt;Scales Automatically&lt;/li&gt;
  &lt;li&gt;Supports API response caching to during a TTL the requests never hit the backend.&lt;/li&gt;
  &lt;li&gt;Supports Throttling to ensure the back end is not flooded with requests (like the database).&lt;/li&gt;
  &lt;li&gt;CORS would need to be enabled on the API Gateway, so pages from another domain can access the API Gateway Endpoints.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;kinesis&quot;&gt;Kinesis&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;A service that allows ingesting, storing and processing streaming data.&lt;/li&gt;
  &lt;li&gt;Three Services
    &lt;ul&gt;
      &lt;li&gt;Kinesis Streams : Stores streaming data for 1-7 days in shards. Consumers pull data from the shards. Then they can send this data to be stored in DynamoDB, S3, redshift, etc. Capacity of the stream is the sum of the capacity of the shards.&lt;/li&gt;
      &lt;li&gt;Kinesis Firehose : No need for shards (so no retention). Data can be (optionally) analyzed with lambda and stored in S3, ES cluster, redshift (via S3)&lt;/li&gt;
      &lt;li&gt;Kinesis Analytics : Allows SQL queries to be run on Kinesis Streams as well as Kinesis Firehose.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;well-architected-framework-pillars&quot;&gt;Well Architected Framework Pillars&lt;/h1&gt;

&lt;h2 id=&quot;security&quot;&gt;Security&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Data protection at rest and transit, Privilege Management, Infrastructure Protection, Detective Controls&lt;/li&gt;
  &lt;li&gt;Apply security at all levels (NACL, Security Groups, WAF, IAM policies)&lt;/li&gt;
  &lt;li&gt;Enable traceability (Cloudtrail, GuardDuty, Config, Cloudwatch)&lt;/li&gt;
  &lt;li&gt;Focus on security (Hardened AMIs, KMS encryption, S3 versioning, MFA deletes, IAM Password policies and MFA)&lt;/li&gt;
  &lt;li&gt;Automate Security (Cloudwatch alarms)&lt;/li&gt;
  &lt;li&gt;Shared responsibility model
    &lt;ul&gt;
      &lt;li&gt;AWS is responsible for security &lt;strong&gt;of&lt;/strong&gt; the cloud (AWS Global Infrastructure, Physical Infrastructure)&lt;/li&gt;
      &lt;li&gt;Customer is responsible for security &lt;strong&gt;in&lt;/strong&gt; the cloud (AMIs, Data Encryption, O/S, IAM, Application Data)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reliability&quot;&gt;Reliability&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Test recovery procedures (chaos engineering)&lt;/li&gt;
  &lt;li&gt;Automated recovery (ELB, multi-AZ, Route53)&lt;/li&gt;
  &lt;li&gt;Scale horizontally (ELB)&lt;/li&gt;
  &lt;li&gt;Stop guessing capacity (Autoscale) and know the service limits&lt;/li&gt;
  &lt;li&gt;Assume failures&lt;/li&gt;
  &lt;li&gt;Change Management in AWS&lt;/li&gt;
  &lt;li&gt;Backup, recovery, RPO, RTO&lt;/li&gt;
  &lt;li&gt;IaaC, Failure Injection Queries of Aurora&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;performance-efficiency&quot;&gt;Performance Efficiency&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Evolve the platform as AWS evolves theirs&lt;/li&gt;
  &lt;li&gt;Use managed services for PaaS and IaaS&lt;/li&gt;
  &lt;li&gt;Go Global&lt;/li&gt;
  &lt;li&gt;Use Serverless&lt;/li&gt;
  &lt;li&gt;Experiment often&lt;/li&gt;
  &lt;li&gt;Across Storage, Network, Database and Compute - pick the right options across the stack.&lt;/li&gt;
  &lt;li&gt;Focus on reducing latency across the stack, and make it predictable.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cost-optimization&quot;&gt;Cost Optimization&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Reduce the cost to run infrastructure&lt;/li&gt;
  &lt;li&gt;Transparent expenses (use tags, budgets, billing alerts, consolidated billing)&lt;/li&gt;
  &lt;li&gt;Use managed services&lt;/li&gt;
  &lt;li&gt;Pay for what you use, make resources idle when not in use (compute, autoscale, lambda)&lt;/li&gt;
  &lt;li&gt;Economies of Scale&lt;/li&gt;
  &lt;li&gt;Do not overlook data xfer charges&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;operational-excellence&quot;&gt;Operational Excellence&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Perform operations with code&lt;/li&gt;
  &lt;li&gt;Apply monitoring and collect metrics&lt;/li&gt;
  &lt;li&gt;Make incremental changes&lt;/li&gt;
  &lt;li&gt;Prepare - Maintain runbooks and playbooks (cloudformation)&lt;/li&gt;
  &lt;li&gt;Change Visibility and Configuration Management - AWS Config, Cloudwatch, Tagging&lt;/li&gt;
  &lt;li&gt;Focus on No downtime deployments, focus on CI/CD&lt;/li&gt;
  &lt;li&gt;Have an automated rollback plan before making changes&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;aws-organizations&quot;&gt;AWS Organizations&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;AWS allows linking and managing multiple accounts together, centrally.&lt;/li&gt;
  &lt;li&gt;There is a paying account (root) and other accounts linked to it.&lt;/li&gt;
  &lt;li&gt;Consolidated billing aggregates expenses across accounts per service and you’re sent one, consolidated bill.&lt;/li&gt;
  &lt;li&gt;Volume pricing discount as multiple account usage adds up for lower pricing tier.&lt;/li&gt;
  &lt;li&gt;Reserved instances that are unused in one linked account can pay for the other account&lt;/li&gt;
  &lt;li&gt;No resources should be deployed in the paying (root) account.&lt;/li&gt;
  &lt;li&gt;There is a soft limit of 20 linked accounts.&lt;/li&gt;
  &lt;li&gt;The organizations allow using SCP (Service Control Policy) which can be used to control the AWS services that the linked accounts can use.&lt;/li&gt;
  &lt;li&gt;SCP will override IAM.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;cloudformation-structure&quot;&gt;Cloudformation Structure&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Resources&lt;/code&gt;  - Define the resources to be created&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Parameters&lt;/code&gt; - Parameters taken in to create the resources&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Mappings&lt;/code&gt; - Used to map key values in the template&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Outputs&lt;/code&gt; - Return the resources created after running the template&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;whitepapers&quot;&gt;Whitepapers&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://d0.awsstatic.com/whitepapers/AWS_Cloud_Best_Practices.pdf&quot;&gt;Architecting for the Cloud: AWS Best Practices&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/architecture/well-architected/&quot;&gt;Well Architected Framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://media.amazonwebservices.com/AWS_Disaster_Recovery.pdf&quot;&gt;Disaster Recovery&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;faqs-apisclis-and-documentation&quot;&gt;FAQs, APIs/CLIs and Documentation&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/ec2/faqs/&quot;&gt;EC2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/s3/faqs/&quot;&gt;S3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/vpc/faqs/&quot;&gt;VPC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/route53/faqs/&quot;&gt;Route 53&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/rds/faqs/&quot;&gt;RDS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/sqs/faqs/&quot;&gt;SQS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/premiumsupport/compare-plans/&quot;&gt;Support Plans&lt;/a&gt; and &lt;a href=&quot;https://aws.amazon.com/premiumsupport/pricing/&quot;&gt;their pricing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html&quot;&gt;Service Limits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;finally&quot;&gt;Finally&lt;/h1&gt;
&lt;p&gt;Before you schedule the exam, measure your confidence in these areas in particular -&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Ins and outs of VPC, EBS and S3.&lt;/li&gt;
  &lt;li&gt;Highly available, fault tolerant &lt;strong&gt;and&lt;/strong&gt; cost effective architectures (and a combination of these)&lt;/li&gt;
  &lt;li&gt;Disaster Recovery&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 style=&quot;text-align: center&quot; id=&quot;comments&quot;&gt;Comments&lt;/h3&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = &quot;https://lobster1234.github.io/2018/11/29/aws-certified-solutions-architect-associate-2018-exam-notes/&quot;;  
this.page.identifier = &quot;/2018/11/29/aws-certified-solutions-architect-associate-2018-exam-notes&quot;;
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://lobster1234.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;


      

&lt;/script&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      
        <category term="certification" />
      

      
        <category term="aws," />
      
        <category term="certification" />
      

      
        <summary type="html">My CSAA from 2016 had expired, and I was in Vegas to attend re:Invent 2018. I took this opportunity to recertify the credential. This is a newer version of the exam, which made it exciting, but at the same time there were a lot of services that I had not really used, so had to go through the FAQs and documentation for those, along with the excellent acloud.guru course. It took me about 4 days of serious prep, and I scored 927/1000. Working with AWS professionally for 6 years helped me in a lot of areas - particularly the well architected framework. Also, I loved my exam experience at re:Invent, compared to the typical exam centers we go to. It was far more relaxing, and I scored quite a bit of swag. Here are the notes that I took while preparing for the exam.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Serverless Architectures on AWS in Practice</title>
      
      
      <link href="https://lobster1234.github.io/2018/07/18/serverless-architectures-on-aws-in-practice-oscon-2018/" rel="alternate" type="text/html" title="Serverless Architectures on AWS in Practice" />
      
      <published>2018-07-18T13:44:37-07:00</published>
      <updated>2018-07-18T13:44:37-07:00</updated>
      <id>https://lobster1234.github.io/2018/07/18/serverless-architectures-on-aws-in-practice-oscon-2018</id>
      <content type="html" xml:base="https://lobster1234.github.io/2018/07/18/serverless-architectures-on-aws-in-practice-oscon-2018/">&lt;p&gt;Slides from my talk at &lt;a href=&quot;https://conferences.oreilly.com/oscon/oscon-or&quot; target=&quot;_blank_&quot;&gt;OSCON 2018&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;From functions to containers to databases, serverless is a huge paradigm shift. The ability to only pay for what we use and not worry about underlying infrastructure is very tempting to developers and DevOps engineers, and the rate of innovation in this area has been very rapid across all major public cloud providers. Serverless architectures are the natural evolution of microservices design. While Lambda has become synonymous with serverless in AWS, there are several new and upcoming patterns that take serverless architectures to the next level.&lt;/p&gt;

&lt;p&gt;Manish Pandit explains how to identify these patterns and put them to use. Using Marqeta’s efforts to move its payments infrastructure to the public cloud as an example, Manish explores the services that Marqeta considered, customized, hacked around, and successfully implemented as a part of this move.
&lt;!--more--&gt;&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;254c67b25a3649e5b24d18b3331505f9&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      
        <category term="presentations" />
      
        <category term="serverless" />
      

      
        <category term="aws," />
      
        <category term="lambda," />
      
        <category term="presentations," />
      
        <category term="oscon," />
      
        <category term="serverless" />
      

      
        <summary type="html">Slides from my talk at OSCON 2018. From functions to containers to databases, serverless is a huge paradigm shift. The ability to only pay for what we use and not worry about underlying infrastructure is very tempting to developers and DevOps engineers, and the rate of innovation in this area has been very rapid across all major public cloud providers. Serverless architectures are the natural evolution of microservices design. While Lambda has become synonymous with serverless in AWS, there are several new and upcoming patterns that take serverless architectures to the next level. Manish Pandit explains how to identify these patterns and put them to use. Using Marqeta’s efforts to move its payments infrastructure to the public cloud as an example, Manish explores the services that Marqeta considered, customized, hacked around, and successfully implemented as a part of this move.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Server to Server Auth with Amazon Cognito</title>
      
      
      <link href="https://lobster1234.github.io/2018/05/31/server-to-server-auth-with-amazon-cognito/" rel="alternate" type="text/html" title="Server to Server Auth with Amazon Cognito" />
      
      <published>2018-05-31T00:44:37-07:00</published>
      <updated>2018-05-31T00:44:37-07:00</updated>
      <id>https://lobster1234.github.io/2018/05/31/server-to-server-auth-with-amazon-cognito</id>
      <content type="html" xml:base="https://lobster1234.github.io/2018/05/31/server-to-server-auth-with-amazon-cognito/">&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/cognito/&quot;&gt;Amazon Cognito&lt;/a&gt; is a managed service that provides federated identity, access controls, and user management with multi-factor authentication for web and mobile applications. The service is very rich - any application developer can set up the signup and login process with a few clicks in Amazon Cognito Console by federating with identity providers such as Google, Facebook, Twitter, etc. One of the best features of Cognito is Lambda integration (&lt;a href=&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html?icmpid=docs_cognito_console&quot;&gt;Triggers&lt;/a&gt;), which allows Lambda invocation on events like pre-signup, pre and post authentication, etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/cognito.png&quot; alt=&quot;cognito&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this post I will walk through a not so fancy, yet very useful Cognito feature - which is server to server authentication. This is one of the most common scenarios in a microservices world, where services need to talk to other services securely, and using an established standard such as &lt;a href=&quot;https://oauth.net/2/&quot;&gt;OAuth2&lt;/a&gt;. This is also known as &lt;a href=&quot;https://www.oauth.com/oauth2-servers/access-tokens/client-credentials/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;client_credentials&lt;/code&gt; Grant&lt;/a&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;2-legged OAuth&lt;/code&gt;. Amazon Cognito provides a simple and cost effective option to implement it.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;cognito-terminology&quot;&gt;Cognito Terminology&lt;/h2&gt;

&lt;p&gt;For this post, I am assuming familiarity with OAuth2, so I will not be describing terms like Grants, Scopes, JWT and JWK in detail.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html&quot;&gt;User Pools&lt;/a&gt; : A user pool is collections of users. The users can be federated, can be manually set up, or imported. User Pools are the foundational entity in Cognito. You may compare this to a typical AD or LDAP directory.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html&quot;&gt;Identity Pools&lt;/a&gt; : An identity pool allows access to AWS services via federated or custom identity. For example, at Marqeta, we have our dev AWS account federated with our Google Suite. This way we do not have to manage a separate directory of users who need to access the dev AWS account.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-assign-domain.html&quot;&gt;Domain&lt;/a&gt; : A Domain is tied to a user pool in a 1:1 relationship, and is used to host the signup/login/challenge pages for the auth experience for the application.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-client-apps.html&quot;&gt;App Client&lt;/a&gt; : A User Pool can have multiple app clients. App Clients are also where we set up OAuth2 grant types. This is similar to OAuth2 clients that can access resources using various grant types. The app client also has a list of associated &lt;em&gt;scopes&lt;/em&gt; that it may allow requests for. These scopes are declared by the Resource Server(s) in the User Pool.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-resource-servers.html&quot;&gt;Resource Server&lt;/a&gt; : A resource server is where the users’ data resides, and is protected by the configured User Pool. There can be multiple resource servers associated with a single User Pool. Think of a Resource Server as a microservice which handles &lt;em&gt;authenticated&lt;/em&gt; requests. By the time the request makes it to the Resource Server, it has an &lt;em&gt;access token&lt;/em&gt; which contains information about the authenticated user, and the session. The resource server(s) verify the authenticity and validity of the access token they receive. A resource server has an identifier (usually the URL of the service), and a list of scopes. Scopes are the granular level levels of access - like read, write, admin, etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://jwt.io/&quot;&gt;JWT&lt;/a&gt; : Cognito access tokens are JWT, which are signed with &lt;a href=&quot;https://tools.ietf.org/html/rfc7517&quot;&gt;JWK&lt;/a&gt;. The JWT contains standard claims, but can also be extended to contain custom claims.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In a typical set up, a User Pool will have a collection of users that have a means of authentication which is either custom or federated, Resource Server(s) which have protected data for those users, and Application Client(s) which will need to access that data on those users’ behalf. Managing this identity and access is self-contained in Cognito.&lt;/p&gt;

&lt;h2 id=&quot;client-credentials-flow&quot;&gt;Client Credentials Flow&lt;/h2&gt;

&lt;p&gt;While mentioning the terminology, I did not talk about server to server, or service to service identity much. This is where OAuth2 Client Credentials Flow comes in, and there is no user, or identity associated with the access request. The calling service obtains an access token, and the target service asserts that token to be valid before granting access to the protected data.&lt;/p&gt;

&lt;p&gt;In this scenario, Cognito’s User Pool is merely a placeholder, as we will have no users. The only &lt;em&gt;user&lt;/em&gt; will be the app client. Before you think that we do not need a Domain as we will not be hosting any login pages, but we do. Instead of login pages, this domain will host the OAuth2 endpoint, &lt;code class=&quot;highlighter-rouge&quot;&gt;/oauth2/token&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We will use the AWS CLI and not use the Console, but feel free to perform the same actions via the Console. Alternatively, you may want to just check the console after each step to learn more about the constructs.&lt;/p&gt;

&lt;h2 id=&quot;aws-cli&quot;&gt;AWS CLI&lt;/h2&gt;

&lt;p&gt;If you have seen my previous posts, I prefer &lt;a href=&quot;https://github.com/awslabs/aws-shell&quot;&gt;aws-shell&lt;/a&gt; over the plain CLI. But you can use the CLI by prefixing every command with &lt;code class=&quot;highlighter-rouge&quot;&gt;aws&lt;/code&gt;. Please ensure the credentials being used have policies allowing Cognito operations.&lt;/p&gt;

&lt;h3 id=&quot;create-a-cognito-user-pool&quot;&gt;Create a Cognito User Pool&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; cognito-idp create-user-pool --pool-name myblog
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will produce a large JSON output. We can verify by listing the user pools, like so.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; cognito-idp list-user-pools --max-results 10

  {
      &quot;UserPools&quot;: [
          {
              &quot;Id&quot;: &quot;us-east-1_0Pe*****&quot;,
              &quot;Name&quot;: &quot;myblog&quot;,
              &quot;LambdaConfig&quot;: {},
              &quot;LastModifiedDate&quot;: 1527786443.052,
              &quot;CreationDate&quot;: 1527786443.052
          }
      ]
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Id&lt;/code&gt; of the user pool is very important, as everything we create from now on will need it.&lt;/p&gt;

&lt;h3 id=&quot;create-a-resource-server&quot;&gt;Create a Resource Server&lt;/h3&gt;

&lt;p&gt;The resource server acts as a placeholder for scopes. Imagine a service to manage transactions, which will have scopes like post and get transactions.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; cognito-idp create-resource-server --name transactions --identifier transactions --user-pool-id us-east-1_0Pe***** --scopes ScopeName=get,ScopeDescription=get_tx ScopeName=post,ScopeDescription=post_tx

{
    &quot;ResourceServer&quot;: {
        &quot;UserPoolId&quot;: &quot;us-east-1_0Pe*****&quot;,
        &quot;Identifier&quot;: &quot;transactions&quot;,
        &quot;Name&quot;: &quot;transactions&quot;,
        &quot;Scopes&quot;: [
            {
                &quot;ScopeName&quot;: &quot;post&quot;,
                &quot;ScopeDescription&quot;: &quot;post_tx&quot;
            },
            {
                &quot;ScopeName&quot;: &quot;get&quot;,
                &quot;ScopeDescription&quot;: &quot;get_tx&quot;
            }
        ]
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;create-a-client-app&quot;&gt;Create a Client App&lt;/h3&gt;

&lt;p&gt;Let us create a client who can only &lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt; transactions by calling the transactions service. As you can see below, we configure this client to use &lt;code class=&quot;highlighter-rouge&quot;&gt;client_credentials&lt;/code&gt; grant, and restrict it to using only &lt;code class=&quot;highlighter-rouge&quot;&gt;transactions/post&lt;/code&gt; scope. The scopes are defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;$resource_server_identifier/$scope_name&lt;/code&gt; format. Also notice the &lt;code class=&quot;highlighter-rouge&quot;&gt;--generate-secret&lt;/code&gt; argument, which will create a secret that we can use for our client credentials access token request.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; cognito-idp create-user-pool-client --user-pool-id us-east-1_0Pe***** --allowed-o-auth-flows client_credentials --client-name test --generate-secret --allowed-o-auth-scopes transactions/post --allowed-o-auth-flows-user-pool-client
{
    &quot;UserPoolClient&quot;: {
        &quot;UserPoolId&quot;: &quot;us-east-1_0Pe*****&quot;,
        &quot;ClientName&quot;: &quot;test&quot;,
        &quot;ClientId&quot;: &quot;14aq5ll5b1it6f62uefe******&quot;,
        &quot;ClientSecret&quot;: &quot;j22a2ha9httcbord******e4k29ra7s8026agrc89nhjg******&quot;,
        &quot;LastModifiedDate&quot;: 1527806667.264,
        &quot;CreationDate&quot;: 1527806667.264,
        &quot;RefreshTokenValidity&quot;: 30,
        &quot;AllowedOAuthFlows&quot;: [
            &quot;client_credentials&quot;
        ],
        &quot;AllowedOAuthScopes&quot;: [
            &quot;transactions/post&quot;
        ],
        &quot;AllowedOAuthFlowsUserPoolClient&quot;: true
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Note the &lt;code class=&quot;highlighter-rouge&quot;&gt;ClientId&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ClientSecret&lt;/code&gt; in the response, as we’d need this to request an access token.&lt;/p&gt;

&lt;h3 id=&quot;add-a-domain&quot;&gt;Add a Domain&lt;/h3&gt;

&lt;p&gt;We will need to add a domain to this pool, so we can get a URL for &lt;code class=&quot;highlighter-rouge&quot;&gt;/oauth2/token&lt;/code&gt; endpoint. Notice that I used a fairly odd name, because these domain names are global (yes, as they generate a public URL), so a generic name like &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; is probably already taken. Please use a name that is probably unique.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; cognito-idp create-user-pool-domain  --domain lobster1234 --user-pool-id us-east-1_0Pe*****
{
    &quot;DomainDescription&quot;: {
        &quot;UserPoolId&quot;: &quot;us-east-1_0Pe*****&quot;,
        &quot;AWSAccountId&quot;: &quot;***431494***&quot;,
        &quot;Domain&quot;: &quot;lobster1234&quot;,
        &quot;S3Bucket&quot;: &quot;aws-cognito-prod-iad-assets&quot;,
        &quot;CloudFrontDistribution&quot;: &quot;d3oia8etllorh5.cloudfront.net&quot;,
        &quot;Version&quot;: &quot;20180531225618&quot;,
        &quot;Status&quot;: &quot;ACTIVE&quot;
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;The DNS may take some time to propagate, so the URL may not work for a while (Took me 20 mins).&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This would translate into the OAuth2 URL as &lt;code class=&quot;highlighter-rouge&quot;&gt;https://lobster1234.auth.us-east-1.amazoncognito.com/oauth2/token&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;get-an-access-token&quot;&gt;Get an Access Token&lt;/h3&gt;

&lt;p&gt;Notice that I am using HTTP Basic to send the &lt;code class=&quot;highlighter-rouge&quot;&gt;client_id&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;client_secret&lt;/code&gt;. This is &lt;code class=&quot;highlighter-rouge&quot;&gt;base64(ClientId:ClientSecret)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you have &lt;code class=&quot;highlighter-rouge&quot;&gt;openssl&lt;/code&gt; installed, you can use it, like so, replacing &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;ClientId&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;ClientSecret&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo -n 'x:y' | openssl base64
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Once you have the base64 encoded HTTP Basic Authorization header, you can request the access token.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X POST \
  https://lobster1234.auth.us-east-1.amazoncognito.com/oauth2/token \
  -H 'authorization: Basic ***********iMWl0NmY2MnVlZmVtNmFxaG46ajIyYTJ******HRjYm9yZGtucHR0Z2U0azI5cmE3czgwMjZhZ3J***************' \
  -H 'content-type: application/x-www-form-urlencoded' \
  -d 'grant_type=client_credentials&amp;amp;scope=transactions%2Fpost'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This should return an &lt;code class=&quot;highlighter-rouge&quot;&gt;access_token&lt;/code&gt;, which is a JWT.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;access_token&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;******************.eyJzdWIiOiIxNGFxNWxsNWIxaXQ2ZjYydWVmZW02YXFobiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoidGVzdFwvZm9vIiwiYXV0aF90aW1lIjoxNTI3ODE3MzY2LCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV83RThJc3hDR0MiLCJleHAiOjE1Mjc4MjA5NjYsImlhdCI6MTUyNzgxNzM2NiwidmVyc2lvbiI6MiwianRpIjoiYWVlZWY1MGEtYjNiNS00MjAxLTlhOGYtOGI1ZjYzYTBlYmNjIiwiY2xpZW50X2lkIjoiMTRhcTVsbDViMWl0NmY2MnVlZmVtNmFxaG4ifQ.LaWN4NEUrR_2gGANnDx8zINMZteR7-E_moskq__zai5BLNpiCBnVtoLHwVH3FvDFVVesMCBmD02dRhZqXkttxEMUmetFybDtEkH2KWbalOmKvibl5JuPyQEqZ5S4DN9ZUZAqv3X48F2e0Eshck-*******************-0aDBMaMtJU-QMfeFJkN2UgKQhtzi2dbLBB06dQEd6gcxh-*****************&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;expires_in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;token_type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Bearer&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;validate-the-access-token&quot;&gt;Validate the Access Token&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;This section would need familiarity with JWT, JWK, and a bit of encryption standards.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When a service calls the transactions service with this Bearer token in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Authorization&lt;/code&gt; header, the token would need to be validated. There are several libraries available to do so. The JWT is base64 encoded, and signed. It may be encrypted as well, as is done in a lot of financial/sensitive use cases.&lt;/p&gt;

&lt;p&gt;To peek in the access token, you may paste it in &lt;a href=&quot;https://jwt.io&quot;&gt;jtw.io&lt;/a&gt;. You’ll see the following as the token is decoded.&lt;/p&gt;

&lt;p&gt;Header&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;kid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Lkek/Dt3d7ibTkq4Pz2LKpmIKTu5mR6A++DRfvmu5Vw=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;alg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;RS256&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Payload&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;sub&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;14aq5ll5b1it6f62uefe******&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;token_use&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;access&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;scope&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;transactions/post&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;auth_time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1527809373&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;iss&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://cognito-idp.us-east-1.amazonaws.com/us-east-1_0Pe*****&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;exp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1527812973&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;iat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1527809373&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;jti&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;864ec9c6-f3c9-4e3c-b9e1-dfe21e167e1e&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;client_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;14aq5ll5b1it6f62uefe******&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you need to perform signature validation, there is some extra effort.&lt;/p&gt;

&lt;p&gt;Cognito uses JWK to sign the token. In order to see the keys, visit https://cognito-idp.us-east-1.amazonaws.com/us-east-1_0Pe*****/.well-known/jwks.json.&lt;/p&gt;

&lt;p&gt;This has the list of keys that Cognito would use to sign the access tokens. It is also known as JWKS - &lt;em&gt;JSON Web Key Set&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To verify the signature, you’d need to convert the JWK to PEM. I used node to do so. From that URL, copy the key identified by the &lt;code class=&quot;highlighter-rouge&quot;&gt;kid&lt;/code&gt; in the access token’s header.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install jsonwebtoken
$ npm install jwk-to-pem
$ node
&amp;gt; var jwkToPem = require('jwk-to-pem'), jwt = require('jsonwebtoken');
undefined
&amp;gt; var jwk = {&quot;alg&quot;:&quot;RS256&quot;,&quot;e&quot;:&quot;AQAB&quot;,&quot;kid&quot;:&quot;Lkek/Dt3d7ibTkq4Pz2LKpmIKTu5mR6A++DRfvmu5Vw=&quot;,&quot;kty&quot;:&quot;RSA&quot;,&quot;n&quot;:&quot;lyZWsratUxICSfYTCH2gblgUvCpBmYUacNXfQ_3Ygk8mnKaDtkXfb8uVrWwj3Eqdv_hjDYPsYLzYiinjYrLGpFgzxwZbUYXFC49bxQOal28J2emDTiWOAYKC0a_glzcwKf74AWPeBZ8PRNOR6OPLwxnoKQ6PoKGcjonoJdydx-****************************-HJVSW1oS7_uJY-6qLQN4IPzXbaHzy9iJgTDbnd6f-htneHegoLHlSmEfYgnJ_jJBsXwXFAYVm9JLiDyhdZOl-*************************&quot;,&quot;use&quot;:&quot;sig&quot;}
undefined
&amp;gt; pem = jwkToPem(jwk)
'-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlyZWsratUxICSfYTCH2g\nblgUvCpBmYUacNXfQ/3Ygk8mnKaDtkXfb8uVrWwj3Eqdv/hjDYPsYLzYiinjYrLG\npFgzxwZbUYXFC49bxQOal28J2emDTiWOAYKC0a/glzcwKf74AWPeBZ8PRNOR6OPL\nwxnoKQ6PoKGcjonoJdydx+YhROgpj92w4kABlxuP91eht+HJVSW1oS7/uJY+6qLQ\nN4IPzXbaHzy9iJgTDbnd6f+htneHegoLHlSmEfYgnJ/jJBsXwXFAYVm9JLiDyhdZ\nOl+aSpSPQjXprlHz3Ksln5D8/Ic7yiQLtPostlZEovc0dzqGND2Hr686B1CkbGqZ\nnwIDAQAB\n-----END PUBLIC KEY-----\n'
&amp;gt; console.log(pem)
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlyZWsratUxICSfYTCH2g
blgUvCpBmYUacNXfQ/3Ygk8mnKaDtkXfb8uVrWwj3Eqdv/hjDYPsYLzYiinjYrLG
pFgzxwZbUYXFC49bxQOal28J2emDTiWOAYKC0a/glzcwKf74AWPeBZ8PRNOR6OPL
wxnoKQ6PoKGcjonoJdydx+YhROgpj92w4kABlxuP91eht+HJVSW1oS7/uJY+6qLQ
N4IPzXbaHzy9iJgTDbnd6f+htneHegoLHlSmEfYgnJ/jJBsXwXFAYVm9JLiDyhdZ
Ol+aSpSPQjXprlHz3Ksln5D8/Ic7yiQLtPostlZEovc0dzqGND2Hr686B1CkbGqZ
nwIDAQAB
-----END PUBLIC KEY-----
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Now copy the PEM, and paste it on jwt.io under “Verify Signature” section.&lt;/p&gt;

&lt;p&gt;If everything goes well, you’ll notice a “Signature Verified” message show up instead of “Invalid Signature”.&lt;/p&gt;

&lt;p&gt;This has to be done programmatically by the service that receives the access token along with an authenticated request for protected resources. Again, plenty of libraries available to do so. They’re listed on the jwt.io homepage.&lt;/p&gt;

&lt;h3 style=&quot;text-align: center&quot; id=&quot;comments&quot;&gt;Comments&lt;/h3&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = &quot;https://lobster1234.github.io/2018/05/31/server-to-server-auth-with-amazon-cognito/&quot;;  
this.page.identifier = &quot;/2018/05/31/server-to-server-auth-with-amazon-cognito&quot;;
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://lobster1234.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;


      

&lt;/script&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      

      

      
        <summary type="html">Amazon Cognito is a managed service that provides federated identity, access controls, and user management with multi-factor authentication for web and mobile applications. The service is very rich - any application developer can set up the signup and login process with a few clicks in Amazon Cognito Console by federating with identity providers such as Google, Facebook, Twitter, etc. One of the best features of Cognito is Lambda integration (Triggers), which allows Lambda invocation on events like pre-signup, pre and post authentication, etc. In this post I will walk through a not so fancy, yet very useful Cognito feature - which is server to server authentication. This is one of the most common scenarios in a microservices world, where services need to talk to other services securely, and using an established standard such as OAuth2. This is also known as client_credentials Grant, or 2-legged OAuth. Amazon Cognito provides a simple and cost effective option to implement it.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">IP Whitelisting with Amazon API Gateway</title>
      
      
      <link href="https://lobster1234.github.io/2018/04/14/amazon-api-gateway-ip-whitelisting/" rel="alternate" type="text/html" title="IP Whitelisting with Amazon API Gateway" />
      
      <published>2018-04-14T00:44:37-07:00</published>
      <updated>2018-04-14T00:44:37-07:00</updated>
      <id>https://lobster1234.github.io/2018/04/14/amazon-api-gateway-ip-whitelisting</id>
      <content type="html" xml:base="https://lobster1234.github.io/2018/04/14/amazon-api-gateway-ip-whitelisting/">&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/api-gateway/&quot;&gt;Amazon API Gateway&lt;/a&gt; is a great way to wrap Lambda functions as microservices exposed over HTTP/S, among many uses. However, any API Gateway endpoint is publically accessible. There are ways to restrict access using &lt;a href=&quot;https://docs.aws.amazon.com/apigateway/latest/developerguide/permissions.html&quot;&gt;IAM&lt;/a&gt; and &lt;a href=&quot;https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html&quot;&gt;Authorizers&lt;/a&gt;, but for simple task of IP whitelisting was always somewhat challenging, if not downright hack-y.&lt;/p&gt;

&lt;p&gt;Recently &lt;a href=&quot;https://aws.amazon.com/about-aws/whats-new/2018/04/amazon-api-gateway-supports-resource-policies/&quot;&gt;AWS announced Resource Policies&lt;/a&gt; for API Gateway, which make IP whitelisting a breeze. This is extremely helpful for a company such as &lt;a href=&quot;https://www.marqeta.com&quot;&gt;mine&lt;/a&gt;, as we deal with a lot of integrations that rely on IP whitelisting as one of the many layers of security. In this post I will walk through setting up IP whitelisting on an API hosted on API Gateway. We will use API Gateway’s built in Mock API feature to create a simple API, and secure it via IP Whitelisting.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;create-an-api&quot;&gt;Create an API&lt;/h2&gt;

&lt;p&gt;We will start by creating a mock API in API Gateway. Log on to the &lt;a href=&quot;https://console.aws.amazon.com/apigateway/home?region=us-east-1#/apis/create&quot;&gt;Amazon API Gateway&lt;/a&gt; section on the console, and click to create a new API.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/apigw/create_new_api.png&quot; alt=&quot;apipw-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, create a new resource called &lt;code class=&quot;highlighter-rouge&quot;&gt;hello&lt;/code&gt; by clicking &lt;code class=&quot;highlighter-rouge&quot;&gt;Actions/Create Resource&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/apigw/create_resource.png&quot; alt=&quot;apipw-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We will now add a method to this resource by clicking &lt;code class=&quot;highlighter-rouge&quot;&gt;Actions/Create Method&lt;/code&gt; with the &lt;code class=&quot;highlighter-rouge&quot;&gt;hello&lt;/code&gt; resource selected. We will pick &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/apigw/create_method_1.png&quot; alt=&quot;apipw-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For this simple test, we’ll use &lt;code class=&quot;highlighter-rouge&quot;&gt;Mock&lt;/code&gt; integration for the method &lt;code class=&quot;highlighter-rouge&quot;&gt;GET /hello&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/apigw/create_method_2.png&quot; alt=&quot;apipw-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we can see the &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; method created successfully.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/apigw/method_created.png&quot; alt=&quot;apipw-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, we can deploy this API. Amazon API Gateway deploys APIs as a part of a &lt;em&gt;stage&lt;/em&gt;, so we get to create a stage as we deploy the API. Select &lt;code class=&quot;highlighter-rouge&quot;&gt;Actions/Deoply API&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/apigw/redeploy_api.png&quot; alt=&quot;apipw-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can pick any stage name, I used &lt;code class=&quot;highlighter-rouge&quot;&gt;dev&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/apigw/deploy_api.png&quot; alt=&quot;apipw-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once deployed, you’ll see a stage editor, with the URL endpoint.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/apigw/invoke_url.png&quot; alt=&quot;apipw-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This URL can be accessed as a public endpoint. The Mock API returns HTTP 200 when invoked.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -i  https://wb6w08eb31.execute-api.us-east-1.amazonaws.com/dev/hello
HTTP/2 200
date: Sun, 15 Apr 2018 00:49:26 GMT
content-type: application/json
content-length: 0
x-amzn-requestid: d8ea6b1b-4046-11e8-97a5-4d3c440fb2a7
x-amz-apigw-id: FW4vhFdvoAMFRbQ=
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;whitelist-the-api&quot;&gt;Whitelist the API&lt;/h2&gt;

&lt;p&gt;We will set up a whitelist where it is only accessible from our IP address. You can use a service like &lt;a href=&quot;http://www.whatsmyip.org/&quot;&gt;whatsmyip&lt;/a&gt; to get your IP address. If you’re like me and prefer command line, here it is -&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ dig +short myip.opendns.com @resolver1.opendns.com
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we will whitelist this IP address. Click &lt;code class=&quot;highlighter-rouge&quot;&gt;Resource Policy&lt;/code&gt; from the left menu.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/apigw/empty_resource_policy.png&quot; alt=&quot;apipw-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We will now need the ARN of the API method to build a policy. To get the ARN, go back to the stage page, and copy the ARN of the method.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/apigw/copy_method_arn.png&quot; alt=&quot;apipw-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once copied, replace the ARN and IP placeholders below with the method ARN and your IP address respectively.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2012-10-17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Statement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Principal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;execute-api:Invoke&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;REPLACE_ME_WITH_METHOD_ARN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Condition&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;IpAddress&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;aws:SourceIp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;REPLACE_ME_WITH_YOUR_IP&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We now need to &lt;em&gt;redeploy&lt;/em&gt; the API. Unlike IAM where policies take affect immediately, I could not see the Resource Policy behaving the same way.&lt;/p&gt;

&lt;p&gt;Redeploy the API using the &lt;code class=&quot;highlighter-rouge&quot;&gt;dev&lt;/code&gt; stage. This will not change the URL.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/apigw/redeploy_after_change.png&quot; alt=&quot;apipw-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Thats it! The IP address is whitelisted. We can verify this via &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I used my wireless provider to check and ensure any other IP address is blocked from accessing the API. &lt;em&gt;Be sure to turn off the phone’s wifi if using this method.&lt;/em&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/apigw/blocked_url.jpeg&quot; alt=&quot;apipw-1&quot; height=&quot;50%&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Alternatively, you can switch to a different network, or IM the URL to a friend who is not sharing the same network to verify.&lt;/p&gt;

&lt;h1 id=&quot;gotchas-and-tips&quot;&gt;Gotchas and Tips&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Any changes to the Resource Policy will not reflect unless the API is redeployed as shown above.&lt;/li&gt;
  &lt;li&gt;I could not find a way to attach the Resource Policy to the API in &lt;a href=&quot;https://www.serverless.com&quot;&gt;Serverless Framework&lt;/a&gt;. &lt;strong&gt;Edit: This feature is now available in the latest Serverless Framework Version, with &lt;a href=&quot;https://github.com/serverless/serverless/pull/5071&quot;&gt;this merged PR&lt;/a&gt;.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;The API Gateway Endpoints cannot be restricted to whitelist the VPC using this technique. The endpoints are still public, and they will only see the NAT Gateway EIP as the inbound request.&lt;/li&gt;
  &lt;li&gt;If an EC2 instance is accessing the API, the API Gateway will use it’s Public IP to evaluate the resource policy.&lt;/li&gt;
  &lt;li&gt;Wildcards can be used for the resource ARN in the policy, like &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Resource&quot;: &quot;arn:aws:execute-api:us-east-1:12345678900:*:*&quot;&lt;/code&gt; would apply the policy for all the API resources under the account ID &lt;code class=&quot;highlighter-rouge&quot;&gt;12345678900&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;It does take a 30-60 seconds for the change to be reflected after deploying the API. Make sure you’re using incognito mode or curl to avoid any browser caching.&lt;/li&gt;
  &lt;li&gt;The same example above can be used to blacklist IP addresses, by replacing the &lt;code class=&quot;highlighter-rouge&quot;&gt;Allow&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;Deny&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 style=&quot;text-align: center&quot; id=&quot;comments&quot;&gt;Comments&lt;/h3&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = &quot;https://lobster1234.github.io/2018/04/14/amazon-api-gateway-ip-whitelisting/&quot;;  
this.page.identifier = &quot;/2018/04/14/amazon-api-gateway-ip-whitelisting&quot;;
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://lobster1234.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;


      

&lt;/script&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      

      

      
        <summary type="html">Amazon API Gateway is a great way to wrap Lambda functions as microservices exposed over HTTP/S, among many uses. However, any API Gateway endpoint is publically accessible. There are ways to restrict access using IAM and Authorizers, but for simple task of IP whitelisting was always somewhat challenging, if not downright hack-y. Recently AWS announced Resource Policies for API Gateway, which make IP whitelisting a breeze. This is extremely helpful for a company such as mine, as we deal with a lot of integrations that rely on IP whitelisting as one of the many layers of security. In this post I will walk through setting up IP whitelisting on an API hosted on API Gateway. We will use API Gateway’s built in Mock API feature to create a simple API, and secure it via IP Whitelisting.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Running ElasticMQ in ECS</title>
      
      
      <link href="https://lobster1234.github.io/2018/04/01/elasticmq-docker-ecs/" rel="alternate" type="text/html" title="Running ElasticMQ in ECS" />
      
      <published>2018-04-01T00:44:37-07:00</published>
      <updated>2018-04-01T00:44:37-07:00</updated>
      <id>https://lobster1234.github.io/2018/04/01/elasticmq-docker-ecs</id>
      <content type="html" xml:base="https://lobster1234.github.io/2018/04/01/elasticmq-docker-ecs/">&lt;p&gt;This post is an overview on running &lt;a href=&quot;https://github.com/adamw/elasticmq&quot;&gt;ElasticMQ&lt;/a&gt; in &lt;a href=&quot;https://aws.amazon.com/ecs/&quot;&gt;Amazon ECS&lt;/a&gt;. This can help &lt;em&gt;simulate&lt;/em&gt; &lt;a href=&quot;https://aws.amazon.com/sqs/&quot;&gt;SQS&lt;/a&gt; for development purposes, and running it in ECS would help with resourcing, as well as having an ALB to act as an &lt;code class=&quot;highlighter-rouge&quot;&gt;endpoint-url&lt;/code&gt;. I’ve used EC2 and not &lt;a href=&quot;https://aws.amazon.com/fargate/&quot;&gt;Fargate&lt;/a&gt;, but this can just as easily be launched as a Fargate task. While there is also &lt;a href=&quot;https://localstack.cloud/&quot;&gt;localstack&lt;/a&gt;, for this particular case, I just wanted to run SQS Mock and not all other services localstack comes bundled with.&lt;/p&gt;

&lt;p&gt;Familiarity with ECS, specially around creating Task Definitions, Services, and associating them with Application Load Balancers will definitely help.&lt;/p&gt;

&lt;!--more--&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Github Repository is &lt;a href=&quot;https://github.com/lobster1234/elasticmq-docker&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;p&gt;First off, we create a custom configuration for ElasticMQ, mostly to ensure that the endpoint URL is different than &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost&lt;/code&gt;, and maps to whatever ALB this service runs as.&lt;/p&gt;

&lt;p&gt;Here is the custom configuration:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;include classpath(&quot;application.conf&quot;)

node-address {
    protocol = http
    host = &quot;*&quot;
    port = 9324
    context-path = &quot;&quot;
}

rest-sqs {
    enabled = true
    bind-port = 9324
    bind-hostname = &quot;0.0.0.0&quot;
    sqs-limits = strict
}

generate-node-address = false

queues {

}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Next we create the &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM openjdk:8u151-alpine
WORKDIR /tmp
RUN wget  https://s3-eu-west-1.amazonaws.com/softwaremill-public/elasticmq-server-0.13.9.jar
COPY custom.conf /tmp/
EXPOSE 9324
CMD  java -Dconfig.file=custom.conf -jar elasticmq-server-0.13.9.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;build-and-deploy&quot;&gt;Build and Deploy&lt;/h2&gt;

&lt;p&gt;To build the docker image :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone git@github.com:lobster1234/elasticmq-docker.git
$ cd elasticmq-docker
$ docker build .
$ docker run -p9324:9324 &amp;lt;image_id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’ve pushed this image on dockerhub as &lt;code class=&quot;highlighter-rouge&quot;&gt;lobster1234/elasticmq-docker&lt;/code&gt;. This can be used in ECS while creating the container definition.&lt;/p&gt;

&lt;p&gt;As a reference, here is the task definition JSON for ECS.  As you can see, I’ve used &lt;code class=&quot;highlighter-rouge&quot;&gt;256MB&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;128vCPU&lt;/code&gt; for this task. I’ve also used us-east-1, and called the task as &lt;code class=&quot;highlighter-rouge&quot;&gt;elasticmq&lt;/code&gt;. Everything else is default ECS including log driver and IAM roles, etc.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;executionRoleArn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arn:aws:iam::ACCOUNT_ID_HERE:role/ecsTaskExecutionRole&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;containerDefinitions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;dnsSearchDomains&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;logConfiguration&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;logDriver&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;awslogs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;options&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;awslogs-group&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/ecs/elasticmq&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;awslogs-region&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;us-east-1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;awslogs-stream-prefix&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ecs&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;entryPoint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;portMappings&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;hostPort&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;protocol&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tcp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;containerPort&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9324&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;linuxParameters&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;cpu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;environment&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ulimits&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;dnsServers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;mountPoints&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;workingDirectory&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;dockerSecurityOptions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;memory&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;memoryReservation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;volumesFrom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;image&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lobster1234/elasticmq-docker&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;disableNetworking&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;healthCheck&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;essential&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;links&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;hostname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;extraHosts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;readonlyRootFilesystem&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;dockerLabels&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;privileged&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;elasticmq-container&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;placementConstraints&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;memory&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;256&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;taskRoleArn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arn:aws:iam::ACCOUNT_ID_HERE:role/ecsTaskExecutionRole&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;compatibilities&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;EC2&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;taskDefinitionArn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arn:aws:ecs:us-east-1:ACCOUNT_ID_HERE:task-definition/elasticmq:1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;family&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;elasticmq&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;requiresAttributes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;targetId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;targetType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;com.amazonaws.ecs.capability.task-iam-role&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;targetId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;targetType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ecs.capability.execution-role-awslogs&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;targetId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;targetType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;com.amazonaws.ecs.capability.logging-driver.awslogs&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;targetId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;targetType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;com.amazonaws.ecs.capability.docker-remote-api.1.19&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;requiresCompatibilities&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;EC2&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;networkMode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bridge&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;cpu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;128&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;revision&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ACTIVE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;volumes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Next, you’d create an ECS Service using this task definition.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When you’d create a service using this task, create only 1 instance. You’d create a new listener on the ALB (preferably &lt;code class=&quot;highlighter-rouge&quot;&gt;port 9324&lt;/code&gt;) with path as &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;. Please edit the health check for the target group to check for a &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP 404&lt;/code&gt; and NOT &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP 200&lt;/code&gt; under &lt;code class=&quot;highlighter-rouge&quot;&gt;Success Codes&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If not, then you’d end up getting unhealthy hosts and infinite drain and initial cycles.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;verify&quot;&gt;Verify&lt;/h2&gt;

&lt;p&gt;I’ll use &lt;a href=&quot;https://github.com/awslabs/aws-shell&quot;&gt;aws-shell&lt;/a&gt; to verify that our ElasticMQ service is working as we expect.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sqs create-queue --queue-name manish_test_queue --endpoint-url http://your_alb_dns_name:9324
{
    &quot;QueueUrl&quot;: &quot;http://your_alb_dns_name:9324/queue/manish_test_queue&quot;
}
aws&amp;gt; sqs list-queues --endpoint-url http://your_alb_dns_name:9324
{
    &quot;QueueUrls&quot;: [
        &quot;http://your_alb_dns_name:9324/queue/manish_test_queue&quot;
    ]
}

aws&amp;gt; sqs send-message --queue-url http://your_alb_dns_name:9324/queue/manish_test_queue --endpoint-url http://your_alb_dns_name:9324 --message-body &quot;foo&quot;
{
    &quot;MD5OfMessageBody&quot;: &quot;acbd18db4cc2f85cedef654fccc4a4d8&quot;,
    &quot;MD5OfMessageAttributes&quot;: &quot;d41d8cd98f00b204e9800998ecf8427e&quot;,
    &quot;MessageId&quot;: &quot;671a0afc-56b3-4db0-8b7b-e8a1fedf574f&quot;
}

aws&amp;gt; sqs receive-message --queue-url http://your_alb_dns_name:9324/queue/manish_test_queue --endpoint-url http://your_alb_dns_name:9324
{
    &quot;Messages&quot;: [
        {
            &quot;Body&quot;: &quot;foo&quot;,
            &quot;ReceiptHandle&quot;: &quot;671a0afc-56b3-4db0-8b7b-e8a1fedf574f#ebff7f56-626c-409c-bc56-8c2ea509cff9&quot;,
            &quot;MD5OfBody&quot;: &quot;acbd18db4cc2f85cedef654fccc4a4d8&quot;,
            &quot;MessageId&quot;: &quot;671a0afc-56b3-4db0-8b7b-e8a1fedf574f&quot;
        }
    ]
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Hope this helps with running ElasticMQ under ECS. Questions or comments? Please let me know!&lt;/p&gt;

&lt;h3 style=&quot;text-align: center&quot; id=&quot;comments&quot;&gt;Comments&lt;/h3&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = &quot;https://lobster1234.github.io/2018/04/01/elasticmq-docker-ecs/&quot;;  
this.page.identifier = &quot;/2018/04/01/elasticmq-docker-ecs&quot;;
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://lobster1234.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;


      

&lt;/script&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      

      

      
        <summary type="html">This post is an overview on running ElasticMQ in Amazon ECS. This can help simulate SQS for development purposes, and running it in ECS would help with resourcing, as well as having an ALB to act as an endpoint-url. I’ve used EC2 and not Fargate, but this can just as easily be launched as a Fargate task. While there is also localstack, for this particular case, I just wanted to run SQS Mock and not all other services localstack comes bundled with. Familiarity with ECS, specially around creating Task Definitions, Services, and associating them with Application Load Balancers will definitely help.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Disaster Recovery and Reliability</title>
      
      
      <link href="https://lobster1234.github.io/2018/03/25/disaster-recovery-hybrid-cloud/" rel="alternate" type="text/html" title="Disaster Recovery and Reliability" />
      
      <published>2018-03-25T00:44:37-07:00</published>
      <updated>2018-03-25T00:44:37-07:00</updated>
      <id>https://lobster1234.github.io/2018/03/25/disaster-recovery-hybrid-cloud</id>
      <content type="html" xml:base="https://lobster1234.github.io/2018/03/25/disaster-recovery-hybrid-cloud/">&lt;p&gt;Presentation on Disaster Recovery and Reliability.&lt;/p&gt;

&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/o7ivYEZ6XB28oz&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt;
&lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;//www.slideshare.net/lobster1234/disaster-recovery-and-reliability&quot; title=&quot;Disaster Recovery and Reliability&quot; target=&quot;_blank&quot;&gt;Disaster Recovery and Reliability&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/lobster1234&quot; target=&quot;_blank&quot;&gt;Manish Pandit&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

&lt;!--more--&gt;

&lt;h3 style=&quot;text-align: center&quot; id=&quot;comments&quot;&gt;Comments&lt;/h3&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = &quot;https://lobster1234.github.io/2018/03/25/disaster-recovery-hybrid-cloud/&quot;;  
this.page.identifier = &quot;/2018/03/25/disaster-recovery-hybrid-cloud&quot;;
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://lobster1234.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;


      

&lt;/script&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      

      

      
        <summary type="html">Presentation on Disaster Recovery and Reliability. Disaster Recovery and Reliability from Manish Pandit</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">OAuth2 Primer</title>
      
      
      <link href="https://lobster1234.github.io/2018/03/19/oauth2-primer/" rel="alternate" type="text/html" title="OAuth2 Primer" />
      
      <published>2018-03-19T00:44:37-07:00</published>
      <updated>2018-03-19T00:44:37-07:00</updated>
      <id>https://lobster1234.github.io/2018/03/19/oauth2-primer</id>
      <content type="html" xml:base="https://lobster1234.github.io/2018/03/19/oauth2-primer/">&lt;p&gt;First post of the year 2018, here is the presentation for a tech talk on OAuth2 at Marqeta HQ.&lt;/p&gt;

&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/5IAhwtJujv4ySU&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt;
&lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;//www.slideshare.net/lobster1234/oauth2-primer&quot; title=&quot;OAuth2 primer&quot; target=&quot;_blank&quot;&gt;OAuth2 primer&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/lobster1234&quot; target=&quot;_blank&quot;&gt;Manish Pandit&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

&lt;!--more--&gt;

&lt;h3 style=&quot;text-align: center&quot; id=&quot;comments&quot;&gt;Comments&lt;/h3&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = &quot;https://lobster1234.github.io/2018/03/19/oauth2-primer/&quot;;  
this.page.identifier = &quot;/2018/03/19/oauth2-primer&quot;;
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://lobster1234.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;


      

&lt;/script&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="oauth" />
      

      

      
        <summary type="html">First post of the year 2018, here is the presentation for a tech talk on OAuth2 at Marqeta HQ. OAuth2 primer from Manish Pandit</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Multiple Functions in Serverless Framework with Java</title>
      
      
      <link href="https://lobster1234.github.io/2017/12/26/serverless-java-multiple-functions/" rel="alternate" type="text/html" title="Multiple Functions in Serverless Framework with Java" />
      
      <published>2017-12-26T22:44:37-08:00</published>
      <updated>2017-12-26T22:44:37-08:00</updated>
      <id>https://lobster1234.github.io/2017/12/26/serverless-java-multiple-functions</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/12/26/serverless-java-multiple-functions/">&lt;p&gt;&lt;a href=&quot;https://serverless.com&quot;&gt;Serverless Framework&lt;/a&gt; is an excellent choice for writing and deploying Lambda Functions in AWS. Having written a &lt;a href=&quot;https://lobster1234.github.io/categories/lambda/&quot;&gt;blog series&lt;/a&gt; on using it with Java8+Maven, I’ve been asked if there is a way to not have &lt;em&gt;too many&lt;/em&gt; handlers (One per API), and somehow provide multiple handler functions in the same java class. In this post I provide the structure that’d allow for multiple handlers using a single Java class.&lt;/p&gt;

&lt;p&gt;This is particularly useful when the code is tightly coupled around a resource (CRUD) and writing a &lt;em&gt;handler&lt;/em&gt; class for each of C, R, U, D seems un-necessary, like it should.
&lt;!--more--&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make sure you’ve Serverless installed, and the AWS CLI is configured with the necessary policies.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ serverless -v
1.26.0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;Please ensure your serverless is at least 1.26.0 - There was a fairly hacky way to do this before &lt;a href=&quot;https://github.com/serverless/serverless/pull/4596&quot;&gt;this pull request&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Create a boilerplate serverless AWS Java8 Maven project.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ mkdir multiple-handlers
bash-3.2$ cd multiple-handlers/
bash-3.2$ serverless create --template aws-java-maven
Serverless: Generating boilerplate...
Serverless: Successfully generated boilerplate for template: &quot;aws-java-maven&quot;
Serverless: NOTE: Please update the &quot;service&quot; property in serverless.yml with your service name
bash-3.2$ tree
.
├── pom.xml
├── serverless.yml
└── src
    └── main
        ├── java
        │   └── com
        │       └── serverless
        │           ├── ApiGatewayResponse.java
        │           ├── Handler.java
        │           └── Response.java
        └── resources
            └── log4j.properties

6 directories, 6 files
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Check the &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless.yml&lt;/code&gt;, if you ignore all the comments, this is what it looks like -&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aws-java-maven&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# NOTE: update this with your service name&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aws&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;runtime&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;java8&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# you can add packaging information here&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;artifact&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;target/hello-dev.jar&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;functions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;com.serverless.Handler&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;package&lt;/code&gt; section is what tells serverless to locate the artifacts.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Let’s add another function to the auto-generated &lt;code class=&quot;highlighter-rouge&quot;&gt;Handler&lt;/code&gt; class, which already has one function defined called &lt;code class=&quot;highlighter-rouge&quot;&gt;handleRequest&lt;/code&gt; which maps to the lambda function &lt;code class=&quot;highlighter-rouge&quot;&gt;hello&lt;/code&gt;, as noticed in the &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless.yml&lt;/code&gt; above.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will add a new method called &lt;code class=&quot;highlighter-rouge&quot;&gt;handleAnotherRequest&lt;/code&gt; in the same class. To differentiate the output, we’ll change the &lt;code class=&quot;highlighter-rouge&quot;&gt;Response&lt;/code&gt; to output a different string than the auto-generated method. I replaced &lt;code class=&quot;highlighter-rouge&quot;&gt;Your&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;Another&lt;/code&gt; in the new method.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ vi src/main/java/com/serverless/Handler.java
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;serverless&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.log4j.BasicConfigurator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.log4j.Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.amazonaws.services.lambda.runtime.Context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.amazonaws.services.lambda.runtime.RequestHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Handler&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApiGatewayResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApiGatewayResponse&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;BasicConfigurator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;received: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseBody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Go Serverless v1.x! Your function executed successfully!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApiGatewayResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setStatusCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;singletonMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-Powered-By&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;AWS Lambda &amp;amp; serverless&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApiGatewayResponse&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleAnotherRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseBody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Go Serverless v1.x! Another function executed successfully!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApiGatewayResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setStatusCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;singletonMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-Powered-By&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;AWS Lambda &amp;amp; serverless&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;We then define the individual functions, like so -
    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;functions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;com.serverless.Handler::handleRequest&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;hello2&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;com.serverless.Handler::handleAnotherRequest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notice that we’ve added another function, &lt;code class=&quot;highlighter-rouge&quot;&gt;hello2&lt;/code&gt; which has the same class, but maps to a different handler method.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Now we’re ready to deploy and invoke the functions.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;This does not work with &lt;code class=&quot;highlighter-rouge&quot;&gt;invoke local&lt;/code&gt; as of this writing (1.26.0).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We need to build the project using &lt;code class=&quot;highlighter-rouge&quot;&gt;mvn&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ mvn clean install
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building hello dev
[INFO] ------------------------------------------------------------------------
[INFO]
......
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 3.304 s
[INFO] Finished at: 2018-01-15T18:12:53-08:00
[INFO] Final Memory: 25M/310M
[INFO] ------------------------------------------------------------------------
bash-3.2$
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Now we deploy -&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ serverless deploy
Serverless: Packaging service...
Serverless: Uploading CloudFormation file to S3...
Serverless: Uploading artifacts...
Serverless: Validating template...
Serverless: Updating Stack...
Serverless: Checking Stack update progress...
...............
Serverless: Stack update finished...
Service Information
service: aws-java-maven
stage: dev
region: us-east-1
stack: aws-java-maven-dev
api keys:
  None
endpoints:
  None
functions:
  hello: aws-java-maven-dev-hello
  hello2: aws-java-maven-dev-hello2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Finally, we can test -&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash-3.2$ serverless invoke -f hello
{
    &quot;statusCode&quot;: 200,
    &quot;body&quot;: &quot;{\&quot;message\&quot;:\&quot;Go Serverless v1.x! Your function executed successfully!\&quot;,\&quot;input\&quot;:{}}&quot;,
    &quot;headers&quot;: {
        &quot;X-Powered-By&quot;: &quot;AWS Lambda &amp;amp; serverless&quot;
    },
    &quot;isBase64Encoded&quot;: false
}
bash-3.2$ serverless invoke -f hello2
{
    &quot;statusCode&quot;: 200,
    &quot;body&quot;: &quot;{\&quot;message\&quot;:\&quot;Go Serverless v1.x! Another function executed successfully!\&quot;,\&quot;input\&quot;:{}}&quot;,
    &quot;headers&quot;: {
        &quot;X-Powered-By&quot;: &quot;AWS Lambda &amp;amp; serverless&quot;
    },
    &quot;isBase64Encoded&quot;: false
}
bash-3.2$
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;As you can notice, the two functions can be invoked using their function names, while residing in the same &lt;code class=&quot;highlighter-rouge&quot;&gt;Handler&lt;/code&gt; class. This is pretty useful when creating &lt;code class=&quot;highlighter-rouge&quot;&gt;CRUD&lt;/code&gt; operations on resources without having to create a &lt;code class=&quot;highlighter-rouge&quot;&gt;Handler&lt;/code&gt; class for each method.&lt;/p&gt;

&lt;p&gt;Found this useful? Let me know in the comments below!&lt;/p&gt;

&lt;h3 style=&quot;text-align: center&quot; id=&quot;comments&quot;&gt;Comments&lt;/h3&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = &quot;https://lobster1234.github.io/2017/12/26/serverless-java-multiple-functions/&quot;;  
this.page.identifier = &quot;/2017/12/26/serverless-java-multiple-functions&quot;;
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://lobster1234.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;


      

&lt;/script&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      
        <category term="lambda" />
      

      

      
        <summary type="html">Serverless Framework is an excellent choice for writing and deploying Lambda Functions in AWS. Having written a blog series on using it with Java8+Maven, I’ve been asked if there is a way to not have too many handlers (One per API), and somehow provide multiple handler functions in the same java class. In this post I provide the structure that’d allow for multiple handlers using a single Java class. This is particularly useful when the code is tightly coupled around a resource (CRUD) and writing a handler class for each of C, R, U, D seems un-necessary, like it should.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">HTTP/S Proxy Server for AWS Lambda Invocations</title>
      
      
      <link href="https://lobster1234.github.io/2017/12/14/aws-lambda-http-proxy/" rel="alternate" type="text/html" title="HTTP/S Proxy Server for AWS Lambda Invocations" />
      
      <published>2017-12-14T22:44:37-08:00</published>
      <updated>2017-12-14T22:44:37-08:00</updated>
      <id>https://lobster1234.github.io/2017/12/14/aws-lambda-http-proxy</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/12/14/aws-lambda-http-proxy/">&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/lambda/&quot;&gt;Lambda Functions&lt;/a&gt; are a FaaS implementation on Amazon Web Services. Setting them as HTTP/S endpoints over API Gateway can be complicated, and more often than not is an overkill for simple, internal APIs.
Besides, API Gateway endpoints for Lambda are public, no matter how we slice and dice it. The recently announced VPC Link for API Gateway only allows the endpoints to route to a NLB target, not a Lambda.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/lobster1234/lambda-proxy&quot;&gt;This&lt;/a&gt; is a lightweight HTTP/S proxy written in Java, which wraps a lambda invocation, mimicking the API Gateway-Lambda Proxy Integration.&lt;/p&gt;

&lt;!--more--&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;/function&lt;/code&gt; endpoint supports &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;DELETE&lt;/code&gt;. Any request sent to this endpoint is wrapped as &lt;a href=&quot;https://github.com/aws/aws-lambda-java-libs/blob/master/aws-lambda-java-events/src/main/java/com/amazonaws/services/lambda/runtime/events/APIGatewayProxyRequestEvent.java&quot;&gt;APIGatewayProxyRequestEvent&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Response from the Lambda is wrapped as &lt;a href=&quot;https://github.com/aws/aws-lambda-java-libs/blob/master/aws-lambda-java-events/src/main/java/com/amazonaws/services/lambda/runtime/events/APIGatewayProxyResponseEvent.java&quot;&gt;APIGatewayProxyResponseEvent&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is the &lt;a href=&quot;http://docs.aws.amazon.com/lambda/latest/dg/eventsources.html&quot;&gt;documentation&lt;/a&gt; and samples of various events (this proxy only supports APIGatewayProxy events).&lt;/p&gt;

&lt;p&gt;The request path, headers, HTTP method, querystring, body, etc. become a part of the event request that is sent to the Lambda &lt;em&gt;as-is&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;An alternative is to call Lambdas from within the code using AWS SDKs. However, having a proxy helps with centralizing monitoring (like NewRelic), security via IAM roles, and logging, making the infrastructure more manageable.&lt;/p&gt;

&lt;h3 id=&quot;api&quot;&gt;API&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET /healthcheck&lt;/code&gt; - Used by the load balancer&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET /functions&lt;/code&gt; - Get a list of lambda functions&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET | PUT | POST | DELETE  /function&lt;/code&gt; - Invoke the Lambda Function named in the header &lt;code class=&quot;highlighter-rouge&quot;&gt;x-lambda-function-name&lt;/code&gt;. This header can also contain the ARN of the function.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;deployment&quot;&gt;Deployment&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git clone git@github.com:lobster1234/lambda-proxy.git
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;lambda-proxy
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mvn clean install jetty:run
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will run the lambda proxy server on jetty, port 8080.&lt;/p&gt;

&lt;p&gt;To deploy in Tomcat, copy &lt;code class=&quot;highlighter-rouge&quot;&gt;target/lambda-proxy-1.0-SNAPSHOT.war&lt;/code&gt; and copy it to &lt;code class=&quot;highlighter-rouge&quot;&gt;$TOMCAT_HOME/webapps&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;lambda-proxy.war&lt;/code&gt; for the context &lt;code class=&quot;highlighter-rouge&quot;&gt;lambda-proxy&lt;/code&gt; or as &lt;code class=&quot;highlighter-rouge&quot;&gt;ROOT.war&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;iam-policy&quot;&gt;IAM Policy&lt;/h3&gt;

&lt;p&gt;If this proxy will run in an autoscaling group in AWS (recommended), create a role with the below inline policy for the instances -&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2012-10-17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Statement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Sid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;InvokePermission&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lambda:InvokeFunction&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lambda:ListFunctions&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If on-prem or on a laptop, attach the above policy to the IAM user whose credentials will sit in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.aws/credentials&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;usage&quot;&gt;Usage&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Healtcheck for LBs&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;curl -i http://localhost:8080/healthcheck
HTTP/1.1 200 OK
Date: Tue, 12 Dec 2017 02:17:31 GMT
Content-Type: text/html; &lt;span class=&quot;nv&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;UTF-8
Transfer-Encoding: chunked
Server: Apache Tomcat/8.5.11

OK
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Get a list of lambda functions&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;curl -i http://localhost:8080/functions
HTTP/1.1 200 OK
Date: Tue, 12 Dec 2017 02:19:07 GMT
Content-Type: application/json
Transfer-Encoding: chunked
Server: Apache Tomcat/8.5.11

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;functionName&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;internal-api-function&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;functionArn&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;arn:aws:lambda:us-east-1:************:function:internal-api-function&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;runtime&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;python3.6&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;role&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;arn:aws:iam::************:role/lambda_basic_execution&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;handler&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;lambda_function.lambda_handler&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;codeSize&quot;&lt;/span&gt;: 224,
    &lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;timeout&quot;&lt;/span&gt;: 3,
    &lt;span class=&quot;s2&quot;&gt;&quot;memorySize&quot;&lt;/span&gt;: 128,
    &lt;span class=&quot;s2&quot;&gt;&quot;lastModified&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;2017-12-11T21:29:15.067+0000&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;codeSha256&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;LatqSbOH1YVr/D1eQBdPdTxeBP9RN2HvcsQ4zq5kSBA=&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LATEST&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; ..... &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,


 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Invoke a lambda function&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;curl -i -X POST http://localhost:8080/function -H &lt;span class=&quot;s1&quot;&gt;'x-lambda-function-name:internal-api-function'&lt;/span&gt;
  HTTP/1.1 200
  Content-Type: application/json
  Transfer-Encoding: chunked
  Date: Fri, 08 Dec 2017 09:22:43 GMT
  Server: Apache Tomcat/8.5.11

  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;s2&quot;&gt;&quot;statusCode&quot;&lt;/span&gt;:200,
     &lt;span class=&quot;s2&quot;&gt;&quot;headers&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Connection&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;keep-alive&quot;&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;Content-Length&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;32&quot;&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;application/json&quot;&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;Date&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;Tue, 12 Dec 2017 02:37:26 GMT&quot;&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;X-Amz-Executed-Version&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LATEST&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;x-amzn-Remapped-Content-Length&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;x-amzn-RequestId&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;63fb9b2a-dee5-11e7-b8f2-d9f80d0f5343&quot;&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;X-Amzn-Trace-Id&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;root&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\u&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;003d1-5a2f40e6-52ae1b8237280e7433c44129;sampled&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\u&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;003d0&quot;&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
     &lt;span class=&quot;s2&quot;&gt;&quot;body&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;{&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Hello from Lambda&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;}&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;typical-deployment-in-aws&quot;&gt;Typical Deployment in AWS&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/lambda_proxy.png&quot; alt=&quot;AWS Deployment&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;errors&quot;&gt;Errors&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Missing function name&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;curl -i  http://localhost:8080/function                                          
HTTP/1.1 400
Content-Type: application/json
Transfer-Encoding: chunked
Date: Sat, 09 Dec 2017 03:53:12 GMT
Connection: close
Server: Apache Tomcat/8.5.11

&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;s2&quot;&gt;&quot;statusCode&quot;&lt;/span&gt;:400,
   &lt;span class=&quot;s2&quot;&gt;&quot;body&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;{&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Must provide x-lambda-function-name header&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;}}&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Function Not Found&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;curl -i -X POST http://localhost:8080/function -H &lt;span class=&quot;s1&quot;&gt;'x-lambda-function-name:internal-api-func'&lt;/span&gt;
HTTP/1.1 404
Content-Type: application/json
Transfer-Encoding: chunked
Date: Fri, 08 Dec 2017 10:00:01 GMT
Server: Apache Tomcat/8.5.11

&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;s2&quot;&gt;&quot;statusCode&quot;&lt;/span&gt;:404,
   &lt;span class=&quot;s2&quot;&gt;&quot;body&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;Function not found: arn:aws:lambda:us-east-1:************:function:internal-api-func
   (Service: AWSLambda; Status Code: 404; Error Code: ResourceNotFoundException;
   Request ID: 324e3566-dee6-11e7-a4b9-4b1d43c1a0fb)&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Runtime Failure&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;curl -i -X POST http://localhost:8080/function -H &lt;span class=&quot;s1&quot;&gt;'x-lambda-function-name:getBankTransactions-dev-get-accounts'&lt;/span&gt;
HTTP/1.1 500
Content-Type: application/json
Transfer-Encoding: chunked
Date: Fri, 08 Dec 2017 09:56:01 GMT
Connection: close
Server: Apache Tomcat/8.5.11

&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;s2&quot;&gt;&quot;statusCode&quot;&lt;/span&gt;:500,
   &lt;span class=&quot;s2&quot;&gt;&quot;headers&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;Connection&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;keep-alive&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;Content-Length&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;977&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;application/json&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;Date&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;Tue, 12 Dec 2017 02:45:17 GMT&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;X-Amz-Executed-Version&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LATEST&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;X-Amz-Function-Error&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;Unhandled&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;x-amzn-Remapped-Content-Length&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;x-amzn-RequestId&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;7a631eae-dee6-11e7-8086-336ec7993e7e&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;X-Amzn-Trace-Id&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;root&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\u&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;003d1-5a2f42b9-345e852014cba0137b8dc18a;sampled&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\u&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;003d0&quot;&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
   &lt;span class=&quot;s2&quot;&gt;&quot;body&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;{&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;errorMessage&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;java.lang.ExceptionInInitializerError&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;errorType&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:
   &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;java.lang.ExceptionInInitializerError&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;stackTrace&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;com.serverless.foo.AccountsHandler.handleRequest
   (AccountsHandler.java:34)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;cause&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;errorMessage&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;com.serverless.foo.ApplicationException:
   Bad Request&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;errorType&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;java.lang.RuntimeException&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;stackTrace&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;]}}}&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 style=&quot;text-align: center&quot; id=&quot;comments&quot;&gt;Comments&lt;/h3&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = &quot;https://lobster1234.github.io/2017/12/14/aws-lambda-http-proxy/&quot;;  
this.page.identifier = &quot;/2017/12/14/aws-lambda-http-proxy&quot;;
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://lobster1234.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;


      

&lt;/script&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      
        <category term="lambda" />
      

      

      
        <summary type="html">Lambda Functions are a FaaS implementation on Amazon Web Services. Setting them as HTTP/S endpoints over API Gateway can be complicated, and more often than not is an overkill for simple, internal APIs. Besides, API Gateway endpoints for Lambda are public, no matter how we slice and dice it. The recently announced VPC Link for API Gateway only allows the endpoints to route to a NLB target, not a Lambda. This is a lightweight HTTP/S proxy written in Java, which wraps a lambda invocation, mimicking the API Gateway-Lambda Proxy Integration.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Run tasks with AWS Fargate and Lambda</title>
      
      
      <link href="https://lobster1234.github.io/2017/12/03/run-tasks-with-aws-fargate-and-lambda/" rel="alternate" type="text/html" title="Run tasks with AWS Fargate and Lambda" />
      
      <published>2017-12-03T22:44:37-08:00</published>
      <updated>2017-12-03T22:44:37-08:00</updated>
      <id>https://lobster1234.github.io/2017/12/03/run-tasks-with-aws-fargate-and-lambda</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/12/03/run-tasks-with-aws-fargate-and-lambda/">&lt;p&gt;As with any other financial company, at &lt;a href=&quot;https://www.marqeta.com&quot;&gt;Marqeta&lt;/a&gt;, we have a good number of batch jobs, which we are migrating over to &lt;a href=&quot;https://aws.amazon.com/batch/&quot;&gt;AWS Batch&lt;/a&gt;. However, even in managed mode, AWS Batch needs us to define &lt;a href=&quot;http://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html&quot;&gt;Compute Environments&lt;/a&gt;, which are clusters of EC2 instances running ECS (and Docker) agents.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/fargate/&quot;&gt;AWS Fargate&lt;/a&gt; was &lt;a href=&quot;https://aws.amazon.com/blogs/compute/aws-fargate-a-product-overview/&quot;&gt;announced&lt;/a&gt; very recently at re:Invent 2017. Fargate adds a layer of abstraction on top of the Compute Environment, or the ECS Cluster. We no longer have to worry about the AMI, EC2 types, task placement, etc. In this post I cover the POC done to use Fargate over AWS Batch for batch processing, but this can also be used as a tutorial for running any type of tasks using Fargate. We create an ECS Task definition, a Fargate Cluster, and a Lambda to run the task using CloudWatch Event trigger.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/fargate.png&quot; alt=&quot;Fargate-0&quot; /&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;setup&quot;&gt;Setup&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;We will use the AWS Console, but everything in the console can also be done via CLI. I prefer console, as this is a very new service, so we can see all the options etc. without digging in the documentation.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A docker image to act as a task. I am using a &lt;a href=&quot;https://github.com/lobster1234/dockerfiles/tree/master/python-sleep-task&quot;&gt;simple task&lt;/a&gt; that sleeps for 5 seconds and exits.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A Lambda Function to run the task.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Lambda cannot use the current &lt;a href=&quot;http://docs.aws.amazon.com/lambda/latest/dg/current-supported-versions.html&quot;&gt;Python Lambda Execution Environment&lt;/a&gt;, as at the time of writing, it is pre-installed with Boto3 1.4.7, which lacks support for Fargate tasks. So we bundle &lt;a href=&quot;http://boto3.readthedocs.io/en/latest/&quot;&gt;Boto3 1.4.8&lt;/a&gt; in the Deployment Package. Sorry, no &lt;a href=&quot;https://aws.amazon.com/cloud9/&quot;&gt;Cloud9 IDE&lt;/a&gt; here.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A VPC to tie down the task to. I use &lt;a href=&quot;https://github.com/lobster1234/my-aws-infrastructure&quot;&gt;my Terraform-based repo&lt;/a&gt; to bring up a VPC, and tear it down when done. If not, then make sure you have a public subnet, or a private subnet with NAT gateway tied to it. ECS will need to pull the container image over the internet, and will need outbound internet access to do so.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Since I am not diving deep into Task Definition, familiarity with creating one will be helpful. Refer to &lt;a href=&quot;https://lobster1234.github.io/2017/08/22/aws-ecs-notes/&quot;&gt;my earlier post&lt;/a&gt; on ECS for terminology and details.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;creating-the-docker-image&quot;&gt;Creating the Docker image&lt;/h3&gt;

&lt;p&gt;This is the task that will simulate the batch job, &lt;code class=&quot;highlighter-rouge&quot;&gt;task.py&lt;/code&gt; -&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Task starting..'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Task ended, took 5 seconds'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And this is the Dockerfile -&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM python:3.7.0a2-alpine3.6
COPY task.py /tmp
CMD python /tmp/task.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Next, we go ahead and build, and test the image.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker build .                              
Sending build context to Docker daemon  4.096kB
Step 1/3 : FROM python:3.7.0a2-alpine3.6
 ---&amp;gt; e0e4e8202722
Step 2/3 : COPY task.py /tmp
 ---&amp;gt; 1a8de050909f
Step 3/3 : CMD python /tmp/task.py
 ---&amp;gt; Running in aad2bec4df49
 ---&amp;gt; 65852146fb13
Removing intermediate container aad2bec4df49
Successfully built 65852146fb13

$ docker run 65852146fb13
Task starting..
Task ended, took 5 seconds
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Now we can tag and push this image to ECR repo. Create a repo called &lt;code class=&quot;highlighter-rouge&quot;&gt;python-batch-job&lt;/code&gt; in &lt;a href=&quot;https://console.aws.amazon.com/ecs/home?region=us-east-1#/repositories&quot;&gt;ECR&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker tag 65852146fb13 python-batch-job:latest
$ aws ecr get-login --no-include-email --region us-east-1
$ docker login -u AWS -p **** https://************.dkr.ecr.us-east-1.amazonaws.com
$ docker tag python-batch-job:latest ************.dkr.ecr.us-east-1.amazonaws.com/python-batch-job:latest
$ docker push ************.dkr.ecr.us-east-1.amazonaws.com/python-batch-job:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;task-definition&quot;&gt;Task Definition&lt;/h3&gt;

&lt;p&gt;We will need to create an ECR Task Definition. To do so, we head over to the &lt;a href=&quot;https://console.aws.amazon.com/ecs/home?region=us-east-1#/taskDefinitions/create&quot;&gt;ECR Console&lt;/a&gt;, and pick Fargate.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/task_definition_launch_type.png&quot; alt=&quot;Fargate-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Regarding the next steps, assuming you’re familiar with ECS Task Definitions, create a Task Definition using the container image from ECR. You can leave everything as default, and pick &lt;code class=&quot;highlighter-rouge&quot;&gt;Task Memory&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;0.5 GB&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Task CPU&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;0.25 vCPU&lt;/code&gt;. When adding the container, you can specify the Hard Limit to &lt;code class=&quot;highlighter-rouge&quot;&gt;128 MB&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; CPU Unit (under Environment).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/task_definition_detail.png&quot; alt=&quot;Fargate-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since we are not using any AWS services in the task, we do not need a Task Role. The Task Execution IAM Role is automatically assigned to this task, called &lt;code class=&quot;highlighter-rouge&quot;&gt;ecsTaskExecutionRole&lt;/code&gt; which lets the task pull the image from ECR and write to CloudWatch logs.&lt;/p&gt;

&lt;h3 id=&quot;fargate-cluster&quot;&gt;Fargate Cluster&lt;/h3&gt;

&lt;p&gt;Even though we are not really provisioning any EC2 Clusters like ECS or Batch, we still need to create a cluster. This will not have any EC2 instances. The &lt;code class=&quot;highlighter-rouge&quot;&gt;Cluster&lt;/code&gt; is still an important construct that adds a level of control for IAM policies, etc.&lt;/p&gt;

&lt;p&gt;Head over to &lt;a href=&quot;https://console.aws.amazon.com/ecs/home?region=us-east-1#/clusters/create/new&quot;&gt;ECS&lt;/a&gt;, and create a Fargate Cluster. Do not ask to create a new VPC. Call it &lt;code class=&quot;highlighter-rouge&quot;&gt;fargatecluster&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/create_fargate_cluster.png&quot; alt=&quot;Fargate-3&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;package-the-deployment&quot;&gt;Package the Deployment&lt;/h3&gt;

&lt;p&gt;We will now create a lambda function that can be called via a trigger. In case of batch, we can use CloudWatch to trigger the Lambda at the interval or cron schedule of our choice.&lt;/p&gt;

&lt;p&gt;Here is the Lambda Code to run the task, as &lt;code class=&quot;highlighter-rouge&quot;&gt;run_task.py&lt;/code&gt;. Create a folder to stick this file in.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;boto3&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boto3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ecs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cluster&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'fargatecluster'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# name of the cluster&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;launchType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'FARGATE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;taskDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'my-batch-job:1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# replace with your task definition name and revision&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;platformVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'LATEST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;networkConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'awsvpcConfiguration'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'subnets'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;'subnet-2ec3a94a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# replace with your public subnet or a private with NAT&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;'subnet-413a9c6e'&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Second is optional, but good idea to have two&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'assignPublicIp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'DISABLED'&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Next, we will use &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt; to install &lt;code class=&quot;highlighter-rouge&quot;&gt;boto3 1.4.8&lt;/code&gt; in this folder, so we can package our deployment artifact.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pip3 install boto3==1.4.8 -t .
$ zip -r /tmp/run_task_lambda.zip *
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This will create &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp/run_task_lambda.zip&lt;/code&gt; which is our deployment package.&lt;/p&gt;

&lt;h3 id=&quot;create-the-lambda-function&quot;&gt;Create the Lambda Function&lt;/h3&gt;

&lt;p&gt;The Lambda would need IAM role with 2 policies - one to run the task, and second to pass the &lt;code class=&quot;highlighter-rouge&quot;&gt;ecsTaskExecutionRole&lt;/code&gt; to the task.&lt;/p&gt;

&lt;p&gt;Create a role in IAM, called &lt;code class=&quot;highlighter-rouge&quot;&gt;run_task_lambda_role&lt;/code&gt; with the following in-line policy, replacing the &lt;code class=&quot;highlighter-rouge&quot;&gt;*****&lt;/code&gt; with your AWS Account ID.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2012-10-17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Statement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Sid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Stmt1512361420000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ecs:RunTask&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Sid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Stmt1512361593000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iam:PassRole&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arn:aws:iam::************:role/ecsTaskExecutionRole&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, we create the Lambda using the &lt;a href=&quot;https://console.aws.amazon.com/lambda/home?region=us-east-1#/create&quot;&gt;Lambda Console&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/create_lambda_function.png&quot; alt=&quot;Fargate-4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the next page, under &lt;code class=&quot;highlighter-rouge&quot;&gt;Function code&lt;/code&gt;, upload the &lt;code class=&quot;highlighter-rouge&quot;&gt;run_task_lambda.zip&lt;/code&gt;, and put &lt;code class=&quot;highlighter-rouge&quot;&gt;run_task.handler&lt;/code&gt; under &lt;code class=&quot;highlighter-rouge&quot;&gt;Handler&lt;/code&gt;. Click &lt;code class=&quot;highlighter-rouge&quot;&gt;Save&lt;/code&gt; so the package can be uploaded.&lt;/p&gt;

&lt;p&gt;Once the function is saved, click &lt;code class=&quot;highlighter-rouge&quot;&gt;Test&lt;/code&gt; to give it a shot. If all goes well, it should print something like this -&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;{'tasks': [{'taskArn': 'arn:aws:ecs:us-east-1:************:task/3f9ae8bf-207e-4956-b625-52a5a269c9a2', 'clusterArn':
'arn:aws:ecs:us-east-1:************:cluster/fargatecluster', 'taskDefinitionArn':
'arn:aws:ecs:us-east-1:************:task-definition/my-batch-job:1', 'overrides': {'containerOverrides': [{'name':
'python-batch-container'}]}, 'lastStatus': 'PROVISIONING', 'desiredStatus': 'RUNNING', 'cpu': '256', 'memory': '512',
'containers': [{'containerArn': 'arn:aws:ecs:us-east-1:************:container/fcd6372b-8884-4beb-b7f8-484e5658fec8',
'taskArn': 'arn:aws:ecs:us-east-1:************:task/3f9ae8bf-207e-4956-b625-52a5a269c9a2', 'name': 'python-batch-container',
'lastStatus': 'PENDING', 'networkInterfaces': []}], 'version': 1, 'createdAt': datetime.datetime(2017, 12, 4, 8, 4, 5, 717000,
  tzinfo=tzlocal()), 'group': 'family:my-batch-job', 'launchType': 'FARGATE', 'platformVersion': '1.0.0', 'attachments':
  [{'id': '1cfdc261-f810-4625-a070-d7596aa22eea', 'type': 'ElasticNetworkInterface', 'status': 'PRECREATED', 'details':
  [{'name': 'subnetId', 'value': 'subnet-2ec3a94a'}]}]}], 'failures': [], 'ResponseMetadata': {'RequestId':
  'b21a8d3d-d8c9-11e7-9000-014e69a44058', 'HTTPStatusCode': 200, 'HTTPHeaders': {'server': 'Server', 'date': 'Mon, 04 Dec 2017
  08:04:05 GMT', 'content-type': 'application/x-amz-json-1.1', 'content-length': '1007', 'connection': 'keep-alive',
  'x-amzn-requestid': 'b21a8d3d-d8c9-11e7-9000-014e69a44058'}, 'RetryAttempts': 0}}&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Notice the response containing details of the task, and the task state as &lt;code class=&quot;highlighter-rouge&quot;&gt;PROVISIONING&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;START RequestId: b1667f61-d8c9-11e7-9ddf-f1af7a353833 Version: $LATEST
END RequestId: b1667f61-d8c9-11e7-9ddf-f1af7a353833
REPORT RequestId: b1667f61-d8c9-11e7-9ddf-f1af7a353833	Duration: 1891.77 ms
Billed Duration: 1900 ms 	Memory Size: 128 MB	Max Memory Used: 38 MB
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can head over to ECS Console, and check the task running under the &lt;code class=&quot;highlighter-rouge&quot;&gt;fargatecluster&lt;/code&gt; details.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the task fails to run, it is very likely because it was launched in a subnet with no outbound internet access. Fix the subnets, redeploy the lambda after changing the subnet IDs in the code, and retry.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;cloudwatch-event-trigger&quot;&gt;CloudWatch Event Trigger&lt;/h3&gt;

&lt;p&gt;Now we can put this execution on a schedule using CloudWatch Events. We will create a scheduling rule, and configure it to trigger this lambda function.&lt;/p&gt;

&lt;p&gt;Click &lt;code class=&quot;highlighter-rouge&quot;&gt;Create Rule&lt;/code&gt; on the &lt;a href=&quot;https://console.aws.amazon.com/cloudwatch/home?region=us-east-1#events:&quot;&gt;CloudWatch Events&lt;/a&gt; menu to create a rule.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lobster1234.github.io/assets/cloudwatch_rule.png&quot; alt=&quot;Fargate-5&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;done&quot;&gt;Done!&lt;/h3&gt;

&lt;p&gt;We can check the task being executing every 5 minutes (or whatever you’ve configured the rule to be) by looking at the ECS cluster console, or CloudWatch logs. You can also visit the Lambda monitoring section from the Lambda console to see the duration and frequency.&lt;/p&gt;

&lt;h3 id=&quot;cleanup&quot;&gt;Cleanup&lt;/h3&gt;

&lt;p&gt;To clean up, disable or delete the scheduling rule in CloudWatch, and delete the function from the Lambda Console. Be sure to delete the rule to avoid getting billed for executions on a fairly frequent rate.&lt;/p&gt;

&lt;p&gt;Since Fargate is a fairly new service, I’d love to hear your feedback and comments.&lt;/p&gt;

&lt;h3 style=&quot;text-align: center&quot; id=&quot;comments&quot;&gt;Comments&lt;/h3&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = &quot;https://lobster1234.github.io/2017/12/03/run-tasks-with-aws-fargate-and-lambda/&quot;;  
this.page.identifier = &quot;/2017/12/03/run-tasks-with-aws-fargate-and-lambda&quot;;
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://lobster1234.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;


      

&lt;/script&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      
        <category term="docker" />
      
        <category term="ecs" />
      

      

      
        <summary type="html">As with any other financial company, at Marqeta, we have a good number of batch jobs, which we are migrating over to AWS Batch. However, even in managed mode, AWS Batch needs us to define Compute Environments, which are clusters of EC2 instances running ECS (and Docker) agents. AWS Fargate was announced very recently at re:Invent 2017. Fargate adds a layer of abstraction on top of the Compute Environment, or the ECS Cluster. We no longer have to worry about the AMI, EC2 types, task placement, etc. In this post I cover the POC done to use Fargate over AWS Batch for batch processing, but this can also be used as a tutorial for running any type of tasks using Fargate. We create an ECS Task definition, a Fargate Cluster, and a Lambda to run the task using CloudWatch Event trigger.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Scale By the Bay - Immutable AWS Deployments with Packer and Jenkins</title>
      
      
      <link href="https://lobster1234.github.io/2017/11/17/immutable-aws-deployments-with-packer-and-jenkins/" rel="alternate" type="text/html" title="Scale By the Bay - Immutable AWS Deployments with Packer and Jenkins" />
      
      <published>2017-11-17T12:44:37-08:00</published>
      <updated>2017-11-17T12:44:37-08:00</updated>
      <id>https://lobster1234.github.io/2017/11/17/immutable-aws-deployments-with-packer-and-jenkins</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/11/17/immutable-aws-deployments-with-packer-and-jenkins/">&lt;p&gt;Slides from my talk at &lt;a href=&quot;http://scale.bythebay.io/&quot; target=&quot;_blank_&quot;&gt;Scale By the Bay 2017&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this session I will talk about Immutable Deployments - which have become almost essential in the world of Microservices. As the frequency of deployments across multiple services increases with increasing granularity, it is critical to have repeatable, predictable and immutable deployments serving our customers. In practice, this is achieved via several DevOps tools. We will use Hashicorp &lt;a href=&quot;https://www.packer.io&quot;&gt;Packer&lt;/a&gt; and Jenkins to build a simple, immutable AWS deployment of a &lt;a href=&quot;https://github.com/lobster1234/helloworld-api&quot;&gt;hello-world microservice&lt;/a&gt;. Familiarity with AWS is recommended, but not required for this talk.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h4 id=&quot;slides&quot;&gt;Slides&lt;/h4&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;2a5b5a086a104c90a3902fdddbf30537&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;h4 id=&quot;video&quot;&gt;Video&lt;/h4&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/dzTlL2bjJ60&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      
        <category term="presentations" />
      

      
        <category term="aws," />
      
        <category term="presentations" />
      

      
        <summary type="html">Slides from my talk at Scale By the Bay 2017. In this session I will talk about Immutable Deployments - which have become almost essential in the world of Microservices. As the frequency of deployments across multiple services increases with increasing granularity, it is critical to have repeatable, predictable and immutable deployments serving our customers. In practice, this is achieved via several DevOps tools. We will use Hashicorp Packer and Jenkins to build a simple, immutable AWS deployment of a hello-world microservice. Familiarity with AWS is recommended, but not required for this talk.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Amazon Aurora Notes</title>
      
      
      <link href="https://lobster1234.github.io/2017/11/03/amazon-aurora-rds-notes/" rel="alternate" type="text/html" title="Amazon Aurora Notes" />
      
      <published>2017-11-03T13:44:37-07:00</published>
      <updated>2017-11-03T13:44:37-07:00</updated>
      <id>https://lobster1234.github.io/2017/11/03/amazon-aurora-rds-notes</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/11/03/amazon-aurora-rds-notes/">&lt;p&gt;At &lt;a href=&quot;https://www.marqeta.com&quot;&gt;Marqeta&lt;/a&gt;, we strive to continually evolve our platform to make it scalable and highly performant. We rely heavily on MySQL, and have many MySQL instances hosted across data centers, as well as on EC2s for various purposes. While refactoring some of our APIs, we thought of giving &lt;a href=&quot;https://aws.amazon.com/rds/aurora/&quot;&gt;Amazon Aurora&lt;/a&gt; a try. Having heard about Aurora’s performance and high availability, this was definitely a great opportunity. Setting up a single node cluster (one &lt;code class=&quot;highlighter-rouge&quot;&gt;db.t2.small&lt;/code&gt;) via the &lt;a href=&quot;https://console.aws.amazon.com/rds/home?region=us-east-1&quot;&gt;Console&lt;/a&gt; was the first step. After a few clicks, we had our first Aurora Cluster running happily. Next step was to fire up our regression tests while pointing to a schema in Aurora. Our database fixtures worked like a charm, and we were surprised to see all of our (thousand+) tests pass - while we knew it was a MySQL &lt;em&gt;drop in replacement&lt;/em&gt;, we still expected some drama. Great first impression!&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;This post is a collection of notes from online resources on Aurora (listed under References) that helped us learn more about the service, along with the excellent &lt;a href=&quot;http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html&quot;&gt;documentation&lt;/a&gt; on AWS.&lt;/p&gt;

&lt;h3 id=&quot;history&quot;&gt;History&lt;/h3&gt;

&lt;p&gt;Work on Aurora started around ~2011, and has it been around as a service for about 2.5 years. Traditional relational databases are built on a monolithic stack, with SQL, Transactions, Caching and Logging all lumped together. This has not changed since the 1970s. Scaling out a monolith would mean replicating the same stack many times.&lt;/p&gt;

&lt;h3 id=&quot;motivation&quot;&gt;Motivation&lt;/h3&gt;

&lt;p&gt;The motivation to build Aurora DB was to combine the performance and availability of commercial databases with simplicity and cost effectiveness of open source databases. Apart from being a drop in replacement to MySQL and it’s clones, the following principles form the core -&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Scale out, distributed design&lt;/li&gt;
  &lt;li&gt;Service oriented to leverage AWS services&lt;/li&gt;
  &lt;li&gt;Automation of administrative tasks that burden DBAs&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;distributed-scale-out-fault-tolerant-and-multitenant&quot;&gt;Distributed, Scale out, Fault tolerant and Multitenant&lt;/h4&gt;

&lt;p&gt;Logging and Storage layers are peeled off from the monolith to be distributed and multitenant. This allows for optimization at the network as well as storage level. Storage is distributed across three availability zones, replicated twice in each availability zone. The storage volume is also striped across hundreds of storage nodes. Finally, everything comes together with a purpose built storage layer protocol which utilizes &lt;em&gt;redo logs&lt;/em&gt; (compared to the MySQL bin logs and buffers). The traditional storage protocols are replaced with simple, redo log streams.&lt;/p&gt;

&lt;h4 id=&quot;integration-with-aws-services&quot;&gt;Integration with AWS Services&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Aurora integrates with Lambda - stored procedures and triggers can invoke Lambda functions&lt;/li&gt;
  &lt;li&gt;S3 is central to aurora - the snapshots and backups, etc. are stored in S3&lt;/li&gt;
  &lt;li&gt;IAM roles and policies are used to manage DB access control&lt;/li&gt;
  &lt;li&gt;The logs can be ingested into cloudwatch, and can be then used to create alarms&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;automate-tasks&quot;&gt;Automate tasks&lt;/h4&gt;

&lt;p&gt;The customers can focus on schema design and query optimization, while AWS manages failover, backup/recovery, snapshotting, etc. With a very different design than traditional databases, a lot of database management/administration activities are performed much quicker, with minimal to no impact to the database performance during the execution.&lt;/p&gt;

&lt;h3 id=&quot;pricing&quot;&gt;Pricing&lt;/h3&gt;

&lt;p&gt;Aurora has a very simple &lt;em&gt;Pay as you go&lt;/em&gt; &lt;a href=&quot;https://aws.amazon.com/rds/aurora/pricing/&quot;&gt;pricing&lt;/a&gt; model. The customers only pay for the storage and IO used. In other words, no provisioning is needed, which takes out the over or underestimation of IO and/or storage. Billing grows linearly with traffic. Aurora costs 1/10th the cost of commercial databases like Oracle and SQL Server. TCO is lower even for MySQL on EC2 due to no need for standby replica, less IOPS to pay for, and smaller instance size (and less number of instances) for the same workload.&lt;/p&gt;

&lt;h3 id=&quot;performance&quot;&gt;Performance&lt;/h3&gt;

&lt;p&gt;Aurora scales for reads and writes with instance size. In other words, an EC2 running MySQL will not scale linearly with the instance size, but Aurora would.&lt;/p&gt;

&lt;p&gt;The SysBench benchmark tests put Aurora up to 5X faster than MySQL on a 32-core, 244GB RAM setup.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;120K writes/sec vs. 25K writes/sec on MySQL&lt;/li&gt;
  &lt;li&gt;600K reads/sec on Aurora vs. 150K reads/sec on MySQL&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, Amazon’s own tests report the following at 30K IOPS -&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;With 5K connections - 8X faster&lt;/li&gt;
  &lt;li&gt;With 10K tables - 11X faster&lt;/li&gt;
  &lt;li&gt;With 1TB DB size - 21X faster&lt;/li&gt;
  &lt;li&gt;TPCC benchmark - 136X faster with 800GB DB size&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;design&quot;&gt;Design&lt;/h3&gt;

&lt;p&gt;Aurora deviates from a traditional storage system by using distributed, heavily replicated storage based on the redo log records. This makes the design much simpler, and dramatically reduces the frequency, and size of the IO to perform the same tasks as MySQL. This is true even after replicating the data six times (2x across 3 AZs).
The less amount of IO comes from not dealing with many buffers and many logs synchronously as MySQL. On an average, there is 7-9 times less traffic than MySQL. Another optimization is around Asynchronous Group Commits, which replace disk IO with network IO. The threading model is based on adaptive thread pool which can gracefully handle 5000+ concurrent connections on r3.8xlarge instance. The locking model allows for concurrent access to the lock chains, unlike a single lock in MySQL.&lt;/p&gt;

&lt;p&gt;A good overview can be found &lt;a href=&quot;http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Aurora.Overview.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;high-availability&quot;&gt;High Availability&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;6-way replication - 2 replicas in each of 3 Availability Zones&lt;/li&gt;
  &lt;li&gt;4 out of 6 write quorum for durable writes&lt;/li&gt;
  &lt;li&gt;3 out of 6 read quorum for durable reads&lt;/li&gt;
  &lt;li&gt;Peer to peer replication for repairs&lt;/li&gt;
  &lt;li&gt;Volume striped across hundreds of storage nodes&lt;/li&gt;
  &lt;li&gt;Up to 15 promotable read replicas, which can be distributed across 3 AZs&lt;/li&gt;
  &lt;li&gt;Automatic monitoring of the master, and one of the replicas is promoted on failure&lt;/li&gt;
  &lt;li&gt;There are &lt;em&gt;read replica endpoints&lt;/em&gt;, which can load balance read traffic across the read replicas for read requests&lt;/li&gt;
  &lt;li&gt;Replication protocol does not use &lt;em&gt;binlogs&lt;/em&gt;, but uses &lt;em&gt;redo log streams&lt;/em&gt; - this means the replication lag is in milliseconds vs. seconds (or mins) for MySQL&lt;/li&gt;
  &lt;li&gt;Automatic failover takes 15-30 seconds. The heartbeat is checked every second, and Aurora waits for 5 beats to fail before failing over. Once a failover is triggered, promotion involves DNS propagation (30s) and DB recovery (5-10s) compared to several minutes for MySQL&lt;/li&gt;
  &lt;li&gt;Cross-region read replicas can be used for faster DR and enhanced data locally&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ease-of-use&quot;&gt;Ease of use&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Automated storage management - up to 64TB storage volume, starts with 10G and more storage is automatically added in increments of 10G&lt;/li&gt;
  &lt;li&gt;Continuous incremental backups with no performance impact&lt;/li&gt;
  &lt;li&gt;Automatic hotspot management, encryption, mirror repair, re-striping&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;security-and-compliance&quot;&gt;Security and compliance&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Aurora uses KMS integration for encryption at rest for the storage volume&lt;/li&gt;
  &lt;li&gt;All the replication and network communication is over SSL&lt;/li&gt;
  &lt;li&gt;Industry Standards Compliant - SOC, ISO, PCI/DSS, HIPAA&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;monitoring&quot;&gt;Monitoring&lt;/h3&gt;

&lt;p&gt;There are more than 50 system and Operating System level metrics captured at 1-60s granularity. These metrics can be egressed to cloudwatch logs.&lt;/p&gt;

&lt;h3 id=&quot;use-cases&quot;&gt;Use Cases&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Consolidate multiple MySQL shards into 1 large Aurora instance&lt;/li&gt;
  &lt;li&gt;NoSQL workloads - massively concurrent event stores&lt;/li&gt;
  &lt;li&gt;Near realtime analytics and reporting with no lag read replicas&lt;/li&gt;
  &lt;li&gt;Event driven data pipelines via Lambda&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;While these notes do not cover recent developments with Aurora - like &lt;a href=&quot;https://aws.amazon.com/rds/aurora/details/postgresql-details/&quot;&gt;PostgreSQL support&lt;/a&gt;, I hope they convince you to take Aurora for a spin and check it out. There is a lot of information available in the &lt;a href=&quot;http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html&quot;&gt;official documentation&lt;/a&gt;, as well as on other blogs like &lt;a href=&quot;https://github.com/open-guides/og-aws#rds-aurora&quot;&gt;AWS Open Guide&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/60QumD2QsF0&quot;&gt;AWS re:Invent 2016: Getting Started with Amazon Aurora (DAT203)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/blogs/database/amazon-aurora-under-the-hood-fast-ddl/&quot;&gt;Amazon Aurora Under the Hood: Fast DDL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=duf5uUsW3TM&quot;&gt;AWS re:Invent 2016: Deep Dive on Amazon Aurora (DAT303)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 style=&quot;text-align: center&quot; id=&quot;comments&quot;&gt;Comments&lt;/h3&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = &quot;https://lobster1234.github.io/2017/11/03/amazon-aurora-rds-notes/&quot;;  
this.page.identifier = &quot;/2017/11/03/amazon-aurora-rds-notes&quot;;
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://lobster1234.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;


      

&lt;/script&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      

      
        <category term="aws," />
      
        <category term="aurora," />
      
        <category term="rds," />
      
        <category term="mysql" />
      

      
        <summary type="html">At Marqeta, we strive to continually evolve our platform to make it scalable and highly performant. We rely heavily on MySQL, and have many MySQL instances hosted across data centers, as well as on EC2s for various purposes. While refactoring some of our APIs, we thought of giving Amazon Aurora a try. Having heard about Aurora’s performance and high availability, this was definitely a great opportunity. Setting up a single node cluster (one db.t2.small) via the Console was the first step. After a few clicks, we had our first Aurora Cluster running happily. Next step was to fire up our regression tests while pointing to a schema in Aurora. Our database fixtures worked like a charm, and we were surprised to see all of our (thousand+) tests pass - while we knew it was a MySQL drop in replacement, we still expected some drama. Great first impression!</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Fanout SNS-SQS Gotcha</title>
      
      
      <link href="https://lobster1234.github.io/2017/10/14/fan-out-with-sns-and-sqs-gotcha/" rel="alternate" type="text/html" title="Fanout SNS-SQS Gotcha" />
      
      <published>2017-10-14T13:44:37-07:00</published>
      <updated>2017-10-14T13:44:37-07:00</updated>
      <id>https://lobster1234.github.io/2017/10/14/fan-out-with-sns-and-sqs-gotcha</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/10/14/fan-out-with-sns-and-sqs-gotcha/">&lt;p&gt;One of the very common architectural patterns is &lt;em&gt;fan-out&lt;/em&gt; where an event is sent to multiple subscribers by a broker. An event can be like placing an order, which can then be handled by inventory service, record-keeping, as well as shipping service concurrently. These events can also be very frequent - like clickstreams, or search strings on a website. AWS allows for &lt;a href=&quot;http://docs.aws.amazon.com/sns/latest/dg/SNS_Scenarios.html&quot;&gt;fan-out architecture&lt;/a&gt; with &lt;a href=&quot;https://aws.amazon.com/sns/&quot;&gt;SNS&lt;/a&gt; topics, and &lt;a href=&quot;https://aws.amazon.com/sqs/&quot;&gt;SQS&lt;/a&gt; queues. SQS queue(s) can subscribe to SNS topics and receive any message sent to the SNS topic(s). It is documented that &lt;a href=&quot;http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html&quot;&gt;FIFO queues&lt;/a&gt; cannot be SNS subscribers &lt;a href=&quot;https://forums.aws.amazon.com/thread.jspa?threadID=246962&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, as I recently found out, SSE-enabled SQS queues cannot subscribe to SNS either. While AWS stops us from subscribing a FIFO queue to SNS, &lt;a href=&quot;https://aws.amazon.com/blogs/aws/new-server-side-encryption-for-amazon-simple-queue-service-sqs/&quot;&gt;SSE-enabled queues&lt;/a&gt; are allowed to subscribe, but they never get any events. The purpose of this post is to document this previously undocumented behavior.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h3 id=&quot;setup&quot;&gt;Setup&lt;/h3&gt;
&lt;p&gt;We will create an SNS topic called &lt;code class=&quot;highlighter-rouge&quot;&gt;fan-out-topic&lt;/code&gt;, and then create a SQS Standard Queue called &lt;code class=&quot;highlighter-rouge&quot;&gt;fan-out-sink&lt;/code&gt;. We will create an IAM policy so the queue can receive messages from the topic, and finally we will subscribe the queue to the topic. Next, we will verify that the fan-out works. Finally we will enable SSE on the queue, and verify that the fan out no longer works.&lt;/p&gt;

&lt;p&gt;I will use &lt;a href=&quot;https://github.com/awslabs/aws-shell&quot;&gt;aws-shell&lt;/a&gt; CLI for all the operations.&lt;/p&gt;

&lt;h3 id=&quot;create-an-sns-topic&quot;&gt;Create an SNS topic&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sns create-topic --name fan-out-topic
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;create-the-sqs-queue&quot;&gt;Create the SQS queue&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sqs create-queue --queue-name fan-out-sink
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;create-an-iam-policy&quot;&gt;Create an IAM policy&lt;/h3&gt;
&lt;p&gt;The SQS queue will need to have an associated IAM policy to allow the SNS topic to send message to it via &lt;code class=&quot;highlighter-rouge&quot;&gt;SendMessage&lt;/code&gt; action.&lt;/p&gt;

&lt;p&gt;This is where it gets interesting. AWS’s handling of assigning policies to SQS via CLI is really uncomfortable. Basically we’d need to flatten out the entire IAM policy JSON as a string, and put everything in a single line. We will create one file, call it &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp/policy.json&lt;/code&gt;, with these contents. Your account IDs/ARNs will be different.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Policy&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{ \&quot;Version\&quot;: \&quot;2012-10-17\&quot;, \&quot;Id\&quot;: \&quot;arn:aws:sqs:us-east-1:***********:fan-out-sink/SQSDefaultPolicy\&quot;, \&quot;Statement\&quot;: [{ \&quot;Sid\&quot;: \&quot;Sid1508039487834\&quot;,\&quot;Effect\&quot;: \&quot;Allow\&quot;, \&quot;Principal\&quot;: {\&quot;AWS\&quot;: \&quot;*\&quot;},\&quot;Action\&quot;: \&quot;SQS:SendMessage\&quot;,\&quot;Resource\&quot;: \&quot;arn:aws:sqs:us-east-1:***********:fan-out-sink\&quot;,\&quot;Condition\&quot;: {\&quot;ArnEquals\&quot;: {\&quot;aws:SourceArn\&quot;: \&quot;arn:aws:sns:us-east-1:***********:fan-out-topic\&quot;}}}]}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;associate-this-policy-with-sqs&quot;&gt;Associate this policy with SQS&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sqs set-queue-attributes --queue-url https://queue.amazonaws.com/***********/fan-out-sink --attributes file:///tmp/policy.json
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;subscribe-sqs-to-sns&quot;&gt;Subscribe SQS to SNS&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sns subscribe --topic-arn arn:aws:sns:us-east-1:***********:fan-out-topic --protocol sqs --notification-endpoint arn:aws:sqs:us-east-1:***********:fan-out-sink
{
    &quot;SubscriptionArn&quot;: &quot;arn:aws:sns:us-east-1:***********:fan-out-topic:c0ddf05a-a62e-44dc-ac64-99da02a00fba&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;SubscriptionArn&lt;/code&gt; would mean that we do not need to confirm this subscription.&lt;/p&gt;

&lt;h3 id=&quot;try-the-fan-out--works&quot;&gt;Try the fan-out : works!&lt;/h3&gt;
&lt;p&gt;Let’s publish a message on the topic&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sns publish --message &quot;Hello!&quot; --topic-arn arn:aws:sns:us-east-1:***********:fan-out-topic
{
    &quot;MessageId&quot;: &quot;92ce4aac-c8b9-59b3-b4c3-18f02e3a1306&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;..and receive it&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sqs receive-message --queue-url https://queue.amazonaws.com/***********/fan-out-sink
{
    &quot;Messages&quot;: [
        {
            &quot;Body&quot;: &quot;{\n  \&quot;Type\&quot; : \&quot;Notification\&quot;,\n  \&quot;MessageId\&quot; : \&quot;d649c24e-fcac-5375-b1e5-901227c0fa47\&quot;,\n  \&quot;TopicArn\&quot; : \&quot;arn:aws:sns:us-east-1:***********:fan-out-topic\&quot;,\n  \&quot;Message\&quot; : \&quot;Hello!\&quot;,\n  \&quot;Timestamp\&quot; : \&quot;2017-10-15T03:42:36.671Z\&quot;,\n  \&quot;SignatureVersion\&quot; : \&quot;1\&quot;,\n  &quot;MessageId&quot;: &quot;88e5bca5-60a0-48ba-8148-67930dc3cee0&quot;
        }
    ]
}
aws&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;I’ve removed other response attributes for brevity.&lt;/p&gt;

&lt;p&gt;We will then purge this queue before enabling SSE on it. Alternatively, we may choose to just delete the messages.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sqs purge-queue --queue-url https://queue.amazonaws.com/***********/fan-out-sink
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;enable-sse-on-sqs&quot;&gt;Enable SSE on SQS&lt;/h3&gt;
&lt;p&gt;Since I have a CMK I had created earlier, I will use it’s alias. You may choose to use &lt;code class=&quot;highlighter-rouge&quot;&gt;alias/aws/sqs&lt;/code&gt; if one does not exist, as this is a Managed CMK AWS uses to encrypt any SQS.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sqs set-queue-attributes --queue-url https://queue.amazonaws.com/***********/fan-out-sink --attributes KmsMasterKeyId=alias/my-master-key
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We can verify that the queue has SSE enabled by doing so -&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sqs get-queue-attributes --attribute-names KmsMasterKeyId --queue-url https://queue.amazonaws.om/***********/fan-out-sink
{
    &quot;Attributes&quot;: {
        &quot;KmsMasterKeyId&quot;: &quot;alias/my-master-key&quot;
    }
}
aws&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;try-the-fan-out--fails&quot;&gt;Try the fan-out : fails!&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sns publish --message &quot;Hello!&quot; --topic-arn arn:aws:sns:us-east-1:***********:fan-out-topic
{
    &quot;MessageId&quot;: &quot;d28301cf-994c-5e50-a365-53937013a49c&quot;
}
aws&amp;gt; sqs receive-message --queue-url https://queue.amazonaws.com/***********/fan-out-sink
aws&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;As we can see, we did not get the message in the queue. This can also be verified on the AWS Console, where the queue will show zero available messages.&lt;/p&gt;

&lt;h3 id=&quot;re-validate-by-disabling-sse&quot;&gt;Re-validate by disabling SSE&lt;/h3&gt;
&lt;p&gt;We will remove SSE and run one final test. This is done by setting &lt;code class=&quot;highlighter-rouge&quot;&gt;KmsMasterKeyId&lt;/code&gt; to empty.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws&amp;gt; sqs set-queue-attributes --queue-url https://queue.amazonaws.com/***********/fan-out-sink --attributes KmsMasterKeyId=
aws&amp;gt; sqs get-queue-attributes --attribute-names KmsMasterKeyId --queue-url https://queue.amazonaws.om/***********/fan-out-sink
aws&amp;gt;
aws&amp;gt; sns publish --message &quot;Reverification!&quot; --topic-arn arn:aws:sns:us-east-1:***********:fan-out-topic
{
    &quot;MessageId&quot;: &quot;be931efe-aa12-561e-87c5-4ca2405cc84a&quot;
}
aws&amp;gt; sqs receive-message --queue-url https://queue.amazonaws.com/***********/fan-out-sink
{
    &quot;Messages&quot;: [
        {
            &quot;Body&quot;: &quot;{\n  \&quot;Type\&quot; : \&quot;Notification\&quot;,\n  \&quot;MessageId\&quot; : \&quot;be931efe-aa12-561e-87c5-4ca2405cc84a\&quot;,\n  \&quot;TopicArn\&quot; : \&quot;arn:aws:sns:us-east-1:***********:fan-out-topic\&quot;,\n  \&quot;Message\&quot; : \&quot;Reverification!\&quot;,\n  \&quot;Timestamp\&quot; : \&quot;2017-10-15T04:46:06.457Z\&quot;,\n  \&quot;SignatureVersion\&quot; : \&quot;1\&quot;,\n
            &quot;MessageId&quot;: &quot;a987c68e-141f-4a29-a8d3-d3668c5c98a6&quot;
        }
    ]
}
aws&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This shows that an SSE-enabled SQS queue cannot get messages from a subscribed SNS topic.&lt;/p&gt;

&lt;h3 style=&quot;text-align: center&quot; id=&quot;comments&quot;&gt;Comments&lt;/h3&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = &quot;https://lobster1234.github.io/2017/10/14/fan-out-with-sns-and-sqs-gotcha/&quot;;  
this.page.identifier = &quot;/2017/10/14/fan-out-with-sns-and-sqs-gotcha&quot;;
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://lobster1234.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;


      

&lt;/script&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      

      
        <category term="aws," />
      
        <category term="sqs," />
      
        <category term="sns," />
      
        <category term="fanout" />
      

      
        <summary type="html">One of the very common architectural patterns is fan-out where an event is sent to multiple subscribers by a broker. An event can be like placing an order, which can then be handled by inventory service, record-keeping, as well as shipping service concurrently. These events can also be very frequent - like clickstreams, or search strings on a website. AWS allows for fan-out architecture with SNS topics, and SQS queues. SQS queue(s) can subscribe to SNS topics and receive any message sent to the SNS topic(s). It is documented that FIFO queues cannot be SNS subscribers here. However, as I recently found out, SSE-enabled SQS queues cannot subscribe to SNS either. While AWS stops us from subscribing a FIFO queue to SNS, SSE-enabled queues are allowed to subscribe, but they never get any events. The purpose of this post is to document this previously undocumented behavior.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Logstash logging with AWS Lambda</title>
      
      
      <link href="https://lobster1234.github.io/2017/10/10/logstash-with-aws-lambda/" rel="alternate" type="text/html" title="Logstash logging with AWS Lambda" />
      
      <published>2017-10-10T13:44:37-07:00</published>
      <updated>2017-10-10T13:44:37-07:00</updated>
      <id>https://lobster1234.github.io/2017/10/10/logstash-with-aws-lambda</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/10/10/logstash-with-aws-lambda/">&lt;p&gt;Its a challenge to log messages with a Lambda, given that there is no server to run the agents or forwarders (splunk, filebeat, etc.) on. Here is a quick and easy tutorial to set up &lt;a href=&quot;https://www.elastic.co/products&quot;&gt;ELK&lt;/a&gt; logging by writing directly to &lt;a href=&quot;https://www.elastic.co/products/logstash&quot;&gt;logstash&lt;/a&gt; via the &lt;a href=&quot;https://github.com/logstash/logstash-logback-encoder&quot;&gt;TCP appender&lt;/a&gt; and logback. This is for a Java/Maven based Lambda.&lt;/p&gt;

&lt;!--more--&gt;

&lt;blockquote&gt;
  &lt;p&gt;Make sure the Lambda is running in the right Subnet and has the right Security Group(s) to be able to talk to Logstash server and port.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;pomxml&quot;&gt;pom.xml&lt;/h1&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;net.logstash.logback&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;logstash-logback-encoder&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;4.11&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;ch.qos.logback&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;logback-classic&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.2.3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;logbackxml&quot;&gt;logback.xml&lt;/h1&gt;

&lt;p&gt;We will use 2 appenders - the &lt;code class=&quot;highlighter-rouge&quot;&gt;STDOUT&lt;/code&gt; appender will send the logs to cloudwatch, just in case Logstash TCP does not work.&lt;/p&gt;

&lt;p&gt;Add this file to &lt;code class=&quot;highlighter-rouge&quot;&gt;src/main/resources&lt;/code&gt; folder.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stash&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;net.logstash.logback.appender.LogstashTcpSocketAppender&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Replace the destination with the logstash server: logstash port --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;destination&amp;gt;&lt;/span&gt;localhost:5000&lt;span class=&quot;nt&quot;&gt;&amp;lt;/destination&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- There can be multiple destinations --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;encoder&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;net.logstash.logback.encoder.LogstashEncoder&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/appender&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;STDOUT&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.core.ConsoleAppender&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;layout&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.classic.PatternLayout&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;Pattern&amp;gt;&lt;/span&gt;
                  %d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Pattern&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/layout&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/appender&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;root&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;level=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DEBUG&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender-ref&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stash&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender-ref&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;STDOUT&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/root&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;the-handler-method&quot;&gt;The Handler method&lt;/h1&gt;
&lt;p&gt;In the hander method, reset the &lt;code class=&quot;highlighter-rouge&quot;&gt;LoggerContext&lt;/code&gt;, and reload the configuration. I know this sounds super odd, but when invoking lambdas multiple times, I did notice the logs missing from Kibana. Since I do not know how AWS recycles lambda execution environments, it is something to do with logback context being in a limbo. I even noticed some executions timing out (I had a 60s timeout), but somehow made it to Kibana as unique invocations. If you’ve made it work any other way, please mention in the comments section below. I am using &lt;a href=&quot;https://www.serverless.com&quot;&gt;Serverless Framework&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

 &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SNSEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;LoggerContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loggerContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoggerContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getILoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;loggerContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;JoranConfigurator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JoranConfigurator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loggerContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doConfigure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResourceAsStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/logback.xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRecords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSNS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JoranException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Cannot initialize logger context &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;finally-block&quot;&gt;finally block&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Make sure the code closes the Logging Context before the JVM dies.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LoggerContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loggerContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoggerContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getILoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;loggerContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;testing-locally-with-docker-elk&quot;&gt;Testing locally with Docker-ELK&lt;/h1&gt;

&lt;p&gt;Install the ELK stack on Docker locally via &lt;a href=&quot;https://github.com/deviantony/docker-elk&quot;&gt;docker-elk&lt;/a&gt; and create the default index. This will listen on port &lt;code class=&quot;highlighter-rouge&quot;&gt;5000&lt;/code&gt; for LogStash.&lt;/p&gt;

&lt;h1 id=&quot;logstash-tcp-receiver&quot;&gt;Logstash TCP receiver&lt;/h1&gt;

&lt;p&gt;Final change, locate &lt;code class=&quot;highlighter-rouge&quot;&gt;$LOGSTASH_HOME/pipeline/logstash.conf&lt;/code&gt; and change the &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; to include the &lt;code class=&quot;highlighter-rouge&quot;&gt;json_lines&lt;/code&gt; codec. This is needed to ensure that the &lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt; does not end up being embedded in another &lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;input {
        tcp {
                port =&amp;gt; 5000
                codec =&amp;gt; json_lines
        }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Restart Logstash, and search for the message in Kibana (port &lt;code class=&quot;highlighter-rouge&quot;&gt;5601&lt;/code&gt; if you’re using docker-elk) after running the lambda.&lt;/p&gt;

&lt;p&gt;Here is a sample output -&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@version:
    1
host:
    10.0.1.128
@timestamp:
    October 10th 2017, 23:16:55.273
message:
    {&quot;@timestamp&quot;:&quot;2017-10-10T06:16:55.018+00:00&quot;,&quot;@version&quot;:1,&quot;message&quot;:&quot;Testing ELK Logging with Logstash and Lambda &quot;,&quot;logger_name&quot;:&quot;com.test.serverless.logging.Handler&quot;,&quot;thread_name&quot;:&quot;main&quot;,&quot;level&quot;:&quot;INFO&quot;,&quot;level_value&quot;:20000}
port:
    48,608
_id:
    AV8o-lTxQqZEdfFJQV0z
_type:
    logs
_index:
    logstash-2017.10.10
_score:
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 style=&quot;text-align: center&quot; id=&quot;comments&quot;&gt;Comments&lt;/h3&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = &quot;https://lobster1234.github.io/2017/10/10/logstash-with-aws-lambda/&quot;;  
this.page.identifier = &quot;/2017/10/10/logstash-with-aws-lambda&quot;;
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://lobster1234.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;


      

&lt;/script&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      
        <category term="serverless" />
      

      
        <category term="aws," />
      
        <category term="lambda," />
      
        <category term="serverless" />
      

      
        <summary type="html">Its a challenge to log messages with a Lambda, given that there is no server to run the agents or forwarders (splunk, filebeat, etc.) on. Here is a quick and easy tutorial to set up ELK logging by writing directly to logstash via the TCP appender and logback. This is for a Java/Maven based Lambda.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">SVCC 2017 - AWS Lambda with Serverless Framework and Java</title>
      
      
      <link href="https://lobster1234.github.io/2017/10/07/aws-lambda-with-serverless-framework-and-java/" rel="alternate" type="text/html" title="SVCC 2017 - AWS Lambda with Serverless Framework and Java" />
      
      <published>2017-10-07T13:44:37-07:00</published>
      <updated>2017-10-07T13:44:37-07:00</updated>
      <id>https://lobster1234.github.io/2017/10/07/aws-lambda-with-serverless-framework-and-java</id>
      <content type="html" xml:base="https://lobster1234.github.io/2017/10/07/aws-lambda-with-serverless-framework-and-java/">&lt;p&gt;Slides from my talk at &lt;a href=&quot;https://www.siliconvalley-codecamp.com/&quot; target=&quot;_blank_&quot;&gt;Silicon Valley Code Camp 2017&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Serverless is a node.js based framework that makes creating, deploying, and managing serverless functions a breeze. We will use AWS Lambda as our FaaS (Function-as-a-Service) provider, although Serverless supports IBM OpenWhisk and Microsoft Azure as well.&lt;/p&gt;

&lt;p&gt;In this session, we will talk about Serverless Applications, and Create and deploy a java-maven based AWS Lambda API. We will also explore the command line interface to manage lambda, which is provided out of the box by serverless framework.
&lt;!--more--&gt;&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;6287d345962748ad9937d7c55b399425&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Manish Pandit</name>
          
          
        </author>
      

      
        <category term="aws" />
      
        <category term="presentations" />
      
        <category term="serverless" />
      

      
        <category term="aws," />
      
        <category term="lambda," />
      
        <category term="presentations," />
      
        <category term="svcc17," />
      
        <category term="serverless" />
      

      
        <summary type="html">Slides from my talk at Silicon Valley Code Camp 2017. Serverless is a node.js based framework that makes creating, deploying, and managing serverless functions a breeze. We will use AWS Lambda as our FaaS (Function-as-a-Service) provider, although Serverless supports IBM OpenWhisk and Microsoft Azure as well. In this session, we will talk about Serverless Applications, and Create and deploy a java-maven based AWS Lambda API. We will also explore the command line interface to manage lambda, which is provided out of the box by serverless framework.</summary>
      

      
      
    </entry>
  
  
</feed>
